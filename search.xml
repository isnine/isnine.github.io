<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[iOS Fastlane+CI自动化构建]]></title>
      <url>/2019/05/16/fastlane-ios/</url>
      <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在公司时，都是由一套完整的工具链完成，开发-&gt;构建-&gt;分发-&gt;测试，等流程<br>而作为个人开发时，失去了这套工具链，自然感觉到十分不便<br>所以笔者思考，能否自己搭建一套这样的工具链呢</p>
<h1 id="需求列表"><a href="#需求列表" class="headerlink" title="需求列表"></a>需求列表</h1><p>搭建一套工具，首先要明确我想实现的效果<br>我目前发布一个版本到TestFlight内测，需要以下几个步骤</p>
<ul>
<li>手动改Xcode的build号格式为当天日期+次数，如09051601</li>
<li>手动archive，等待漫长过程，然后上传appstore</li>
<li>等待30分钟左右机器审核，然后手动选择组</li>
<li>重复输入更新内容，再点分发测试</li>
</ul>
<p>如果需要发一个版本到AppStore<br>除了上述几个内容，我还需要</p>
<ul>
<li>选择编译版本</li>
<li>添加版本更新内容</li>
<li>选择有无加密app</li>
<li>有无增加广告标识号</li>
</ul>
<p>对于我而说，我希望上述两个过程，全部可以分别通过一行命令来进行<br>我希望我只需要<strong>git push</strong>一下，这些操作会自动在背后ci构建</p>
<h1 id="最终实现效果"><a href="#最终实现效果" class="headerlink" title="最终实现效果"></a>最终实现效果</h1><p>本地git push后</p>
<ul>
<li>如果当前在master分支，ci自动打包发布TestFlight，版本号为当前日期+次数，并打tag提交。</li>
<li>如果当前在release/xxx分支，ci自动发布AppStore，版本号为当前日期+次数，并打tag提交。<h2 id="流程示意图"><a href="#流程示意图" class="headerlink" title="流程示意图"></a>流程示意图</h2><img src="https://img.wxz.name/15583584051012.jpg" alt=""><h2 id="Ci结果图"><a href="#Ci结果图" class="headerlink" title="Ci结果图"></a>Ci结果图</h2><img src="https://img.wxz.name/15583584946186.jpg" alt=""></li>
</ul>
<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="选用工具"><a href="#选用工具" class="headerlink" title="选用工具"></a>选用工具</h2><ul>
<li>github作为存储代码的仓库</li>
<li>travis-ci作为构建的ci</li>
<li>fastlane作为构建工具<blockquote>
<p>注意，如果你的仓库是私有仓库的话，travis-ci将不再免费，不过如果通过了学生认证的话，依旧是免费的，笔者因为目前是学生，所以并没有单独购买。</p>
</blockquote>
</li>
</ul>
<h2 id="期间遇到的坑"><a href="#期间遇到的坑" class="headerlink" title="期间遇到的坑"></a>期间遇到的坑</h2><ul>
<li>travis-ci 的KeyChain导致不能编译</li>
<li>apple的两步验证导致流程不能通过</li>
<li>build号自增</li>
</ul>
<h2 id="1-配置Fastlane"><a href="#1-配置Fastlane" class="headerlink" title="1.配置Fastlane"></a>1.配置Fastlane</h2><p>首先进入工程目录，安装并对工程目录初始化<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># 安装fastlane</div><div class="line">sudo gem install fastlane -NV</div><div class="line"># 初始化工程</div><div class="line">fastlane init</div></pre></td></tr></table></figure></p>
<p>接着修改Fastfile文件<br>可以参照我的<a href="https://gist.github.com/isnine/d4aacf8fcc7ecae50c3c8390651b893f" target="_blank" rel="external">Fastfile文件</a></p>
<h2 id="1-1-更新版本号配置"><a href="#1-1-更新版本号配置" class="headerlink" title="1.1 更新版本号配置"></a>1.1 更新版本号配置</h2><p>在这一步中，我会先从iTunes Connect上获取最新的版本号，然后拉取下来，如果日期相同，则加一，否则重置为当天日期+01.比如19055101<br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">    <span class="comment"># 更新版本号</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateProjectBuildNumber</span></span></div><div class="line">   currentTime = Time.new.strftime(<span class="string">"%y%m%d"</span>)</div><div class="line">   build = latest_testflight_build_number(<span class="symbol">version:</span> get_version_number)</div><div class="line">   puts(<span class="string">"*************| Tag: <span class="subst">#&#123;build&#125;</span> |*************"</span>)</div><div class="line">   buildStr = build.to_s</div><div class="line">   <span class="keyword">if</span> buildStr.<span class="keyword">include</span>?<span class="string">"<span class="subst">#&#123;currentTime&#125;</span>"</span></div><div class="line">      <span class="comment"># =&gt; 为当天版本 计算迭代版本号</span></div><div class="line">      lastStr = buildStr[buildStr.length-<span class="number">2</span>..buildStr.length-<span class="number">1</span>]</div><div class="line">      lastNum = lastStr.to_i</div><div class="line">      lastNum = lastNum + <span class="number">1</span></div><div class="line">      lastStr = lastNum.to_s</div><div class="line">      <span class="keyword">if</span> lastNum &lt; <span class="number">10</span></div><div class="line">         lastStr = lastStr.insert(<span class="number">0</span>,<span class="string">"0"</span>)</div><div class="line">      <span class="keyword">end</span></div><div class="line">      build = <span class="string">"<span class="subst">#&#123;currentTime&#125;</span><span class="subst">#&#123;lastStr&#125;</span>"</span></div><div class="line">   <span class="keyword">else</span></div><div class="line">      <span class="comment"># =&gt; 非当天版本 build 号重置</span></div><div class="line">      build = <span class="string">"<span class="subst">#&#123;currentTime&#125;</span>01"</span></div><div class="line">   <span class="keyword">end</span></div><div class="line">   puts(<span class="string">"*************| 更新build <span class="subst">#&#123;build&#125;</span> |*************"</span>)</div><div class="line">   <span class="comment"># =&gt; 更改项目 build 号</span></div><div class="line">   increment_build_number(</div><div class="line">   <span class="symbol">build_number:</span> <span class="string">"<span class="subst">#&#123;build&#125;</span>"</span></div><div class="line">   )</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="1-3-上传testFlight配置"><a href="#1-3-上传testFlight配置" class="headerlink" title="1.3 上传testFlight配置"></a>1.3 上传testFlight配置</h2><p>在这一部中，我会首先编译当前的app，然后上传到testFlight,最后更新版本tag，push到远端，再上传dysm到fabric中。Changelog.txt里会存放我这个版本的变更内容。<br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">   lane <span class="symbol">:beta</span> <span class="keyword">do</span></div><div class="line">      <span class="comment"># 编译app</span></div><div class="line">      buildApp</div><div class="line">      <span class="comment"># 上传</span></div><div class="line">      upload_to_testflight(</div><div class="line">      <span class="symbol">beta_app_feedback_email:</span> <span class="string">"wxz@wxz.name"</span>,</div><div class="line">      <span class="symbol">beta_app_description:</span> <span class="string">""</span>,</div><div class="line">      <span class="symbol">notify_external_testers:</span> <span class="literal">false</span>,</div><div class="line">      <span class="symbol">distribute_external:</span> <span class="literal">true</span>,</div><div class="line">      <span class="symbol">changelog:</span> File.read(<span class="string">"Changelog.txt"</span>),</div><div class="line">      <span class="symbol">groups:</span> [<span class="string">"testflight.top"</span>,<span class="string">"Price Tag"</span>,<span class="string">"其他渠道"</span>],</div><div class="line">      )</div><div class="line">      <span class="comment"># 更新版本tag</span></div><div class="line">      add_git_tag</div><div class="line">      <span class="keyword">if</span> is_ci?</div><div class="line">        system <span class="string">"git push https://isnine:$&#123;GH_Token&#125;@github.com/user/repo.git --tags"</span></div><div class="line">     <span class="keyword">else</span></div><div class="line">        push_to_git_remote</div><div class="line">     <span class="keyword">end</span></div><div class="line">      <span class="comment"># 上传dysm</span></div><div class="line">      <span class="comment"># crashlytics(api_token: "xxxxx",</span></div><div class="line">      <span class="comment"># build_secret: "xxxx")</span></div><div class="line">   <span class="keyword">end</span></div><div class="line">   <span class="comment"># 编译当前app</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildApp</span></span></div><div class="line">   <span class="comment"># 更改build号</span></div><div class="line">   updateProjectBuildNumber</div><div class="line">   <span class="comment"># 编译</span></div><div class="line">   build_app(<span class="symbol">workspace:</span> <span class="string">"easy.xcworkspace"</span>, <span class="symbol">scheme:</span> <span class="string">"easy"</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="1-4-上传appStore配置"><a href="#1-4-上传appStore配置" class="headerlink" title="1.4 上传appStore配置"></a>1.4 上传appStore配置</h2><p>这一步和上一步也类似，只是apple store的选项比较多<br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">platform <span class="symbol">:ios</span> <span class="keyword">do</span></div><div class="line">   lane <span class="symbol">:release</span> <span class="keyword">do</span></div><div class="line">      <span class="comment"># 编译app</span></div><div class="line">      buildApp</div><div class="line">      <span class="comment"># 上传app</span></div><div class="line">      upload_to_app_store(</div><div class="line">      <span class="symbol">skip_screenshots:</span> <span class="literal">true</span>,</div><div class="line">      <span class="symbol">skip_metadata:</span> <span class="literal">false</span>,</div><div class="line">      <span class="symbol">reject_if_possible:</span> <span class="literal">true</span>,</div><div class="line">      <span class="comment"># skip_binary_upload: true,</span></div><div class="line">      <span class="symbol">force:</span> <span class="literal">true</span>,</div><div class="line">      <span class="symbol">app_review_information:</span> &#123;</div><div class="line">         <span class="symbol">first_name:</span> <span class="string">'W'</span>,</div><div class="line">         <span class="symbol">last_name:</span> <span class="string">'XZ'</span>,</div><div class="line">         <span class="symbol">phone_number:</span> <span class="string">'+86 1760000000'</span>,</div><div class="line">         <span class="symbol">email_address:</span> <span class="string">'user@example.com'</span>,</div><div class="line">         <span class="symbol">demo_user:</span> <span class="string">''</span>,</div><div class="line">         <span class="symbol">demo_password:</span> <span class="string">''</span>,</div><div class="line">         <span class="symbol">notes:</span> <span class="string">''</span></div><div class="line">      &#125;,</div><div class="line">      <span class="symbol">submit_for_review:</span> <span class="literal">true</span>,</div><div class="line">      <span class="symbol">submission_information:</span> &#123;</div><div class="line">         <span class="symbol">add_id_info_limits_tracking:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">add_id_info_serves_ads:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">add_id_info_tracks_action:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">add_id_info_tracks_install:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">add_id_info_uses_idfa:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">content_rights_has_rights:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">content_rights_contains_third_party_content:</span> <span class="literal">true</span>,</div><div class="line">         <span class="symbol">export_compliance_platform:</span> <span class="string">'ios'</span>,</div><div class="line">         <span class="symbol">export_compliance_compliance_required:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_encryption_updated:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_app_type:</span> <span class="literal">nil</span>,</div><div class="line">         <span class="symbol">export_compliance_uses_encryption:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_is_exempt:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_contains_third_party_cryptography:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_contains_proprietary_cryptography:</span> <span class="literal">false</span>,</div><div class="line">         <span class="symbol">export_compliance_available_on_french_store:</span> <span class="literal">false</span></div><div class="line">      &#125;,</div><div class="line">      <span class="symbol">release_notes:</span> &#123;<span class="string">'default'</span> =&gt; File.read(<span class="string">"Changelog.txt"</span>),</div><div class="line">                      <span class="string">'zh-Hans'</span> =&gt; File.read(<span class="string">"Changelog.txt"</span>),</div><div class="line">                      <span class="string">'en-US'</span> =&gt; File.read(<span class="string">"Changelog.txt"</span>)&#125;</div><div class="line">      )</div><div class="line">      <span class="comment"># 更新版本tag</span></div><div class="line">      add_git_tag</div><div class="line">      <span class="keyword">if</span> is_ci?</div><div class="line">        system <span class="string">"git push https://isnine:$&#123;GH_Token&#125;@github.com/user/repo.git --tags"</span></div><div class="line">     <span class="keyword">else</span></div><div class="line">        push_to_git_remote</div><div class="line">     <span class="keyword">end</span></div><div class="line">      <span class="comment"># 上传dysm</span></div><div class="line">      <span class="comment"># crashlytics(api_token: "xxxx",</span></div><div class="line">      <span class="comment"># build_secret: "xxx")</span></div><div class="line">   <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="2-ci配置"><a href="#2-ci配置" class="headerlink" title="2 ci配置"></a>2 ci配置</h2><p>完成了上面两步，其实已经可以通过fastlane beta和fastlanbe release在本地发布了，因为本地非常方面，其实是不需要考虑以下问题。</p>
<ul>
<li>证书导入</li>
<li>私钥导入</li>
<li>github push权限</li>
<li>apple connect权限</li>
<li>两步认证<br>而CI因为每次启动都是一个新的环境，这些全部要考虑一遍。<br>首先需要再fastlane/certs/目录下存放好相关的p12和描述文件,如图所示:<br><img src="https://img.wxz.name/15584097255132.jpg" alt=""><br>接着我在fastlane目录下，写了个导入描述文件的脚本:<br>load_provision.sh<figure class="highlight sh"><table><tr><td class="code"><pre><div class="line">mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles</div><div class="line">cp ./certs/*.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后Fastfile部分如下<br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 记得提前在CI中设置 https://travis-ci.com/&#123;user&#125;/&#123;app&#125;/settings</span></div><div class="line">  <span class="comment"># - GH_Token //Github的token</span></div><div class="line">  <span class="comment"># - Cert_PassWord //证书密码</span></div><div class="line">  <span class="comment"># - FASTLANE_PASSWORD // Apple 账号密码</span></div><div class="line">  <span class="comment"># - FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD //不开两步认证忽略，PassWord apple专用密码</span></div><div class="line">  <span class="comment"># - Apple_Session //appleSession，不开两步认证忽略，通过fastlane spaceauth -u user<span class="doctag">@example</span>.com获得</span></div><div class="line">  lane <span class="symbol">:ci</span> <span class="keyword">do</span></div><div class="line">     branch = git_branch</div><div class="line">     puts(<span class="string">"*************| 当前branch <span class="subst">#&#123;branch&#125;</span> |*************"</span>)</div><div class="line">     <span class="comment"># 配置环境</span></div><div class="line">     keychain_name = <span class="string">"easy-build"</span></div><div class="line">     keychain_password = <span class="string">"travis"</span></div><div class="line">     <span class="comment"># 设置session 规避两步验证码，不开两步认证忽略</span></div><div class="line">     <span class="comment"># ENV["FASTLANE_SESSION"] = File.read("session.txt")</span></div><div class="line">     <span class="comment"># 创建临时钥匙串</span></div><div class="line">     create_keychain(</div><div class="line">     <span class="symbol">name:</span> keychain_name,</div><div class="line">     <span class="symbol">password:</span> keychain_password,</div><div class="line">     <span class="symbol">default_keychain:</span> <span class="literal">true</span>,</div><div class="line">     <span class="symbol">unlock:</span> <span class="literal">true</span>,</div><div class="line">     <span class="symbol">timeout:</span> <span class="number">3600</span>,</div><div class="line">     <span class="symbol">add_to_search_list:</span> <span class="literal">true</span></div><div class="line">     )</div><div class="line">     <span class="comment"># 导入私钥</span></div><div class="line">     import_certificate(</div><div class="line">     <span class="symbol">certificate_path:</span> <span class="string">"./fastlane/certs/dist.p12"</span>,</div><div class="line">     <span class="symbol">certificate_password:</span> ENV[<span class="string">"Cert_PassWord"</span>],</div><div class="line">     <span class="symbol">keychain_name:</span> keychain_name,</div><div class="line">     <span class="symbol">keychain_password:</span> keychain_password</div><div class="line">     )</div><div class="line">     import_certificate(</div><div class="line">     <span class="symbol">certificate_path:</span> <span class="string">"./fastlane/certs/dev.p12"</span>,</div><div class="line">     <span class="symbol">certificate_password:</span> ENV[<span class="string">"Cert_PassWord"</span>],</div><div class="line">     <span class="symbol">keychain_name:</span> keychain_name,</div><div class="line">     <span class="symbol">keychain_password:</span> keychain_password</div><div class="line">     )</div><div class="line">     <span class="comment"># 拉取证书</span></div><div class="line">     system <span class="string">"sh ./load_provision.sh"</span></div><div class="line">     <span class="comment"># sigh(app_identifier: "bundle.id",</span></div><div class="line">     <span class="comment">#   username: "user<span class="doctag">@exampe</span>.com")</span></div><div class="line">     <span class="keyword">if</span> branch.start_with? <span class="string">"master"</span></div><div class="line">        beta</div><div class="line">     <span class="keyword">elsif</span> branch.start_with? <span class="string">"release"</span></div><div class="line">        release</div><div class="line">     <span class="keyword">end</span></div><div class="line">  <span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<h2 id="2-1-Travis-ci配置"><a href="#2-1-Travis-ci配置" class="headerlink" title="2.1 Travis-ci配置"></a>2.1 Travis-ci配置</h2><blockquote>
<p>这部分我以新开一个开发者账号的方式讲，我强烈推荐这种方式。<br>你可以在后文中找到，如果不开新账号，用原来带有两步认证的开发者账号怎么实现。</p>
</blockquote>
<p>这里我们一共需要配置四个环境变量</p>
<ul>
<li>GH_Token //Github的token</li>
<li>Cert_PassWord //证书密码</li>
<li>FASTLANE_USER // Apple 账号</li>
<li>FASTLANE_PASSWORD // Apple 账号密码<br><img src="https://img.wxz.name/15584100323855.jpg" alt=""><h3 id="GH-Token"><a href="#GH-Token" class="headerlink" title="GH_Token"></a>GH_Token</h3>这一步是为了解决push权限的问题<br><img src="https://img.wxz.name/15584101532733.jpg" alt=""><br><img src="https://img.wxz.name/15584101656036.jpg" alt=""><br>然后将创建的token复制过来作为GH_Token的值即可<blockquote>
<p>记得前面Fastfile里面的仓库地址也要改</p>
</blockquote>
<h3 id="FASTLANE-USER和FASTLANE-PASSWORD"><a href="#FASTLANE-USER和FASTLANE-PASSWORD" class="headerlink" title="FASTLANE_USER和FASTLANE_PASSWORD"></a>FASTLANE_USER和FASTLANE_PASSWORD</h3><a href="https://appstoreconnect.apple.com/" target="_blank" rel="external">https://appstoreconnect.apple.com/</a><br>这个很好理解，你的apple账号和密码。我踩了无数坑了，强烈建议重新创一个没有两步认证的apple小号。<br>然后在大号中邀请进来.<br>个人开发者账号虽然邀请进来的人不能拉取证书，但是一样有权限发布上传App<br><img src="https://img.wxz.name/15584105581907.jpg" alt=""><br>接着在ci中把FASTLANE_USER和FASTLANE_PASSWORD这两项配置好</li>
</ul>
<h3 id="Cert-PassWord"><a href="#Cert-PassWord" class="headerlink" title="Cert_PassWord"></a>Cert_PassWord</h3><p>我们在keychain中，导出时设置的p12文件的密码，就是这一项<br><img src="https://img.wxz.name/15584106259902.jpg" alt=""></p>
<h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><h2 id="1-为什么不直接用带有两步认证的账号"><a href="#1-为什么不直接用带有两步认证的账号" class="headerlink" title="1.为什么不直接用带有两步认证的账号"></a>1.为什么不直接用带有两步认证的账号</h2><p>如果用带两步认证的账号，需要配置apple专用密码，并且还要加上session。<br>而session特别容易过期，网上说是30天，笔者测试下来一天就要重新设置一次，十分痛苦<br>如果一定要用的话，可以在刚刚的流程结束完，在ci中设置一个新的环境变量<br>FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD<br>可以在这里面设置<a href="https://appleid.apple.com/account/manage" target="_blank" rel="external">https://appleid.apple.com/account/manage</a><br><img src="https://img.wxz.name/15584109865524.jpg" alt=""><br>同时因为登录会话的问题，如果想在ci上直接绕过两步认证，还需要配置好session<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">fastlane spaceauth -u user@example.com #你的apple账号</div></pre></td></tr></table></figure></p>
<p>然后复制session，我这里是在fastlane文件夹下创建了一个session.txt<br>将内容复制到里面去。<br>在脚本中再通过代码设置出来<br><figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line">ENV[<span class="string">"FASTLANE_SESSION"</span>] = File.read(<span class="string">"session.txt"</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Swinject源码解析]]></title>
      <url>/2019/04/06/Swinject-source/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>笔者最近在开发中常常使用到Swinject这个框架。</p>
<h2 id="什么是Dependency-Injection"><a href="#什么是Dependency-Injection" class="headerlink" title="什么是Dependency Injection"></a>什么是Dependency Injection</h2><blockquote>
<p>在软件工程中，依赖注入是种实现控制反转用于解决依赖性设计模式。一个依赖关系指的是可被利用的一种对象 。依赖注入是将所依赖的传递给将使用的从属对象。</p>
</blockquote>
<p>以上是根据维基百科的解释，但是其实这么读有点抽象<br>笔者查阅了网上资料，发现知乎有个回答非常通俗</p>
<blockquote>
<p>a依赖b，但a不控制b的创建和销毁，仅使用b，那么b的控制权交给a之外处理，这叫控制反转（IOC），而a要依赖b，必然要使用b的instance，那么可以通过<br>通过a的接口，把b传入；<br>通过a的构造，把b传入；<br>通过设置a的属性，把b传入；<br>这个过程叫依赖注入（DI）。</p>
</blockquote>
<p><img src="https://img.wxz.name/15548228390076.jpg" alt=""></p>
<h3 id="我们看一个实际的例子"><a href="#我们看一个实际的例子" class="headerlink" title="我们看一个实际的例子"></a>我们看一个实际的例子</h3><p><img src="https://img.wxz.name/15548228800304.jpg" alt=""><br>从你的角度来看，你觉得左侧和右侧那一个方式更好</p>
<h3 id="一个更加实际的例子"><a href="#一个更加实际的例子" class="headerlink" title="一个更加实际的例子"></a>一个更加实际的例子</h3><p><img src="https://img.wxz.name/15548229681951.jpg" alt=""></p>
<blockquote>
<p>图片来自知乎<br>可以看到相较于左侧，右侧依赖注入的方式可以明显解决传参一层层传递的问题。</p>
</blockquote>
<p>那难道依赖注入就没有缺点么？<br>笔者觉得是有的，可以看到右侧，我们要构造一个车，需要传入一系列的依赖进入。如果模块变大的话，这注定是十分臃肿的。</p>
<h2 id="什么是Dependency-Injection-Container"><a href="#什么是Dependency-Injection-Container" class="headerlink" title="什么是Dependency Injection Container"></a>什么是Dependency Injection Container</h2><blockquote>
<p>The ability to automatically compose an object graph from maps between Abstractions and concrete types by making use of the types’ metadata supplied by the compiler and the Common Language Runtime.<br>                                      —  Dependency Injection in .NET, second edition<br>笔者在stackoverflow上查阅，有一个人引用了这本书的这样一句话。我觉得简单来说是可以通过传入一个抽象类型，可以构造出一个实例。我们简单的看一个使用代码<br><img src="https://img.wxz.name/15548244006652.jpg" alt=""><br>这里我们通过register方法，对一个类型进行注册。然后通过resolver方法，去调用构造方法得到这个实例。<br>我们这边先跳过Swinject这个框架，我们自己通过100行代码来手动实现一个container</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class Container &#123;</div><div class="line">    var services = [ServiceKey: Any]()</div><div class="line"></div><div class="line">    func _resolve&lt;Service, Arguments&gt;(</div><div class="line">        invoker: @escaping ((Arguments) -&gt; Service) -&gt; Any</div><div class="line">        ) -&gt; Service? &#123;</div><div class="line">        var resolvedInstance: Service?</div><div class="line">        let key = ServiceKey(serviceType: Service.self)</div><div class="line"></div><div class="line">        if let entry = services[key]  &#123;</div><div class="line">            resolvedInstance = resolve(entry: entry, invoker: invoker)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return resolvedInstance</div><div class="line">    &#125;</div><div class="line">    func resolve&lt;Service, Factory&gt;(</div><div class="line">        entry: Any,</div><div class="line">        invoker: (Factory) -&gt; Any</div><div class="line">        ) -&gt; Service? &#123;</div><div class="line">        let resolvedInstance = invoker(entry as! Factory)</div><div class="line">        return resolvedInstance as? Service</div><div class="line">    &#125;</div><div class="line">    func _register&lt;Service, Arguments&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        factory: @escaping (Arguments) -&gt; Service)</div><div class="line">    &#123;</div><div class="line">        let key = ServiceKey(serviceType: serviceType)</div><div class="line">        services[key] = factory</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public protocol Register &#123;</div><div class="line">    func register&lt;Service&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        factory: @escaping (Resolver) -&gt; Service)</div><div class="line"></div><div class="line">    func register&lt;Service, Arg1&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        factory: @escaping (Resolver, Arg1) -&gt; Service)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">extension Container: Register &#123;</div><div class="line">    public func register&lt;Service&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        factory: @escaping (Resolver) -&gt; Service) &#123;</div><div class="line">        _register(serviceType, factory: factory)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public func register&lt;Service, Arg1&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        factory: @escaping (Resolver, Arg1) -&gt; Service)</div><div class="line">    &#123;</div><div class="line">        _register(serviceType, factory: factory)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">public protocol Resolver &#123;</div><div class="line">    func resolve&lt;Service&gt;(_ serviceType: Service.Type) -&gt; Service?</div><div class="line"></div><div class="line">    func resolve&lt;Service, Arg1&gt;(</div><div class="line">        _ serviceType: Service.Type,</div><div class="line">        argument: Arg1) -&gt; Service?</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">extension Container: Resolver &#123;</div><div class="line">    public func resolve&lt;Service&gt;(_ serviceType: Service.Type) -&gt; Service? &#123;</div><div class="line">        return _resolve() &#123; (factory: (Resolver) -&gt; Any) in factory(self) &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public func resolve&lt;Service, Arg1&gt;(_ serviceType: Service.Type, argument: Arg1) -&gt; Service? &#123;</div><div class="line">        typealias FactoryType = ((Resolver, Arg1)) -&gt; Service</div><div class="line">        return _resolve()&#123; (factory: FactoryType) -&gt; Any in return factory((self, argument)) &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">internal struct ServiceKey: Hashable &#123;</div><div class="line">    internal let serviceType: Any.Type</div><div class="line"></div><div class="line">    static func == (lhs: ServiceKey, rhs: ServiceKey) -&gt; Bool &#123;</div><div class="line">        return lhs.serviceType == rhs.serviceType</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var hashValue: Int &#123;</div><div class="line">        return ObjectIdentifier(serviceType).hashValue</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到以上，这样一个最基础的Container就已经实现了，总的来说，是通过一个字典形式，key是协议的hash值，value是这个构造方法。每次通过协议注册一个构造方法，然后通过一个协议拿到这个构造方法。</p>
<h3 id="除此之外Swinject做了什么"><a href="#除此之外Swinject做了什么" class="headerlink" title="除此之外Swinject做了什么"></a>除此之外Swinject做了什么</h3><h4 id="Thread-Safety-线程安全"><a href="#Thread-Safety-线程安全" class="headerlink" title="Thread Safety 线程安全"></a>Thread Safety 线程安全</h4><p><img src="https://img.wxz.name/15548247213045.jpg" alt=""></p>
<h4 id="Container-Hierarchy-容器层次结构"><a href="#Container-Hierarchy-容器层次结构" class="headerlink" title="Container Hierarchy 容器层次结构"></a>Container Hierarchy 容器层次结构</h4><p><img src="https://img.wxz.name/15548247371699.jpg" alt=""></p>
<p><img src="https://img.wxz.name/15548247431252.jpg" alt=""></p>
<h4 id="Object-Scopes-对象范围"><a href="#Object-Scopes-对象范围" class="headerlink" title="Object Scopes 对象范围"></a>Object Scopes 对象范围</h4><p><img src="https://img.wxz.name/15548247972051.jpg" alt=""><br><img src="https://img.wxz.name/屏幕快照 2019-04-09 下午11.46.50.png" alt="屏幕快照 2019-04-09 下午11.46.50"></p>
<h4 id="Circular-Dependency-Injection-循环依赖注入"><a href="#Circular-Dependency-Injection-循环依赖注入" class="headerlink" title="Circular Dependency Injection 循环依赖注入"></a>Circular Dependency Injection 循环依赖注入</h4><p><img src="https://img.wxz.name/屏幕快照 2019-04-09 下午11.47.24.png" alt="屏幕快照 2019-04-09 下午11.47.24"></p>
<p>那以上是笔者对此的一丁点理解</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[一个句号的落笔是另一句话的开始 - 2018年小结]]></title>
      <url>/2018/12/29/summary-2018/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在过去，我有很多时刻有想过我的2018年会是怎么样的。<br>之所以这么多次的想，是因为我知道这一年是我参加校招，选定未来人生方向的一年。<br>可实际上，在年末的结尾，我发现这一年并不是我想的那么重要。</p>
<h1 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h1><h2 id="量变与质变"><a href="#量变与质变" class="headerlink" title="量变与质变"></a>量变与质变</h2><p>2018年一整年都在头条实习，从最开始担心不能胜任，到如今想要做得更好，做到极致，我认为还是有”量“的区别，但我认为还没有达到”质“的变化。写代码依旧在写代码，架构意识，代码质量意识，都有加强，但是还有欠缺，一者是思维方式。从最开始”做一个功能“，到要先思考<br>”这个功能是不是有做的必要“<br>”简单的功能能否做到极致“<br>”复杂的功能能否做到简单“<br>”重复性的功能能否自动化“<br>”工作时有没有注意到其他同事，能否沟通合作“<br>这开始一项又一项的思考，是我的直接leader（腾讯T4总监）教给我的。<br>而我开始也以一个正式员工开始要求自己。我觉得凡事如果决定要做了就一定要做好。</p>
<h2 id="生活和同事"><a href="#生活和同事" class="headerlink" title="生活和同事"></a>生活和同事</h2><p>我记得18年1月8日实习入职时，头条在深圳的研发只有60多人。现在是18年12月31日，已经有四五百人了。<br>这真的是我见过发展最疯狂迅速的公司，在公司的报告上确实也说，没有一家互联网公司有我们的发展速度，如今估值已经高过了百度的市值。<br>而且重要的是，因为都是新鲜血液，加上头条的招聘标准特别困难（参照校招的难度吧，社招更变态），所以同事都真的很靠谱，人也挺好的。<br>工作环境方面，窗外就是海景，对面是香港。<br><img src="https://img.wxz.name/IMG_3669.JPG" alt="IMG_3669"><br>伙食方面，每天三餐自助+下午茶，进口咖啡机，无限零食<br><img src="https://img.wxz.name/IMG_0026.JPG" alt="IMG_0026"><br><img src="https://img.wxz.name/IMG_9031.JPG" alt="IMG_9031"><br>因为项目快要发布了，所以可能偶尔加加班晚点回去，好在租的房子就离公司走路5分钟，也还好<br><img src="https://img.wxz.name/IMG_1317.JPG" alt="IMG_1317"><br>总之感觉生活方面，一切都好啦</p>
<h2 id="英语与健身"><a href="#英语与健身" class="headerlink" title="英语与健身"></a>英语与健身</h2><p>觉得这个真的是18年做的最不好的两件事，可能因为不是热爱的东西，就真的很难坚持<br>但是我觉得这两项，真的是只有坚持了才有效果。<br>19年一定一定要坚持下去！</p>
<h1 id="校招"><a href="#校招" class="headerlink" title="校招"></a>校招</h1><p>在17年小结时，可以说我预想的人生轨迹是<br>1月份在头条实习，4月份进入BAT实习，10月份选择更好的部门<br>然而我一直在头条实习到了现在</p>
<h2 id="选择的重要"><a href="#选择的重要" class="headerlink" title="选择的重要"></a>选择的重要</h2><p>回顾一年，我觉得在过去一直以来，我做人生规划的时候，忽视掉了一个很重要的问题。<br>信息的不对称性。在过去做计划的时候，我一直停留在一个思维程度上，几个选择是可以比较的，就是一者绝对比另一者好。<br>例如在高考中，Top2&gt;985&gt;211&gt;一本&gt;二本。750分的高考分数，每一所大学都有它自己的分数线，武书连等各个排名榜，都写着各个高校的排名。<br>而我，要思考的其实只有简简单单的一件事 - 努力提升自己<br>18年末尾之前，我一直以为这个定律也可以依照下去。<br>按照名声市值，腾讯阿里&gt;百度&gt;头条滴滴美团，那么选工作，也按照这个来选，那就轻而易举了。<br>所以我只需要考虑怎么通过面试即可，通过面试才是最难的。<br>而真正最后我发现，<strong>面试并不难，选择才困难。</strong></p>
<h2 id="选择的多样性"><a href="#选择的多样性" class="headerlink" title="选择的多样性"></a>选择的多样性</h2><p>在拿下百度腾讯阿里头条的offer后<br><img src="https://img.wxz.name/15462688193599.jpg" alt=""><br>我要面临的只是一个选择，可当我真正选择时，我才发现这个按钮，出乎意料的难以按下。<br>选择根本不是一件只靠公司好坏这一件事可以判断的<br>薪资，工作城市，工作环境，leader为人，部门氛围，晋升机会，研究方向，业务方向，加班强度<br>就像解一个n元n次方程，未知量远多于已知量，根本就难以得到一个最优解。<br>同时拿到几家offer后，做选择的那几周，其实是过的并不好的，经常会睡不好，实习也难以集中精力。<br>几番思考后，我决定改变求解的方程式，换算成求<strong>当下最优解</strong></p>
<h2 id="选择的当下最优解"><a href="#选择的当下最优解" class="headerlink" title="选择的当下最优解"></a>选择的当下最优解</h2><p>作为一个研发工程师，我认为技术水平是第一重要的，只要满足自身的水平大于当前同一阶段的其他竞争者，那么哪怕社招时，我再重新面试，也一样可以通过。出于这一点考虑，那么不管去哪，只要认真努力，其实应该都不会差，但是考虑去其他部门，可能新入职会拧螺丝钉打杂，头条这边我觉得发挥的空间更大。此外部门同事也比较熟，薪资也高于BAT一大截。再结合这边hr，leader，导师等各种劝留，还是留在了这边。</p>
<h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>选择大于努力，这是我今年在校招方面最大的感触吧，我新的一年能多去看看书，和人交流，尽可能的走好每一个人生方向。</p>
<h1 id="项目方面"><a href="#项目方面" class="headerlink" title="项目方面"></a>项目方面</h1><p>最近在写一个新的app-EASY相册，基本马上就要开始上架了，还是挺开心的，毕竟是一个自己独立开发的app，而且产品也是自己设计的，这种创造的感觉，真的是太棒了！基本快写完了，你们应该过几天都可以看到了。<br><img src="https://img.wxz.name/easy_banner.png" alt="easy_banner"><br>做完这个应用后，应该会尝试用flutter写一个短链接整理的app，会包括Android端和iOS端，大概春节过后吧<br><img src="https://img.wxz.name/15462690176646.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相比17年的总结，我觉得这篇18年的总结更像反思。我没有去写秋招怎么通过二十几轮面试，也没写CCCC移动赛怎么拿到一等奖，是因为我觉得随着18年的结束，这一切大学时期的东西，都像划上的句号一样与19年无关了，所以我想借着写总结来理一理自己的19年的思路。期望能工作的更极致，专注技术提升，坚持锻炼与英语。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS UndoManager]]></title>
      <url>/2018/05/02/iOS-UndoManager/</url>
      <content type="html"><![CDATA[<p>这几天在实现iOS撤销操作的坑，发现网上相关学习资料的是在是太少了，这里做一个文档的记录。</p>
<h1 id="UndoManager的介绍"><a href="#UndoManager的介绍" class="headerlink" title="UndoManager的介绍"></a>UndoManager的介绍</h1><blockquote>
<p>Overview<br>You register an undo operation by calling one of the methods described in Registering Undo Operations. You specify the name of the object that’s changing (or the owner of that object) and provide a closure, method, or invocation to revert its state.<br>After you register an undo operation, you can call undo() on the undo manager to revert to the state of the last undo operation. When undoing an action, UndoManager saves the operations you reverted to so that you can call redo() automatically.</p>
</blockquote>
<p>从开发文档中看，它的目的简单的说就是，在你调用方法的时候，你可以注册一个undo操作。并且在你注册undo操作后，你可以执行undo()方法来撤销，同时在你撤销时，保存你的撤销操作，你可以调用redo() 来复原</p>
<h1 id="实际开发中需要用到的几个重要方法"><a href="#实际开发中需要用到的几个重要方法" class="headerlink" title="实际开发中需要用到的几个重要方法"></a>实际开发中需要用到的几个重要方法</h1><h2 id="canUndo-与canRedo"><a href="#canUndo-与canRedo" class="headerlink" title="canUndo()与canRedo()"></a>canUndo()与canRedo()</h2><p>通过这两个方法，我们可以知道当前是否可以调用Undo()和Redo()，在实际开发中，我们常常需要做一个undo和redo的按钮，那么通过这个方法，我们可以知道是否开启这个按钮<br><img src="https://img.wxz.name/15252676183619.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">undoManager?.canUndo == true &#123;</div><div class="line">    // 开启撤销按钮</div><div class="line">&#125; else &#123;</div><div class="line">    // 关闭撤销按钮</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Undo-与redo"><a href="#Undo-与redo" class="headerlink" title="Undo()与redo()"></a>Undo()与redo()</h2><p>调用这两个方法，可以执行相应的操作<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">undoManager?.undo()</div><div class="line">undoManager?.redo()</div></pre></td></tr></table></figure></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>这是最关键的地方，这里以UITextView为例<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">func add(style: style, range: range) &#123;</div><div class="line">    let textView = UITextView()</div><div class="line">    textView.undoManager.registerUndo(withTarget: self) &#123; this in</div><div class="line">                this.add(style: style, range: range)</div><div class="line">    &#125;</div><div class="line">    // add方法的实现</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里以一个为文本添加样式的add方法为例子，我们每次在调用add方法时，都会先在undoManager中注册一个撤销的方法，要注意一定要先注册再执行方法，深坑</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://swift.gg/2015/11/10/ios-undo-and-redo-with-nsundomanager/" target="_blank" rel="external">使用 NSUndoManager 来进行撤销和重做</a><br><a href="http://nshipster.cn/nsundomanager/" target="_blank" rel="external">NSUndo​Manager</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[创建自己的CocoaPods库]]></title>
      <url>/2018/04/30/create-private-pod-private/</url>
      <content type="html"><![CDATA[<p>一直想自己折腾一个第三方库，但是苦于之前一直没写啥好的控件<br>最近工作上写了几个ui控件，终于满足了下开源的心愿，这里记录下步骤<br><a id="more"></a></p>
<h1 id="本地建一个库"><a href="#本地建一个库" class="headerlink" title="本地建一个库"></a>本地建一个库</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod spec create xxxx</div></pre></td></tr></table></figure>
<p><img src="https://img.wxz.name/15250836204894.jpg" alt=""></p>
<p>xxxx为库的名字，然后会有一系列的选项，根据自己的需求进行选择</p>
<h2 id="打开新建的模板库，将自己的代码放进去"><a href="#打开新建的模板库，将自己的代码放进去" class="headerlink" title="打开新建的模板库，将自己的代码放进去"></a>打开新建的模板库，将自己的代码放进去</h2><p><img src="https://img.wxz.name/15250835729749.jpg" alt=""></p>
<h2 id="对库进行基本的设置"><a href="#对库进行基本的设置" class="headerlink" title="对库进行基本的设置"></a>对库进行基本的设置</h2><p>打开xxxxx.podspec<br>像s.homepage,s.source等配置项改成自己准备传的仓库地址</p>
<h1 id="将库传到远程库上"><a href="#将库传到远程库上" class="headerlink" title="将库传到远程库上"></a>将库传到远程库上</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;xxx&quot;</div><div class="line">git remote add origin xxxxx</div><div class="line">git push master origin -u</div><div class="line">git tag 1.0.0  // 这里改成库的版本</div><div class="line">git push origin 1.0.0</div></pre></td></tr></table></figure>
<p>这样库的代码就传到远程上了，如果是不希望给人看到的，就放在私有库上，反之就公开</p>
<h1 id="提交到官方索引库"><a href="#提交到官方索引库" class="headerlink" title="提交到官方索引库"></a>提交到官方索引库</h1><h2 id="注册一个账号，比较坑的是如果换电脑需要再注册一次"><a href="#注册一个账号，比较坑的是如果换电脑需要再注册一次" class="headerlink" title="注册一个账号，比较坑的是如果换电脑需要再注册一次"></a>注册一个账号，比较坑的是如果换电脑需要再注册一次</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod trunk register 邮箱 &apos;名字&apos; --description=&apos;描述&apos; --verbose</div></pre></td></tr></table></figure>
<p>然后打开邮箱，去收注册邮件</p>
<h2 id="将自己的库的文件push上去"><a href="#将自己的库的文件push上去" class="headerlink" title="将自己的库的文件push上去"></a>将自己的库的文件push上去</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod trunk push</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod search xxxxx  //xxx是库的名字</div></pre></td></tr></table></figure>
<h1 id="创建一个自己的私有库"><a href="#创建一个自己的私有库" class="headerlink" title="创建一个自己的私有库"></a>创建一个自己的私有库</h1><p>我们有时不希望这个库被所有人可以用，比如公司等场景，那么我们需要创建一个自己的私有库</p>
<h2 id="新建一个私有库"><a href="#新建一个私有库" class="headerlink" title="新建一个私有库"></a>新建一个私有库</h2><p>首先创建一个这样的仓库，这个私有库应该是公网上的私有仓库，或者公司内网上的仓库，接着将地址加进来<br><img src="https://img.wxz.name/15250848614083.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod repo add MyRepo xxxxxxxx.git</div></pre></td></tr></table></figure></p>
<h2 id="推送库到私有库中"><a href="#推送库到私有库中" class="headerlink" title="推送库到私有库中"></a>推送库到私有库中</h2><p>然后我们将之前的库推送到这个私有库中<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod repo push MyRepo XXXXXX.podspec --allow-warnings</div></pre></td></tr></table></figure></p>
<h2 id="使用私有库"><a href="#使用私有库" class="headerlink" title="使用私有库"></a>使用私有库</h2><p>我们在podfile文件中，新加上<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source &apos;xxxxxxx&apos;</div></pre></td></tr></table></figure></p>
<p>xxxx为我们私有库的地址，这样就完成了</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.jianshu.com/p/0c640821b36f" target="_blank" rel="external">私有库的创建</a><br><a href="http://qiubaiying.top/2017/03/08/CocoaPods公有仓库的创建/" target="_blank" rel="external">公有库的创建</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[通过IpaPatch分析Wechat界面]]></title>
      <url>/2018/01/14/IpaPatch-Wechat/</url>
      <content type="html"><![CDATA[<p>因为某个侧滑功能希望能参照微信来做，但是手上又木有越狱机，所以这里主要通过IpaPatch+Reveal来进行分析。</p>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p><a href="https://revealapp.com" target="_blank" rel="external">Reveal</a><br><a href="https://github.com/Naituw/IPAPatch" target="_blank" rel="external">IpaPatch</a><br><a href="https://www.25pp.com" target="_blank" rel="external">PP助手</a></p>
<h2 id="准备一个微信APP"><a href="#准备一个微信APP" class="headerlink" title="准备一个微信APP"></a>准备一个微信APP</h2><p>首先需要强调的是，AppStore上下载的iPA是加密过的，所以这里我们通过<a href="https://www.25pp.com" target="_blank" rel="external">PP助手</a>来下载已经砸壳过后的IPA文件。<br><img src="https://img.wxz.name/15159380872900.jpg" alt=""></p>
<h2 id="克隆好IpaPatch工程"><a href="#克隆好IpaPatch工程" class="headerlink" title="克隆好IpaPatch工程"></a>克隆好IpaPatch工程</h2><p>IpaPatch是一个 免越狱调试、修改第三方App 的工具，主要过程分为这几部</p>
<ol>
<li>解压 IPA 文件</li>
<li>用 IPA 文件的内容，替换掉 Xcode 生成的 .app 的内容</li>
<li>通过 OPTOOL，将你代码生成的 Framework 及其他外部 Framework，注入到二进制文件中</li>
<li>对这些文件进行重新签名 </li>
</ol>
<h2 id="配置IpaPatch工程"><a href="#配置IpaPatch工程" class="headerlink" title="配置IpaPatch工程"></a>配置IpaPatch工程</h2><p>1.在我们克隆完毕后，我们将我们在pp助手上下载好的微信.ipa重命名为app.ipa然后复制到工程的IPAPatch/Assets/中替换掉原来的app.ipa<br><img src="https://img.wxz.name/15159382651784.jpg" alt=""></p>
<p>2.接着我们需要将Reveal中的framework文件复制到Assets/Frameworks/RevealServer.framework中<br><img src="https://img.wxz.name/15159384937355.jpg" alt=""></p>
<p>3.修改Display Name和Bundle Identifier。Display Name将加在原app名称之前，可与之前的app共存。<br><img src="https://img.wxz.name/15159385259266.jpg" alt=""></p>
<h2 id="调试界面"><a href="#调试界面" class="headerlink" title="调试界面"></a>调试界面</h2><ol>
<li>点击 Build 后就可以在我们真机上看到啦，然后打开Reveal，就可以看到微信的界面了<br> <img src="https://img.wxz.name/15159387058492.jpg" alt=""></li>
</ol>
<h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><h3 id="从层级开始分析"><a href="#从层级开始分析" class="headerlink" title="从层级开始分析"></a>从层级开始分析</h3><p>整体是一个tableview的界面，每个cell中，消息部分作为一个view与滑动部分的view所并列<br><img src="https://img.wxz.name/Lark20180114221705.png" alt="Lark20180114221705"><br>在一整个滑动view中，又是分为两个button，其中尺寸如第二条所分析<br><img src="https://img.wxz.name/15159396834913.jpg" alt=""></p>
<h3 id="从尺寸分析"><a href="#从尺寸分析" class="headerlink" title="从尺寸分析"></a>从尺寸分析</h3><p>首先我的手机是iphone7 Plus,屏幕尺寸为 414 <em> 736，在微信设置的滑动view的大小为 175 </em> 68，其中</p>
<ul>
<li>滑动view的大小为 175 * 68</li>
<li>“标为未读”按钮的宽度为116.6</li>
<li>“删除”按钮的宽度为75.9</li>
<li>其中两个按钮中有重叠部分，应该是为了动画效果而保留的。</li>
</ul>
<p><img src="https://img.wxz.name/15159392238970.jpg" alt=""></p>
<h3 id="从动画分析"><a href="#从动画分析" class="headerlink" title="从动画分析"></a>从动画分析</h3><h4 id="1-刚开始滑动—-gt-滑动完成"><a href="#1-刚开始滑动—-gt-滑动完成" class="headerlink" title="1. 刚开始滑动—&gt;滑动完成"></a>1. 刚开始滑动—&gt;滑动完成</h4><p>   开始滑动的那一刻立即创建两个button，同时两者随手势向左侧滑动。但是第二个“删除”按钮<strong>滑动速度较慢</strong>。<br>   左侧聊天信息的view紧临“标为未读”的button。同时父视图cell位置不变<br> <img src="https://img.wxz.name/15159398498752.jpg" alt=""></p>
<h4 id="2-滑动完成，到达稳定的状态"><a href="#2-滑动完成，到达稳定的状态" class="headerlink" title="2. 滑动完成，到达稳定的状态"></a>2. 滑动完成，到达稳定的状态</h4><p>cell的位置没变<br>但cell子视图的聊天view左移了，并且紧邻滑动view为同一层级<br>滑动view中又分为两个button，并且<strong>位置有一定的重叠</strong><br><img src="https://img.wxz.name/15159402686411.jpg" alt=""></p>
<h4 id="3-返回过程"><a href="#3-返回过程" class="headerlink" title="3. 返回过程"></a>3. 返回过程</h4><p>   为之前动画的逆过程，不再赘述</p>
<h4 id="4-长拖效果"><a href="#4-长拖效果" class="headerlink" title="4. 长拖效果"></a>4. 长拖效果</h4><p>  拖动按钮时，按钮会随着一起拖动。<br>  分析层级，发现滑动view的位置并没有感觉。<br>  实际上<strong>改变的是两个button的长度</strong>，他们超过了父view，显示出了这样一个效果。<br><img src="https://img.wxz.name/15159405300287.jpg" alt=""></p>
<h4 id="5-删除效果"><a href="#5-删除效果" class="headerlink" title="5. 删除效果"></a>5. 删除效果</h4><p>  <strong>之前的“标为未读”按钮被删除了</strong>，全部只剩下了“删除”按钮。动画过程，因为真机显示太快我还木有抓到。<br><img src="https://img.wxz.name/2.png" alt="2"></p>
<h4 id="6-删除返回"><a href="#6-删除返回" class="headerlink" title="6. 删除返回"></a>6. 删除返回</h4><p>  随着手势的返回，将<strong>“删除”按钮位置右移</strong>，聊天view紧邻删除button，但主要的是<strong>删除button的父view位置是不动的</strong><br><img src="https://img.wxz.name/15159410586968.jpg" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>关于微信滑动的实现，几个关键的点</p>
<ol>
<li>首先层级是cell最上，包含聊天view和滑动view。其中滑动view在没有开始滑动时是不创建的，滑动开始立刻创建，收回后立即销毁。</li>
<li>滑动动画上，像抽屉的效果是<strong>通过移速不同</strong>，“标为未读”在“删除”下面，这样拖动和拖回产生了一个折叠的效果</li>
<li>自始至终，<strong>cell的位置是不变得</strong>，这也就保证了，无论的滑动view还是聊天view都不会因为父视图超过自身位置，因为响应链的原因而不响应。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[做什么都是因为喜欢 - 2017小结]]></title>
      <url>/2017/12/30/summary-2017/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  大学里用的最长的两个个性签名，一个是“做什么都是因为喜欢”，另一个则是“没伞的人拼命跑”。于我而言，2017应该算是人生中最重要的一年了吧。<br>  <a id="more"></a><br>  因为大二决定放弃了Android的学习，转而从零开始iOS的学习。可以说是压力对自己挺大的，一来当时自己已经能独立开发Android的app了，二来身边也有很多人在学习Android，三来整个学校也没有老师或者学生在学习iOS。<br>  但因为自己是果粉，并不喜欢Android，在“喜欢”和“擅长”之间，我还是选择了前者。也就是我所写的个签“做什么都是因为喜欢”。但也决定了在2017年我需要独自一个人进行iOS的自学，并且没有前人指导。知识的学习，难题的独自解决是一方面，但是更重要的还是很多时候对未来的迷茫，学习路线的摸索。<br>  所以一直挂着“没伞的人拼命跑”来勉励和提醒自己，好在一切都有所得。</p>
<h1 id="整体总结"><a href="#整体总结" class="headerlink" title="整体总结"></a>整体总结</h1><ul>
<li>一张国家级奖状</li>
<li>两张名企的实习offer</li>
<li>若干个省级校级证书</li>
<li>有了喜欢的人</li>
</ul>
<h1 id="项目方面"><a href="#项目方面" class="headerlink" title="项目方面"></a>项目方面</h1><p>一直维护着工大助手iOS端，算起来一路抹黑学过来，结果总不算太差，AppStore综合评分 4.8 星，明年会考虑用swift重构一遍，然后考下交给下一个人去开发。<br><img src="https://img.wxz.name/15146871510539.jpg" alt=""></p>
<h1 id="Github贡献量"><a href="#Github贡献量" class="headerlink" title="Github贡献量"></a>Github贡献量</h1><p>各个零散的项目各自贡献了一点，完整的项目不算太多。打算自己另外独立开发个app，初步设想swift+Node.js，但也会考虑下RN+Node.js<br><img src="https://img.wxz.name/15146872924263.jpg" alt=""></p>
<h1 id="中国高校计算机大赛-移动应用创新赛"><a href="#中国高校计算机大赛-移动应用创新赛" class="headerlink" title="中国高校计算机大赛 - 移动应用创新赛"></a>中国高校计算机大赛 - 移动应用创新赛</h1><p> 国内的省部局等部门举办的项目类比赛大多都是坑，个人感觉有价值的比赛大多都是企业举办的，国外Google举办的Android相关的开发大赛，微软举办的微软杯，Apple举办的iOS开发相关。国内阿里天池等一系列的比赛。<br><img src="https://img.wxz.name/psb-4.jpeg" alt="psb-4"></p>
<p> 将工大助手修改了下，利用模拟教务系统登录的方法，实现对其他高校的课程数据，成绩数据等抓取，来成为一个新的作品。比较巧妙的地方在于设想，将管理权交于各个高校来进行管理。<br> 也是这样的设想加上产品赢得了包括Apple全球副总裁在内的一系列评委的认可，得到了全国二等奖，相当于453支队里获得了第五名，也拿到了2W的奖金，给自己买了Macbook Pro 2017 15寸、HHKb BT、Master MX 2s等一系列的装备吧。<br><img src="https://img.wxz.name/psb-2.jpeg" alt="psb-2"></p>
<p> 顺便提一下，Apple比赛是真的优秀，四天都免费住的四星级酒店，早餐午餐晚餐全是自助餐，全程专车接送，评委老师非常专业。<br><img src="https://img.wxz.name/IMG_4322.JPG" alt="IMG_4322"><br><img src="https://img.wxz.name/15146895333371.jpg" alt=""></p>
<h1 id="Apple夏令营"><a href="#Apple夏令营" class="headerlink" title="Apple夏令营"></a>Apple夏令营</h1><p> 前50名进入了决赛的队伍，都得到了Apple的邀请去广东参加了Apple夏令营，同样好评，食宿全免，认识了很多一起学习iOS开发的朋友。<br><img src="https://img.wxz.name/psb-5.jpeg" alt="psb-5"></p>
<p> 当然教学的内容也特别有意思，从时尚，设计，到开发。很多有意思的内容<br> <img src="https://img.wxz.name/15146897703390.jpg" alt=""></p>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><p>  今年阅读的时间不算多，印象比较深的是余华《活着》、刘慈欣《三体全集》、东野圭吾《解忧杂货铺》、《嫌疑人X的献身》。<br>  专业方面的书籍。看完了数据结构《大话数据结构》，算法《剑指Offer》，网络《图解HTTP》《图解TCP/IP》。iOS看完《Effective Objective-C 2.0 》 和《Objective-C 高级编程》。操作系统《程序员的自我修养》看了一半。</p>
<h1 id="假期"><a href="#假期" class="headerlink" title="假期"></a>假期</h1><p>两个寒暑假没有干太多的事情。<br>除了暑假因为apple夏令营的原因去了广州玩了下。其余时间算是在家打基础吧<br><a href="https://www.wxz.name/2017/01/09/2016WinterVaction/">寒假记录(1.6~2.8)</a><br><a href="https://www.wxz.name/2017/07/24/2017SummerVaction/">暑假记录(7.1~9.2)</a></p>
<h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>  今年四月份大二的时候，尝试面了一次美团，时间一个小时，大概从iOS，操作系统，计算机网络，算法，都问了一遍吧，也算知道了自己不足。<br>  查漏补缺到了今年十一月份的时候，重新投了<strong>今日头条</strong>和<strong>知乎</strong>两家公司，本来是想看看自己还有那些不足，结果所有的面试都通过了，最后考虑下头条的深圳研发部离湖南比较近，如果有事也方便回来，选择了今日头条的实习offer，本来没有对待遇有什么期待，结果算下来每个月光交的税，就有我在大学生活费一半那么多了。当然更重要的是能够学习到东西，得到锻炼。<br>  <img src="https://img.wxz.name/IMG_7259.jpg" alt="IMG_7259"></p>
<p>  <a href="https://www.wxz.name/2017/05/17/interview-meituan/">面试问题记录</a></p>
<h1 id="展望2018"><a href="#展望2018" class="headerlink" title="展望2018"></a>展望2018</h1><p>越往后走，越觉得一个人的上限往往会取决于短板。<br>所以希望2018年能把英语学好，另外身体锻炼好，再加强下阅读。<br>没有意外的话，1月份实习，4月份春招，10月份秋招。<br>攒够了勇气，往前走吧。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[block kvc 多线程 一些整理]]></title>
      <url>/2017/11/07/block/</url>
      <content type="html"><![CDATA[<p>自用，还没来得及组织语言<br><a id="more"></a><br>最近在看《objective-C 高级编程》，深刻的体会到代码虐我千百倍，我待代码如初念的感觉。block这部分的实现真的是看巨多的次数，这里做这个学习的整理记录.</p>
<h1 id="Block是什么？形式是什么样的"><a href="#Block是什么？形式是什么样的" class="headerlink" title="Block是什么？形式是什么样的"></a>Block是什么？形式是什么样的</h1><p>带自动变量(局部变量)的匿名函数，在<a href="http://fuckingblocksyntax.com" target="_blank" rel="external">这里</a>可以看到block的用法</p>
<h1 id="Block的实现是什么样的？"><a href="#Block的实现是什么样的？" class="headerlink" title="Block的实现是什么样的？"></a>Block的实现是什么样的？</h1><p>用clang重写一段后(这里我直接复制参考文章中的代码，在末尾附录)<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo_</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</div><div class="line">    NSNumber *num = @<span class="number">3</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">long</span> (^myBlock)(<span class="keyword">void</span>) = ^<span class="keyword">long</span>() &#123;</div><div class="line">        <span class="keyword">return</span> i * num.intValue;</div><div class="line">    &#125;;</div><div class="line"> </div><div class="line">    <span class="keyword">long</span> r = myBlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再出来的代码中，我们找到关键的部分<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *isa;</div><div class="line">    <span class="keyword">int</span> Flags;</div><div class="line">    <span class="keyword">int</span> Reserved;</div><div class="line">    <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_desc_0</span> &#123;</span></div><div class="line">    <span class="keyword">size_t</span> reserved;</div><div class="line">    <span class="keyword">size_t</span> Block_size;</div><div class="line">    <span class="keyword">void</span> (*copy)(struct __foo_block_impl_0*, struct __foo_block_impl_0*);</div><div class="line">    <span class="keyword">void</span> (*dispose)(struct __foo_block_impl_0*);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//myBlock的数据结构定义</span></div><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_impl_0</span> &#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_desc_0</span>* <span class="title">Desc</span>;</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    NSNumber *num;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">//block数据的描述</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_desc_0</span> __<span class="title">foo_block_desc_0_DATA</span> = &#123;</span></div><div class="line">    <span class="number">0</span>,</div><div class="line">    <span class="keyword">sizeof</span>(struct __foo_block_impl_0),</div><div class="line">    __foo_block_copy_0,</div><div class="line">    __foo_block_dispose_0</div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="comment">//block中的方法</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">long</span> __foo_block_func_0(struct __foo_block_impl_0 *__cself) &#123;</div><div class="line">    <span class="keyword">int</span> i = __cself-&gt;i; <span class="comment">// bound by copy</span></div><div class="line">    NSNumber *num = __cself-&gt;num; <span class="comment">// bound by copy</span></div><div class="line"> </div><div class="line">    <span class="keyword">return</span> i * num.intValue;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</div><div class="line">    NSNumber *num = @<span class="number">3</span>;</div><div class="line"> </div><div class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_impl_0</span> <span class="title">myBlockT</span>;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">foo_block_impl_0</span> *<span class="title">myBlock</span> = &amp;<span class="title">myBlockT</span>;</span></div><div class="line">    myBlock-&gt;impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    myBlock-&gt;impl.Flags = <span class="number">570425344</span>;</div><div class="line">    myBlock-&gt;impl.FuncPtr = __foo_block_func_0;</div><div class="line">    myBlock-&gt;Desc = &amp;__foo_block_desc_0_DATA;</div><div class="line">    myBlock-&gt;i = i;</div><div class="line">    myBlock-&gt;num = num;</div><div class="line"> </div><div class="line">    <span class="keyword">long</span> r = myBlock-&gt;impl.FuncPtr(myBlock);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到创建block时，会初始化一个结构体struct，并初始化该struct的成员。<br>而在执行block的时候，就是把这个struct的指针传递过去。<br><img src="https://img.wxz.name/15100667517612.jpg" alt=""></p>
<p>可以看到这个结构体的名称叫做<strong>foo_block_impl_0<br>foo代表我们的函数名称，如果是main函数中的block就叫做</strong>main_block_impl_0<br>最后那个数字表示这个函数中第几个block，如果有第二个block就叫做__foo_block_impl_1</p>
<h1 id="Block怎么捕获的变量"><a href="#Block怎么捕获的变量" class="headerlink" title="Block怎么捕获的变量"></a>Block怎么捕获的变量</h1><p>首先要知道block的主要三种类是</p>
<ul>
<li>_NSConcreteStackBlock     栈上创建的block</li>
<li>_NSConcreteMallocBlock  堆上创建的block</li>
<li>_NSConcreteGlobalBlock   作为全局变量的block</li>
</ul>
<p>当struct第一次被创建时，存在该函数的栈帧上。其捕获的变量是会赋值到结构体的成员上，所以当block初始化完成后，捕获到的变量不能更改。<br>当函数返回时，函数的栈帧被销毁，这个block的内存也会被清除。所以在函数结束后仍然需要这个block时，就必须用Block_copy()方法将它拷贝到堆上。</p>
<p>而在截获自动变量值得时候，会首先把变量追加到<strong>foo_block_imp_o的结构体中。并且在</strong>foo_block_func_0中访问结构体中的这个变量对齐赋值。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://blog.ibireme.com/2013/11/27/objc-block/" target="_blank" rel="external">objc中的block</a></p>
<h1 id="KVC-和-KVO"><a href="#KVC-和-KVO" class="headerlink" title="KVC 和 KVO"></a>KVC 和 KVO</h1><!--more-->
<h1 id="KVC的使用方法"><a href="#KVC的使用方法" class="headerlink" title="KVC的使用方法"></a>KVC的使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">User *user=[[User alloc]init];</div><div class="line">[user setValue:@&quot;123&quot; forKey:@&quot;TrueName&quot;];</div></pre></td></tr></table></figure>
<h1 id="KVO的使用方法"><a href="#KVO的使用方法" class="headerlink" title="KVO的使用方法"></a>KVO的使用方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">User *user=[[User alloc]init];</div><div class="line">[user addObserver:self forKeyPath:@&quot;TrueName&quot; options:NSKeyValueObservingOptionOld | NSKeyValueObservingOptionNew context:nil];</div><div class="line"></div><div class="line">-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary*)change context:(void *)context&#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;%@&quot;,change);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.jianshu.com/p/ab54161d4bab" target="_blank" rel="external">IOS 中 KVO,KVC 的区别与联系 KVO 底层实现机制</a></p>
<h1 id="多线程总结"><a href="#多线程总结" class="headerlink" title="多线程总结"></a>多线程总结</h1><h1 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h1><h1 id="队列组"><a href="#队列组" class="headerlink" title="队列组"></a>队列组</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">        dispatch_group_t group = dispatch_group_create();</div><div class="line">        dispatch_queue_t q = dispatch_get_global_queue(0, 0);</div><div class="line">        //A队列</div><div class="line">        dispatch_group_async(group, q, ^&#123;</div><div class="line">            dispatch_group_enter(group);</div><div class="line">            </div><div class="line">            dispatch_group_leave(group);</div><div class="line">             &#125;);</div><div class="line">          //B队列   </div><div class="line">         dispatch_group_async(group, q, ^&#123;</div><div class="line">            dispatch_group_enter(group);</div><div class="line">            </div><div class="line">            dispatch_group_leave(group);</div><div class="line">             &#125;);</div><div class="line">             //队列完成后</div><div class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h2 id="GCD-串行（一个接一个，排队跑步，保持队形）队列"><a href="#GCD-串行（一个接一个，排队跑步，保持队形）队列" class="headerlink" title="GCD 串行（一个接一个，排队跑步，保持队形）队列"></a>GCD 串行（一个接一个，排队跑步，保持队形）队列</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)gcdDemo1</div><div class="line">&#123;</div><div class="line">    // 将操作放在队列中</div><div class="line">    // 在C语言函数中，定义类型，绝大多数的结尾是_t或者ref</div><div class="line">    // 使用串行队列，的异步任务非常非常非常有用！新建子线程是有开销的，不能无休止新建线程</div><div class="line">    // 即可以保证效率（新建一个子线程），用能够实现并发</div><div class="line">    // 应用案例：</div><div class="line">    // 1&gt; 从网络上上下载图片</div><div class="line">    // 2&gt; 滤镜（高光，红眼...）</div><div class="line"></div><div class="line">    dispatch_queue_t q = dispatch_queue_create(&quot;com.yoferzhang.gcddemo&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line"></div><div class="line">    // 非ARC开发时，千万别忘记release</div><div class="line">//    dispatch_release(q);</div><div class="line"></div><div class="line">    // 串行行队列的同步任务，同样会在主线程上运行</div><div class="line">    // 提示：在开发中极少用d</div><div class="line">    // 面试中有可能会问！</div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        // 同步任务顺序执行</div><div class="line">        dispatch_sync(q, ^&#123;</div><div class="line">            NSLog(@&quot;%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        // 异步任务，并发执行，但是如果在串行队列中，仍然会依次顺序执行</div><div class="line">        dispatch_async(q, ^&#123;</div><div class="line">            // [NSThread currentThread] 可以在开发中，跟踪当前线程</div><div class="line">            // num = 1，表示主线程</div><div class="line">            // num = 2，表示第2个子线程。。。</div><div class="line">            NSLog(@&quot;%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GCD-并行（并排跑，类似于赛跑）"><a href="#GCD-并行（并排跑，类似于赛跑）" class="headerlink" title="GCD 并行（并排跑，类似于赛跑）"></a>GCD 并行（并排跑，类似于赛跑）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)gcdDemo2</div><div class="line">&#123;</div><div class="line">    // 特点：没有队形，执行顺序程序员不能控制！</div><div class="line">    // 应用场景：并发执行任务，没有先后顺序关系</div><div class="line">    // 并行队列容易出错！并行队列不能控制新建线程的数量！</div><div class="line">    dispatch_queue_t q = dispatch_queue_create(&quot;com.yoferzhang.gcd2&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    </div><div class="line">        for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">            // 异步任务</div><div class="line">            dispatch_async(q, ^&#123;</div><div class="line">                // [NSThread currentThread] 可以在开发中，跟踪当前线程</div><div class="line">                // num = 1，表示主线程</div><div class="line">                // num = 2，表示第2个子线程。。。</div><div class="line">                NSLog(@&quot;异步%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        // 同步任务顺序执行</div><div class="line">        dispatch_sync(q, ^&#123;</div><div class="line">            NSLog(@&quot;同步%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="全局队列（苹果为了方便多线程的设计，提供一个全局队列，供所有的APP共同使用）"><a href="#全局队列（苹果为了方便多线程的设计，提供一个全局队列，供所有的APP共同使用）" class="headerlink" title="全局队列（苹果为了方便多线程的设计，提供一个全局队列，供所有的APP共同使用）"></a>全局队列（苹果为了方便多线程的设计，提供一个全局队列，供所有的APP共同使用）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)gcdDemo3</div><div class="line">&#123;</div><div class="line">    // 全局队列与并行队列的区别</div><div class="line">    // 1&gt; 不需要创建，直接GET就能用</div><div class="line">    // 2&gt; 两个队列的执行效果相同</div><div class="line">    // 3&gt; 全局队列没有名称，调试时，无法确认准确队列</div><div class="line">    </div><div class="line">    // 记住：在开发中永远用DISPATCH_QUEUE_PRIORITY_DEFAULT</div><div class="line">    // 多线程的优先级反转！低优先级的线程阻塞了高优先级的线程！</div><div class="line">    dispatch_queue_t q =dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        // 同步任务顺序执行</div><div class="line">        dispatch_sync(q, ^&#123;</div><div class="line">            NSLog(@&quot;%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        // 异步任务，并发执行，但是如果在穿行队列中，仍然会依次顺序执行</div><div class="line">        dispatch_async(q, ^&#123;</div><div class="line">            // [NSThread currentThread] 可以在开发中，跟踪当前线程</div><div class="line">            // num = 1，表示主线程</div><div class="line">            // num = 2，表示第2个子线程。。。</div><div class="line">            NSLog(@&quot;%@ %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="主-线程-队列，保证操作在主线程上执行"><a href="#主-线程-队列，保证操作在主线程上执行" class="headerlink" title="主(线程)队列，保证操作在主线程上执行"></a>主(线程)队列，保证操作在主线程上执行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- (void)gcdDemo4</div><div class="line">&#123;</div><div class="line">    // 每一个应用程序都只有一个主线程</div><div class="line">    // 为什么需要在主线程上工作呢？</div><div class="line">    // 在iOS开发中，所有UI的更新工作，都必须在主线程上执行！</div><div class="line">    dispatch_queue_t q = dispatch_get_main_queue();</div><div class="line">    </div><div class="line">    // 主线程是由工作的，而且除非将程序杀掉，否则主线程的工作永远不会结束！</div><div class="line">    // 阻塞了！！！</div><div class="line">//    dispatch_sync(q, ^&#123;</div><div class="line">//        NSLog(@&quot;come here baby!&quot;);</div><div class="line">//    &#125;);</div><div class="line">    </div><div class="line">    // 异步任务，在主线程上运行，同时是保持队形的</div><div class="line">    for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">        dispatch_async(q, ^&#123;</div><div class="line">            NSLog(@&quot;%@ - %d&quot;, [NSThread currentThread], i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="超出父类响应方法"><a href="#超出父类响应方法" class="headerlink" title="超出父类响应方法"></a>超出父类响应方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//重写hitTest处理</div><div class="line">override public func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView? &#123;</div><div class="line">    var view = super.hitTest(point, with: event)</div><div class="line">    if view == nil &#123;</div><div class="line">        for subView in self.subviews.reversed() &#123;</div><div class="line">            let tp = subView.convert(point, from: self)</div><div class="line">            if subView.bounds.contains(tp) &#123;</div><div class="line">                print(subView)</div><div class="line">                view = subView</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return view</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="http://www.jianshu.com/p/0b0d9b1f1f19" target="_blank" rel="external">关于iOS多线程，你看我就够了</a><br><a href="http://blog.csdn.net/zyq522376829/article/details/52373154" target="_blank" rel="external"> iOS并发编程对比总结,NSThread,NSOperation,GCD - iOS</a><br><a href="http://ios.jobbole.com/82622/" target="_blank" rel="external">GCD 死锁分析</a></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Copy和Strong关键词]]></title>
      <url>/2017/11/05/copyvsstrong/</url>
      <content type="html"><![CDATA[<p>昨天有人在群里提了个问题，关于浅拷贝和深拷贝的问题，我整理了整理，记录在这.<br><a id="more"></a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="NSArray-和-NSString-的-copy-操作为什么是浅拷贝？"><a href="#NSArray-和-NSString-的-copy-操作为什么是浅拷贝？" class="headerlink" title="NSArray 和 NSString 的 copy 操作为什么是浅拷贝？"></a>NSArray 和 NSString 的 copy 操作为什么是浅拷贝？</h2><p>我的理解是 NSArray 和 NSString 已经是不可变的了，那么完全没有必要<br>再开一个新的空间，也就是进行深拷贝。</p>
<h2 id="而NSMutableArray-和-NSMutableString-的-copy-操作却是深拷贝？"><a href="#而NSMutableArray-和-NSMutableString-的-copy-操作却是深拷贝？" class="headerlink" title="而NSMutableArray 和 NSMutableString 的 copy 操作却是深拷贝？"></a>而NSMutableArray 和 NSMutableString 的 copy 操作却是深拷贝？</h2><p>这个原因也是和上面一样，如果这里也只是拷贝地址的话，那么NSMutableString改变了，被赋值的NSString也会改变。<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">@interface ViewController ()</div><div class="line">@property(nonatomic,strong )NSArray *Ary;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    NSMutableArray *a= [NSMutableArray arrayWithObjects:@1,@2,@3, nil];;</div><div class="line">    self.Ary=a;</div><div class="line">    NSLog(@"%@ %p %p",_Ary,_Ary,a);</div><div class="line">    [a addObject:@"4"];</div><div class="line">    NSLog(@"%@ %p %p",_Ary,_Ary,a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看到官网文档也说了，取决于类<br><img src="https://img.wxz.name/C3DEFAE0-1A5A-4883-A9AD-0FE02B4B7957.png" alt="C3DEFAE0-1A5A-4883-A9AD-0FE02B4B7957"></p>
<h2 id="而可变对象和不可变对象的-mutable-copy-也都是深拷贝"><a href="#而可变对象和不可变对象的-mutable-copy-也都是深拷贝" class="headerlink" title="而可变对象和不可变对象的 mutable copy 也都是深拷贝"></a>而可变对象和不可变对象的 mutable copy 也都是深拷贝</h2><p>这里也是根据官网文档可以看到<br><img src="https://img.wxz.name/9A8273D8-4A2A-46D1-8A47-C9456B9635EF.png" alt="9A8273D8-4A2A-46D1-8A47-C9456B9635EF"></p>
<h1 id="其他的探索"><a href="#其他的探索" class="headerlink" title="其他的探索"></a>其他的探索</h1><ul>
<li>首先还要知道，对于容器类，深拷贝也只是单层深拷贝，如果要双层深拷贝，应该用归档再反归档</li>
</ul>
<h2 id="如果用copy和strong修饰符，分别实现的set方法"><a href="#如果用copy和strong修饰符，分别实现的set方法" class="headerlink" title="如果用copy和strong修饰符，分别实现的set方法"></a>如果用copy和strong修饰符，分别实现的set方法</h2><ul>
<li>如果用copy 修饰符，对应的setter方法实现如下</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setArr1:(NSMutableArray *)arr1 &#123;</div><div class="line">    <span class="keyword">if</span> (_arr1 != arr1) &#123;</div><div class="line">        [_arr1 release];</div><div class="line">        _arr1 = [arr1 copy]; <span class="comment">//内容拷贝，深拷贝</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果修改成用strong修饰符，对应的setter方法实现如下</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setArr1:(NSMutableArray *)arr1 &#123;</div><div class="line">    <span class="keyword">if</span> (_arr1 != arr1) &#123;</div><div class="line">        [_arr1 release];</div><div class="line">        _arr1 = [arr1 retain]; <span class="comment">//指针拷贝，浅拷贝</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>值得注意的话，要用self.arry来复制，如果用下划线的方式会直接修改地址。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[阅读笔记-程序员的自我修养]]></title>
      <url>/2017/07/24/readczxt/</url>
      <content type="html"><![CDATA[<p>计算机基础扫盲系列之操作系统<br><a id="more"></a></p>
<h1 id="第一章-温故而知新"><a href="#第一章-温故而知新" class="headerlink" title="第一章 温故而知新"></a>第一章 温故而知新</h1><h2 id="1-2-计算机硬件结构-P6"><a href="#1-2-计算机硬件结构-P6" class="headerlink" title="1.2 计算机硬件结构 P6"></a>1.2 计算机硬件结构 P6</h2><ul>
<li>早期，I/O设备和CPU、内存相比还是慢许多，于是每个设置对应一个相应的I/O控制器。</li>
<li>后来，CPU核心频率提升，渐渐的CPU、内存等相互跟不上了，于是专门设计了一个高速的<strong>北桥芯片(Northbridge,PCI Bridge)</strong>，以便能够在他们之间高速处理数据，像CPU等。</li>
<li>但是，如果低速设备也放在北桥上面，那么既要处理高速又要处理低速，会很复杂，于是设计了专门处理低速设备的<strong>南桥(Southbridge)</strong>，像磁盘，USB，鼠标等设备都在上面。</li>
</ul>
<h2 id="1-5-内存不够怎么办-P14"><a href="#1-5-内存不够怎么办-P14" class="headerlink" title="1.5 内存不够怎么办 P14"></a>1.5 内存不够怎么办 P14</h2><p>如何将有限的物理内存分给多个程序使用，如果采用虚拟内存和物理内存一一对应的方式，会产生下列三种问题。</p>
<ul>
<li>1.地址空间不隔离</li>
<li>2.内存使用效率低</li>
<li>3.程序的地址不确定</li>
</ul>
<p>解决:</p>
<ul>
<li>采用<strong>分段</strong>的方式来解决第一个和第三个问题。</li>
<li>采用<strong>分页</strong>的方式来解决第二个问题，分页是将地址空间人为地分成固定大小的页，每一页的大小由硬件决定，目前几乎所有的PC上采用4KB大小的页。</li>
</ul>
<p>常用的数据页和代码—-&gt;内存<br>不常用的数据页和代码—–&gt;磁盘<br>当进程所需的页不在内存中，又需要的时候，会捕获这个<strong>页错误</strong>，然后操作系统将这个页从磁盘中读出来放在内存中。</p>
<h2 id="1-6-线程-P19"><a href="#1-6-线程-P19" class="headerlink" title="1.6 线程 P19"></a>1.6 线程 P19</h2><ul>
<li><strong>程序执行的最小单位</strong>，由<em>线程ID，当前指令指针，寄存器集合和堆栈组成</em>,各线程之间共享程序的内存空间(代码、数据段、堆等)。</li>
<li><strong>至少拥有三种状态</strong>，分别是运行，就绪，等待。线程调度主流的方法，都带有<strong>优先级调度</strong>和<strong>轮转法</strong>的痕迹</li>
<li>线程依照表现，分为I/O密集型线程(频繁进入等待，而进入等待会放弃之后任可占用的时间份额)和CPU密集型线程(用完全部时间片)，前者受CPU欢迎。</li>
<li>线程优先级的改变份共有三种方式，<strong>用户指定优先级</strong>、<strong>根据进入等待状态的频繁程度提升或降低优先级</strong>、<strong>长时间得不到执行而被提升优先级</strong></li>
</ul>
<h2 id="1-6-2-线程安全-P24"><a href="#1-6-2-线程安全-P24" class="headerlink" title="1.6.2 线程安全 P24"></a>1.6.2 线程安全 P24</h2><p>因为可访问的全局变量和堆数据随时可能被其他的线程改变。当两个线程同时操作一个变量时，既可能发生这种问题。</p>
<ul>
<li>单指令的操作称之为<strong>原子操作</strong>的。在简单的情况，可以使用原子操作，但在复杂的情况就力不从心了</li>
<li><strong>二元信号量</strong>，分为占用和非占用两种状态，可以被任意线程获取并释放。</li>
<li><strong>互斥量</strong>，和信号量不同的地方在于，那个线程获取的互斥量，那个线程就要负责释放这个锁。</li>
<li><strong>临界区</strong>，比互斥量更严格。在信号量和互斥量中，创建后其他进程来获取是合法的。而在临界区中，仅限于本进程，其他进程无法获取。</li>
</ul>
<h1 id="第二章-编译和链接"><a href="#第二章-编译和链接" class="headerlink" title="第二章 编译和链接"></a>第二章 编译和链接</h1><h2 id="2-1被隐藏了的过程-P38"><a href="#2-1被隐藏了的过程-P38" class="headerlink" title="2.1被隐藏了的过程 P38"></a>2.1被隐藏了的过程 P38</h2><ul>
<li><strong>预编译</strong>:处理预编译指令<br>  gcc -E hello.c -o hello.i</li>
<li><strong>编译</strong>:进行一系列词法分析、语法分析、语义分析、优化生成后的汇编代码<br>  gcc -S hello.i -o hello.s</li>
<li><strong>汇编</strong>:将汇编代码转变为机器可以执行的命令<br>  gcc -c hello.s -o hello.o</li>
<li><strong>链接</strong></li>
</ul>
<h2 id="2-2编译器做了什么-P41"><a href="#2-2编译器做了什么-P41" class="headerlink" title="2.2编译器做了什么 P41"></a>2.2编译器做了什么 P41</h2><ul>
<li><strong>词法分析</strong><br>  源代码程序被输入到<strong>扫描器</strong>中，扫描器简单的将源代码字符分割成一系列的<strong>记号</strong>。</li>
<li><strong>语法分析</strong><br>  对<strong>扫描器</strong>中产生的记号进行语法分析，从而产生<strong>语法树</strong>，采用<strong>上下文无关语法</strong>。</li>
<li><strong>语义分析</strong><br>  语法分析只是从语法层次分析，它并不了解这个语句真正有意义，其中编译器能分析的语义只有<strong>静态语义</strong>(声明、类型的匹配)，<strong>动态语意</strong>一般指在运行期出现的相关问题(0作为除数等)。<br>  经过了语义分析阶段以后，整个语法树的表达式都标识了类型。</li>
<li><strong>中间语言生成</strong><br>  现代的编译器有很多层次的优化，这里所描述的<strong>源码级优化器</strong>在不同编译器中可能有不同的定义。<br>  源码级优化器往往将语法树转为<strong>中间代码</strong>，是语法树的顺序表示。不同编译器的中间代码有很多类型，常见的有三地址码、P-代码。<br>  中间代码使编译器可以分为前端和后端。<strong>前端</strong>产生与机器无关的中间代码。<strong>后端</strong>将中间代码转为目标机器代码。</li>
</ul>
<h1 id="3-目标文件里有什么"><a href="#3-目标文件里有什么" class="headerlink" title="3.目标文件里有什么"></a>3.目标文件里有什么</h1><h2 id="3-1-目标文件的格式"><a href="#3-1-目标文件的格式" class="headerlink" title="3.1 目标文件的格式"></a>3.1 目标文件的格式</h2><ul>
<li><strong>可执行文件</strong>格式主要是Windows下的<strong>PE(Portable Executable)</strong>和Linux的<strong>ELF(Executable Linkable Format)</strong></li>
<li><strong>目标文件</strong>是源代码编译后但是未链接的那些中间文件(Windows的.obj和Linux下的.o)</li>
</ul>
<table>
<thead>
<tr>
<th>可重定位文件</th>
<th>包括了代码和数据，可被链接成可执行文件或者共享目标文件</th>
<th>Linux的.o，Windows的.obj</th>
</tr>
</thead>
<tbody>
<tr>
<td>可执行文件</td>
<td>可以直接执行的程序，代表就是ELF可执行文件</td>
<td>bin/bash文件，win的exe</td>
</tr>
<tr>
<td>共享目标文件</td>
<td>包含了代码和数据，与可重定位文件成新的目标文件，与可执行文件成进程映像</td>
<td>Linux的.so，Windows的DLL</td>
</tr>
<tr>
<td>核心转储文件</td>
<td>当进程意外终止，将进程的地址空间内容及终止时的其他信息转为这个</td>
<td>Linux下的core dump</td>
</tr>
</tbody>
</table>
<p>EFI文件</p>
<ul>
<li>.text section<br>  程序编译后的机器指令</li>
<li>.data section<br>  已初始化的全局变量和局部静态变量</li>
<li>.bss  section<br>  为为初始化的全局变量和局部静态变量预留位置</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 阅读笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大二暑假日常记录]]></title>
      <url>/2017/07/24/2017SummerVaction/</url>
      <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大学里最后一个有时间提高自己的的暑假就这么过去了<br>看了看立下的目标好像全部打了个五折23333</p>
<a id="more"></a>
<h2 id="理论方面"><a href="#理论方面" class="headerlink" title="理论方面"></a>理论方面</h2><ul>
<li>操作系统方面，《程序员的自我修养》看完一半</li>
<li>网络方面，《图解TCP/IP》《图解HTTP》看完</li>
<li>算法数据结构方面，《剑指Offer》一半搞定，《大话数据结构》依旧没来得及全部手写一遍</li>
</ul>
<h2 id="项目方面"><a href="#项目方面" class="headerlink" title="项目方面"></a>项目方面</h2><ul>
<li>工大助手新版本大概开发完了，还有几个小的部分需要修改</li>
<li>接了个app开发，用了四五天写完赚了几千。</li>
</ul>
<h2 id="比赛方面"><a href="#比赛方面" class="headerlink" title="比赛方面"></a>比赛方面</h2><ul>
<li>省赛二等奖，颁奖仪式都不想去，虽然离一等奖只差一名。但记得一年前大一拿了个省三都能开心半天，不知道是自己变强了，还是想要的更多了。亦或者眼高手低。</li>
<li>CCCC移动赛全国TOP10%(487进50)，拿到了杭州总决赛的门票，同时被apple邀请参加iOS Club夏令营集训，这次收获真的很大，主要是眼界方面，包括各大高校。有一个很不错的想法，争取在杭州决赛之前实现，敬请期待。</li>
</ul>
<h2 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h2><ul>
<li>拿到了驾照</li>
<li>顺便去广州旅游的一番</li>
</ul>
<h2 id="每日记录"><a href="#每日记录" class="headerlink" title="每日记录"></a>每日记录</h2><table>
<thead>
<tr>
<th style="text-align:left">日期</th>
<th style="text-align:left">编程</th>
<th style="text-align:left">理论</th>
<th style="text-align:left">生活</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">7.1~7.20</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">考驾照</td>
</tr>
<tr>
<td style="text-align:left">7.21</td>
<td style="text-align:left"></td>
<td style="text-align:left">《iOS视频学习》</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.22</td>
<td style="text-align:left"></td>
<td style="text-align:left">《iOS视频学习》</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.23</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">重装mac</td>
</tr>
<tr>
<td style="text-align:left">7.24</td>
<td style="text-align:left"></td>
<td style="text-align:left">数据结构-线性表、链表</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.25</td>
<td style="text-align:left"></td>
<td style="text-align:left">《程序员的自我修养》第一章</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.26</td>
<td style="text-align:left">CCCC比赛作品提交</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.27</td>
<td style="text-align:left"></td>
<td style="text-align:left">《程序员的自我修养》第二章</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.28</td>
<td style="text-align:left">工大助手-微信小程序端 api修复</td>
<td style="text-align:left">《程序员的自我修养》第三章</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.29</td>
<td style="text-align:left">工大助手-IM Server api完善</td>
<td style="text-align:left">《程序员的自我修养》第四章</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.30</td>
<td style="text-align:left">工大助手-IM App 聊天模块</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.31</td>
<td style="text-align:left">工大助手-IM App 搜索 模块</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.1</td>
<td style="text-align:left">工大助手-二手市场详情 重构</td>
<td style="text-align:left">LeetCode-3、5</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.2</td>
<td style="text-align:left">工大助手-二手市场发布 重构</td>
<td style="text-align:left">LeetCode-8</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.3</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-151</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.4</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-1</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.5</td>
<td style="text-align:left">工大助手-失物招领 列表，详情，发布</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.6</td>
<td style="text-align:left"></td>
<td style="text-align:left">总结iOS 多线程</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.7</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">CCCC入围决赛</td>
</tr>
<tr>
<td style="text-align:left">8.8</td>
<td style="text-align:left">工大助手-二手市场动画</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.9</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">身体不适，休息</td>
</tr>
<tr>
<td style="text-align:left">8.10</td>
<td style="text-align:left"></td>
<td style="text-align:left">《剑指Offer》P1-53</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.11</td>
<td style="text-align:left"></td>
<td style="text-align:left">《剑指Offer》P53-93</td>
<td style="text-align:left">省赛进入决赛</td>
</tr>
<tr>
<td style="text-align:left">8.12</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">回老家</td>
</tr>
<tr>
<td style="text-align:left">8.13</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">回老家</td>
</tr>
<tr>
<td style="text-align:left">8.14</td>
<td style="text-align:left">工大助手-关于、私信推送 模块</td>
<td style="text-align:left">《剑指Offer》P94-132</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.15</td>
<td style="text-align:left">工大助手-反馈、二手删除、私信红点</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.16</td>
<td style="text-align:left">工大助手-日历</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.17</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">休息</td>
</tr>
<tr>
<td style="text-align:left">8.18</td>
<td style="text-align:left"></td>
<td style="text-align:left">工大助手-头像问题、界面修改</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.19</td>
<td style="text-align:left"></td>
<td style="text-align:left">工大助手-圆形图标问题</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.19</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">准备夏令营</td>
</tr>
<tr>
<td style="text-align:left">8.21~25</td>
<td style="text-align:left"></td>
<td style="text-align:left">Apple iOS Club夏令营集训</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.26~27</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">广州旅游</td>
</tr>
<tr>
<td style="text-align:left">8.28~31</td>
<td style="text-align:left">省赛PPT制作</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">9.1~2</td>
<td style="text-align:left">省赛</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>之前两个假期的记录:<br><a href="/2016/07/08/2016SummerVaction/">大一暑假日常记录</a><br><a href="/2017/01/09/2016WinterVaction/">大二寒假日常记录</a></p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 假期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ipa重签名踩坑记]]></title>
      <url>/2017/05/28/ios-resign/</url>
      <content type="html"><![CDATA[<p>前几天看到叉叉助手推了一个新功能，不越狱就可以用脚本挂游戏。当时黑人问号脸，这是什么黑科技。<br>后面点进去发现是将游戏ipa里面植入游戏脚本，然后用企业证书分发给用户使用。然而每个月要收30元，美其名曰证书费。<br>我突发奇想，我能不能用我的个人证书签名呢.<br><a id="more"></a></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>首先需要知道，我们在真机调试时，用到了一个Provisioning Profile供应配置文件，这个文件里面包含了app id，开发者信息，设备udid 三样东西。<br>app id - 用来识别将要安装的app<br>udid   - 用来识别设备（个人证书上限100个，企业无限）<br>开发者信息 - 自己电脑用CSR文件请求后得到的证书<br><img src="https://img.wxz.name/14959875852378.jpg" alt=""><br>当app安装到真机上，首先会确认这三个信息，是否都匹配，如果匹配则安装上去。<br>而我们也一样可以将别人的ipa，通过重签名的方式，安装到自己的手机上，唯一要改动的就是app id。</p>
<h1 id="开始行动-命令行方式"><a href="#开始行动-命令行方式" class="headerlink" title="开始行动 - 命令行方式"></a>开始行动 - 命令行方式</h1><p>首先我一开始采用的方式是通过命令行的方式<br>先通过PP助手的越狱商店下载ipa，之所以不通过itunes下载，是因为itunes商店的app都加了壳，我们需要自己砸壳太麻烦了。<br>(1)解压qq.ipa 找到Payload文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">unzip qq.ipa //命令行解压</div></pre></td></tr></table></figure></p>
<p>(2)将Payload目录中的_CodeSignature文件删除<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm -rf Payload/*.app/_CodeSignature/</div></pre></td></tr></table></figure></p>
<p>(3）将自己app打包导出ipa文件 解压后找到<br>embedded.mobileprovision 文件 并替换qq.ipa中的embedded.mobileprovision 文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cp embedded.mobileprovision Payload/*.app/embedded.mobileprovision</div></pre></td></tr></table></figure></p>
<p>（4)重新签名，“iPhone Distribution: XXXXXX”这个指的是自己的embedded.mobileprovision文件用到的签名证书名称，在xcode或钥匙串中可以找到<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/codesign -f -s &quot;iPhone Distribution: XXXXXX&quot; --resource-rules Payload/*.app/ResourceRules.plist Payload/*.app/</div></pre></td></tr></table></figure></p>
<p>这里是第一个坑，在证书名称这里一直错误，后来知道可以使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">xcrun security find-identity -v -p codesigning</div></pre></td></tr></table></figure></p>
<p> 列举出所有的证书，然后复制进去<br> <img src="https://img.wxz.name/14959883114267.jpg" alt=""></p>
<p>然后第二个坑，会发现提示<br>–resource-rules has been deprecated in mac os x &gt;= 10.10<br>上网搜索后，发现在<a href="https://stackoverflow.com/questions/26459911/resource-rules-has-been-deprecated-in-mac-os-x-10-10" target="_blank" rel="external">stackoverflow</a>这里有讨论，但是我没有解决，于是放弃了这个方法。<br>(5)重新打包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">zip -r qq.ipa Payload</div><div class="line">/rm -rf Payload/</div></pre></td></tr></table></figure></p>
<h1 id="另寻新法-iOS-APP-Signer"><a href="#另寻新法-iOS-APP-Signer" class="headerlink" title="另寻新法 - iOS APP Signer"></a>另寻新法 - iOS APP Signer</h1><p>在命令行方式失败后，我开始寻找其他方法，于是发现了<a href="http://dantheman827.github.io/ios-app-signer/" target="_blank" rel="external">iOS APP Signer</a>这个方法。</p>
<p><img src="https://img.wxz.name/14961507932167.jpg" alt=""></p>
<p>首先看这张图，主要要填的地方只有三个.</p>
<ul>
<li>【1】为你要重签名的ipa文件，请注意这里要求是没加壳的，直接从appstore上面下载的是不行的，建议在PP助手上下载下来。</li>
<li>【2】为你自己的开发者证书。</li>
<li>【3】为供应配置文件。</li>
</ul>
<p>这三个是必选项，剩下下面的地方分别是修改Bundle id，app名称，app版本。<br>我依照流程去做，结果每次都出错。直到最后看到了这个<a href="http://www.hangge.com/blog/cache/detail_1219.html" target="_blank" rel="external">这篇文章</a>最底下，然后用Team Provisioning Profile文件签名成功。<br>不得不说Team Provisioning Profile简直是神器，对任意bundle id皆有用。</p>
<h1 id="签名完毕"><a href="#签名完毕" class="headerlink" title="签名完毕"></a>签名完毕</h1><p>打开Xcode-Window-Device。<br>点这个加号，选择刚刚的ipa安装到我们的手机上。<br><img src="https://img.wxz.name/14961513954999.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[面试和反思]]></title>
      <url>/2017/05/17/interview-meituan/</url>
      <content type="html"><![CDATA[<p>已拿头条和知乎offer，简单记录下几次实习生面试，感觉操作系统看完《程序员的自我修养》，数据结构看完《大话数据结构》，算法看完《剑指Offer》，网络看完《图解HTTP》《图解TCP/IP》。iOS看完《Effective Objective-C 2.0 》 和《Objective-C 高级编程》就差不多了。推荐<a href="https://www.nowcoder.com/discuss/21022?type=0&amp;order=0&amp;pos=92&amp;page=1" target="_blank" rel="external">这篇文章</a><br><a id="more"></a><br>__</p>
<h2 id="大二美团实习生一面"><a href="#大二美团实习生一面" class="headerlink" title="大二美团实习生一面"></a>大二美团实习生一面</h2><p> 1.oc里面属性有哪些？</p>
<p> 1.1.nonatomic和natomic区别？</p>
<p> 1.2.为什么说natomic是安全的？</p>
<p>1.3.那么nonatomic就是不安全的？</p>
<p>1.4.举个例子</p>
<p> 1.5那你又说这样是安全的，那哪里安全的呢？</p>
<p> 1.6那么类是安全的么？</p>
<p> 1.7那你说说readonly和readwrite区别？</p>
<p> 1.8那么属性和实例变量的区别？</p>
<p> 1.9那可不可以有只生成setter和getter方法，而不生成实例变量呢？</p>
<p> 2.你了解分类么，它有什么用？</p>
<p> 2.1那如果你定义的分类里面，和第三方库冲突了会怎么样？</p>
<p> 3.你了解过哪几种打包方式</p>
<p> 4.动态语言/静态语言区别？</p>
<p> 4.1 消息机制</p>
<p> 4.2 用问我KVO，KVC  ,NSNotification</p>
<p> 4.3 那你平时如何传递方法？</p>
<p><strong>(OC部分结束)</strong><br> 5.那你能讲讲操作系统里面虚拟内存和物理内存的区别么</p>
<p> 5.1.那你虚拟内存和物理内存怎么交互的呢？</p>
<p> 5.2那虚拟内存是什么呢？</p>
<p><strong>(操作系统部分结束)</strong><br> 6.你知道链表么？如果两个链表相交于一个节点，你能找出来么？</p>
<p> 6.1.在线写代码<br>面试官发个我一个这样的网站<a href="https://www.codepile.net" target="_blank" rel="external">codepile</a>，要求我在上面在线写代码，并且我写了后他可以实时看到，可怕…<br> 6.2.链表结构</p>
<p> 6.3.提示下完成链表</p>
<p><strong>(数据结构部分结束)</strong></p>
<p> 7.说一下网络的七层协议以及用途吧</p>
<p>7.1传输层最重要的两个协议是什么？TCP和UDP</p>
<p> 7.2除了OSI七层模型，还有什么么？</p>
<p>8.block的循环引用，可以举个例子么</p>
<p> 9.你还有什么要问我的么</p>
<h1 id="大三今日头条实习一面"><a href="#大三今日头条实习一面" class="headerlink" title="大三今日头条实习一面"></a>大三今日头条实习一面</h1><p> 1.讲一讲runloop</p>
<p> 2.图片缓存优化</p>
<p>3.tableview重用机制 如果你自己来设计呢</p>
<p>4.代码编译的过程  </p>
<p>5.自己的app最大的技术难题</p>
<p>6.set get方法自己写过么(我聊了各属性里面set的实现)</p>
<p>7.单例设计模式</p>
<p>8.UIView和CALayer区别</p>
<p>9.图片圆角</p>
<p>10.你还有啥问我的</p>
<h1 id="大三今日头条实习二面"><a href="#大三今日头条实习二面" class="headerlink" title="大三今日头条实习二面"></a>大三今日头条实习二面</h1><p> 介绍下自己</p>
<p> 聊聊你的比赛</p>
<p> socket和http区别</p>
<p> http了解么</p>
<p> 微信扫码登录怎么实现的</p>
<p>微信扫码第三方登录</p>
<p> 开发中遇到的线上问题</p>
<p>开发中难度最高的地方</p>
<p> 介绍下自己</p>
<h1 id="大三知乎实习一面"><a href="#大三知乎实习一面" class="headerlink" title="大三知乎实习一面"></a>大三知乎实习一面</h1><p>讲讲TCP/IP(长连接短连接 UDP TCP https 非对称加密)</p>
<p> uiView initWithFram方法</p>
<p> 线上app出crash怎么办</p>
<p>哈希表(字典是哈希表么)</p>
<p> 数据结构  图 </p>
<p> 属性(copy week strong)</p>
<p>响应链</p>
<p>你有啥要问我的</p>
<h1 id="大三知乎实习二面"><a href="#大三知乎实习二面" class="headerlink" title="大三知乎实习二面"></a>大三知乎实习二面</h1><p> 浅拷贝 深拷贝</p>
<p> Instruments</p>
<p>iOS存储</p>
<p> NSOperation</p>
<p> 你有啥要问我的</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[switf服务端环境配置]]></title>
      <url>/2017/04/27/swift-perfet/</url>
      <content type="html"><![CDATA[<p>本来想直接java+spring搭服务器环境的，后面觉得这样学的太杂了不好。<br>就直接用swift+perfect搭服务端好了。以后想做些App，简单的也可以自己写后端。<br><a id="more"></a></p>
<h1 id="安装Ubuntu16-04"><a href="#安装Ubuntu16-04" class="headerlink" title="安装Ubuntu16.04"></a>安装Ubuntu16.04</h1><p>之前用ubuntu14.04，但是在最后build时候提示要clang 3.6<br><img src="https://img.wxz.name/14933038275205.jpg" alt=""></p>
<h1 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h1><h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><p>xxx为你服务器的ip地址，接着输入密码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ssh ubuntu@xxxxxxx</div></pre></td></tr></table></figure></p>
<h2 id="拿到root权限"><a href="#拿到root权限" class="headerlink" title="拿到root权限"></a>拿到root权限</h2><p>为了方便以后步骤的进行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo -s</div></pre></td></tr></table></figure></p>
<p>## </p>
<h2 id="更新软件包列表"><a href="#更新软件包列表" class="headerlink" title="更新软件包列表"></a>更新软件包列表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apt-get update</div></pre></td></tr></table></figure>
<h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apt-get install make git clang libicu-dev libmysqlclient-dev libpq-dev sqlite3 libsqlite3-dev apache2-dev pkg-config libssl-dev libsasl2-dev libcurl4-openssl-dev uuid-dev wget</div></pre></td></tr></table></figure>
<h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><blockquote>
<p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/src/</div><div class="line">wget https://github.com/mongodb/mongo-c-driver/releases/download/1.3.5/mongo-c-driver-1.3.5.tar.gz</div></pre></td></tr></table></figure>
<p>解压<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gunzip mongo-c-driver-1.3.5.tar.gz</div></pre></td></tr></table></figure></p>
<p>展开源代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar -xvf mongo-c-driver-1.3.5.tar</div></pre></td></tr></table></figure></p>
<p>删除档案包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm mongo-c-driver-1.3.5.tar</div></pre></td></tr></table></figure></p>
<p>在编译 MongoDB 源代码前首先执行配置命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd mongo-c-driver-1.3.5/</div><div class="line">./configure --enable-sasl=yes</div></pre></td></tr></table></figure></p>
<p>编译 MongoDB:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">make</div></pre></td></tr></table></figure></p>
<p>安装MongoDB<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">make install</div></pre></td></tr></table></figure></p>
<h2 id="安装swift"><a href="#安装swift" class="headerlink" title="安装swift"></a>安装swift</h2><p>当前是swift3.1.1最新版本，具体安装什么版本以官网最新为标准<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /usr/src/</div><div class="line">wget https://swift.org/builds/swift-3.1.1-release/ubuntu1604/swift-3.1.1-RELEASE/swift-3.1.1-RELEASE-ubuntu16.04.tar.gz</div></pre></td></tr></table></figure></p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gunzip &lt; swift-3.1.1-RELEASE-ubuntu16.04.tar.gz | tar -C / -xv --strip-components 1</div></pre></td></tr></table></figure></p>
<p>删除安装包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm swift-3.1.1-RELEASE-ubuntu16.04.tar.gz</div></pre></td></tr></table></figure></p>
<h2 id="运行PerfectTemplate"><a href="#运行PerfectTemplate" class="headerlink" title="运行PerfectTemplate"></a>运行PerfectTemplate</h2><p>下载<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://github.com/PerfectlySoft/PerfectTemplate</div></pre></td></tr></table></figure></p>
<p>编译<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd PerfectTemplate</div><div class="line">swift build</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.build/debug/PerfectTemplate --port 80</div></pre></td></tr></table></figure></p>
<p><img src="https://img.wxz.name/14933054998405.jpg" alt=""></p>
<h2 id="swift运行环境完成"><a href="#swift运行环境完成" class="headerlink" title="swift运行环境完成"></a>swift运行环境完成</h2><p>在你本地的电脑输入即可看到环境已经安装完毕了<br><a href="http://IP:8080" target="_blank" rel="external">http://IP:8080</a><br><img src="https://img.wxz.name/14933055777667.jpg" alt=""></p>
<h1 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h1><p>只是有swift运行环境还不够，自己网站都不好配置，所以接下来安装nginx。<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p>安装完毕后可以输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo lsof -i :80</div></pre></td></tr></table></figure></p>
<p>发现80端口已经被nginx使用了<br>如果想要配置的话<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vim /etc/nginx/sites-available/default</div></pre></td></tr></table></figure></p>
<p>最后网站的目录文件在/var/www/html</p>
<h1 id="安装vsftp"><a href="#安装vsftp" class="headerlink" title="安装vsftp"></a>安装vsftp</h1><p>安装ftp<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install vsftpd</div></pre></td></tr></table></figure></p>
<p>新建用户www，把/var/www作为主目录，并设置密码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo mkdir /var/www</div><div class="line">sudo useradd -d /var/www -s /bin/bash www</div><div class="line">sudo passwd www</div></pre></td></tr></table></figure></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo vi /etc/vsftpd.conf</div></pre></td></tr></table></figure>
<p>添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#userlist_deny=NO</div><div class="line">#userlist_enable=YES</div><div class="line">#userlist_file=/etc/allowed_users</div><div class="line">seccomp_sandbox=NO</div><div class="line">write_enable=YES</div></pre></td></tr></table></figure></p>
<p>如果需要限制用户范围<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chroot_local_user=YES</div><div class="line">chroot_list_enable=YES</div><div class="line">chroot_list_file=/etc/vsftpd.chroot_list</div></pre></td></tr></table></figure></p>
<p>其中例外的用户(不受限制)在/etc/vsftpd.chroot_list</p>
<h2 id="添加可登陆用户名"><a href="#添加可登陆用户名" class="headerlink" title="添加可登陆用户名"></a>添加可登陆用户名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo vi /etc/allowed_users</div></pre></td></tr></table></figure>
<p>输入www然后按esc再输入:wq保存</p>
<h2 id="Ftp完成"><a href="#Ftp完成" class="headerlink" title="Ftp完成"></a>Ftp完成</h2><p>现在可以通过ftp连接了。如果不行，重启下服务器</p>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://github.com/PerfectlySoft/PerfectDocs/blob/master/guide/deployment-Ubuntu1510.md" target="_blank" rel="external">Producing an Ubuntu 15.10 Base Image for Swift 3 and Perfect 2</a></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> swift </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[从OSI模型浅谈SS和VPN]]></title>
      <url>/2017/03/27/SSandVpn/</url>
      <content type="html"><![CDATA[<p>科学上网，基本已是一个程序员的必备技能，我们用到的地方，不仅仅局限于访问Google查询资料，而在Github提速，使用npm或者brew下载软件时，可能都需要使用到代理。</p>
<h2 id="我们可能会产生以下疑问"><a href="#我们可能会产生以下疑问" class="headerlink" title="我们可能会产生以下疑问"></a>我们可能会产生以下疑问</h2><ul>
<li>在浏览网页时使用shadowsocks，可以判断是否是国外网站而选择走不走代理，而使用VPN则无法做到?</li>
<li>使用shadowsocks在浏览网页时使用Http代理，而在npm和brew代理时则使用socks5代理?</li>
<li>网游加速器为什么常常是VPN而不是使用SS来加速？</li>
<li>我该如何合理的使用shadowsocks或者VPN？</li>
</ul>
<p>接下来，我会从OSI七层参考模型的角度来比较SS和VPN这两种科学上网的方式。<br><a id="more"></a></p>
<h2 id="什么是OSI模型，我们为什么要先了解它？"><a href="#什么是OSI模型，我们为什么要先了解它？" class="headerlink" title="什么是OSI模型，我们为什么要先了解它？"></a>什么是OSI模型，我们为什么要先了解它？</h2><p>OSI是Open System Interconnection的缩写，意为开放式系统互联。<br>我们日常使用的QQ，浏览网页，基本都离不开它。<br>就好像我们中国人在国内用中文互相说话，朝鲜人用朝鲜语在国内互相说话，日本人用日语在国内互相说话。但是一旦我们走出了国门，和其他国家的人交流，我们不可能为了和朝鲜人说一句话去学朝鲜语，然后为了和日本人说一句而去说日语。</p>
<p><strong>那么我们约定俗成，在国际上交流，统一使用英语</strong></p>
<p>而计算机也是如此，Windows系统和Windows系统发信息一套协议，MacOS系统和MacOS系统通讯一套协议，iphone和iphone通讯一套协议，还有数不尽的机器，各自一套协议，那么这么多协议如何做到互相通讯呢？那么约定俗成大家统一按照一套标准来设计，这套模型标准就叫做OSI七层模型。</p>
<h2 id="那么这个OSI对我们理解SS和VPN有什么作用呢？"><a href="#那么这个OSI对我们理解SS和VPN有什么作用呢？" class="headerlink" title="那么这个OSI对我们理解SS和VPN有什么作用呢？"></a>那么这个OSI对我们理解SS和VPN有什么作用呢？</h2><p>请看下图，当我们发送一个数据，会从上而下传输，最后通过网线传输出去。同样的，如果我们接收到数据，也会从下往上接收。我在图中特意标出了SS和VPN常见的协议位于的地址。<br>可以发现，VPN(PPTP/L2TP)是位于很底层的部分(第二层)，而SS则是位于较上层的地方(第五层和第七层)<br><img src="https://img.wxz.name/imgs/20170325233806_Ao3c6k_1234.png" alt="OSI"><br>再往下，我们回答上述提的一大部分坑。</p>
<ul>
<li><p>在浏览网页时使用shadowsocks，可以判断是否是国外网站而选择走不走代理，而使用VPN则无法做到?<br>  原因是因为VPN是较底层的协议，无法进行判断传输的数据是属于国内的还是国外的。而在SS较高层的协议，则可以判断数据是否来自国外。</p>
</li>
<li><p>使用shadowsocks在浏览网页时使用Http代理，而在npm和brew代理时则使用socks5代理?<br>同样和OSI七层模型有关，socks5位于会话层，在这一层socks5不关心数据用于什么协议，而在应用层，有很多种协议，http协议只是其中一种，对于不支持http协议的应用，我们就需要用到Socks。</p>
</li>
<li><p>网游加速器为什么常常是VPN而不是使用SS来加速？<br>一样的理由，VPN位于较底层，不受到协议的约束，可以保证网络数据最大化的优化。</p>
</li>
<li><p>为什么将SS挂在路由器上也可以实现网游加速？<br>看下图，左边是我们的电脑，我们的请求从我们的电脑出来，经过路由器，到达服务器。<br>而我们将SS配置在路由器，就相当于在路由器的网络层中实现了代理，以这样的方式来实现游戏的代理。<br><img src="https://img.wxz.name/imgs/20170327190356_jpIMFC_123.png" alt=""></p>
</li>
</ul>
<h2 id="那么聊了这么多，我该如何的运用代理呢"><a href="#那么聊了这么多，我该如何的运用代理呢" class="headerlink" title="那么聊了这么多，我该如何的运用代理呢"></a>那么聊了这么多，我该如何的运用代理呢</h2><p>那么我的建议如下</p>
<ul>
<li>HTTP代理-仅有网页需求，访问Google，YouTube等网站</li>
<li>Socks代理-需要使用npm,brew等访问国外源下载软件，以及在Android Studio等软件中下载SDK等需要代理</li>
<li>VPN-网游加速，访问自己公司内的内网。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[工大助手Tableview优化]]></title>
      <url>/2017/03/10/hutHelperTableView/</url>
      <content type="html"><![CDATA[<p>寒假的时候写完了iOS端的校园说说部分，因为当时技术有限，很多部分不完善，尤其体现在高速滑动时，界面卡顿很严重。开学大概一个月时，自己技术也有了一定提高，对tableview进行了重构，并在这里写下思路。<br><a id="more"></a></p>
<h1 id="老版本"><a href="#老版本" class="headerlink" title="老版本"></a>老版本</h1><p>因为当时只会使用xib+tableview，所以用了一个很取巧的地方。<br>一个说说模块，因为高度等问题，我实际上是由于四个row部分组成的。<br>见下图红框部分。<br><img src="https://img.wxz.name/IMG_0480-1.png?imageView2/2/w/300/h/600/interlace/0/q/41" alt="IMG_0480"></p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>每条说说采用了4个不同的xib文件和tableViewCell来实现，分别对应四个红框</p>
<h3 id="第一个红框"><a href="#第一个红框" class="headerlink" title="第一个红框"></a>第一个红框</h3><p>在这个部分是固定的头像，昵称，以及学号，这个部分不用进行任何高度适配，是最简单的。</p>
<h3 id="第二个红框"><a href="#第二个红框" class="headerlink" title="第二个红框"></a>第二个红框</h3><p>这个部分是文本内容，这里需要根据行数进行高度适配，而当文本高度改变后，因为在xib界面中设置了Autoresizing，所以文本自然也会继续充满</p>
<h3 id="第三个红框"><a href="#第三个红框" class="headerlink" title="第三个红框"></a>第三个红框</h3><p>这里显示说说的评论数目，因为也是固定的尺寸，所以不需要更改</p>
<h3 id="第四个红框"><a href="#第四个红框" class="headerlink" title="第四个红框"></a>第四个红框</h3><p>这里也需要适配高度，每加入一行都要适配一次。</p>
<h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><p>正如上述所说的，这种方式在第一次初设计时只考虑使用效果而没有考虑到运行效率，在后来的用户反馈中，我开始重视这个问题，并使用Instruments进行测试<br>性能测试从一进入界面起就开始不停的往下滑，那么利用<a href="https://github.com/yehot/YYFPSLabel" target="_blank" rel="external">YYFPS</a>测试到了的结果如下<br><img src="https://img.wxz.name/FPS%E6%9C%AA%E4%BC%98%E5%8C%96.png" alt="FPS未优化"><br>可以看到在满帧数为60的真机测试中，平均FPS只有30左右。<br>我接着开始测试每条代码运行时间<br><img src="https://img.wxz.name/%E6%9C%AA%E4%BC%98%E5%8C%96%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F2.png" alt="未优化加载方式2"><br>同样可以看到在代码加载中消耗了大量的时间。</p>
<h2 id="我对此的思考"><a href="#我对此的思考" class="headerlink" title="我对此的思考"></a>我对此的思考</h2><p>在优化中，我尝试了很多方式，但我发现最关键的问题FPS的帧数还是没有解决，思考后，研究了<a href="https://github.com/johnil/VVeboTableViewDemo" target="_blank" rel="external">VVeboTableViewDemo</a>，决定自己用代码重构一遍校园说说</p>
<h1 id="重构后"><a href="#重构后" class="headerlink" title="重构后"></a>重构后</h1><p>先放界面<br><img src="https://img.wxz.name/IMG_0528.png?imageView2/2/w/300/h/600/interlace/0/q/41" alt="IMG_0528"><br>再者放FPS测试图<br><img src="https://img.wxz.name/%E5%8A%A0%E5%85%A5%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.png" alt="加入按需加载"><br>测试结果如上，可以看到在高速滑动中，FPS从之前的30左右已经提升到50左右。下一步我从加载图片中的方式入手，这样如果在高速滑动中不加载图片，只在低速或者点击屏幕时加载平均FPS可以达到55.</p>
<h2 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h2><p><img src="https://img.wxz.name/TableView-2.png" alt="TableVie"><br>首先我新建了两个Model类，分别用来处理说说的数据，和评论的数据<br>从主界面进入到说说界面，首先会从MomentsViewController的viewDidLoad方法，加载momentsTableView类<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">momentsTableView = [[MomentsTableView alloc] initWithFrame:self.view.bounds style:UITableViewStylePlain];</div><div class="line">[self.view addSubview:momentsTableView];</div></pre></td></tr></table></figure></p>
<p>在momentsTableView初始化中会调用[self loadData:JSONDic];方法，加载之前使用get请求从服务端得到了说说数据，接着将每组数据传给MomentsCell，并调用其draw方法绘制界面<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)drawCell:(MomentsCell *)cell withIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    MomentsModel *data = [datas objectAtIndex:indexPath.section];</div><div class="line">    cell.selectionStyle = UITableViewCellSelectionStyleNone;</div><div class="line">    cell.LikesData = likeDatas;</div><div class="line">    cell.data = data;</div><div class="line">    [cell draw];</div><div class="line">    [cell loadPhoto];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于高度适配的问题，因为是在momentsTableView的初始化方法中用Model解析了数据，在数据解析的时候，我也一并在Model中计算了每条说说的高度，所以在heightForRowAtIndexPath方法中，我直接可以设置好每行的高度，在方法中也不用进行逻辑判断高度<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    MomentsModel *momentsModel=datas[indexPath.section];</div><div class="line">    <span class="keyword">return</span> SYReal(<span class="number">70</span>)+momentsModel.textHeight+momentsModel.photoHeight+SYReal(<span class="number">40</span>)+momentsModel.commentsHeight;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于不同屏幕大小的问题，我用了一个宏，会以iphone 6plus屏幕分辨率为基准进行计算<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SYReal(value) ((value)/414.0f*[UIScreen mainScreen].bounds.size.width)</span></div></pre></td></tr></table></figure></p>
<h2 id="后续的想法"><a href="#后续的想法" class="headerlink" title="后续的想法"></a>后续的想法</h2><p>虽然优化达到了自己满意的效果，但是觉得知识体系上还有很多欠缺，主要集中在多线程GCD等方式中，还不能达到稳定60FPS的效果，争取在知识有一定积累后再来进行优化。</p>
<p><a href="https://github.com/isnine/HutHelper-Open.git" target="_blank" rel="external">工大助手源代码</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[202. Happy Number]]></title>
      <url>/2017/02/05/LeetCode202/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1<br><a id="more"></a></p>
<h1 id="题解-Byself"><a href="#题解-Byself" class="headerlink" title="题解 Byself"></a>题解 Byself</h1><p>额外写了两个函数<br>一个用来计算每位数字的平方和<br>一个用来判断是否=1<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">int</span> a=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> temp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> all=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n&lt;<span class="number">10</span>) &#123;</div><div class="line">            <span class="keyword">return</span> all+<span class="built_in">pow</span>(n, <span class="number">2</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            all+=<span class="built_in">pow</span>((n%<span class="number">10</span>),<span class="number">2</span>);</div><div class="line">            <span class="keyword">return</span> num(n/<span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isHapp</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>) &#123;</div><div class="line">            a=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            all=<span class="number">0</span>;</div><div class="line">            isHapp(num(n));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        isHapp(n);</div><div class="line">        <span class="keyword">if</span> (a==<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>后来看了别人的解法，果然三个可以放在一个里面。。。</p>
<h1 id="优解"><a href="#优解" class="headerlink" title="优解"></a>优解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (n==<span class="number">1</span>)     <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span>(n==<span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            <span class="keyword">while</span> (n) &#123;</div><div class="line">                sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</div><div class="line">                n/=<span class="number">10</span>;</div><div class="line">            &#125;</div><div class="line">            n=sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[405. Convert a Number to Hexadecimal]]></title>
      <url>/2017/02/02/LeetCode405/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.</p>
<p>Note:</p>
<p>All letters in hexadecimal (a-f) must be in lowercase.<br>The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character ‘0’; otherwise, the first character in the hexadecimal string will not be the zero character.<br>The given number is guaranteed to fit within the range of a 32-bit signed integer.<br>You must not use any method provided by the library which converts/formats the number to hex directly.</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>优解中采用的方法是直接将十进制转换为2进制<br>然后再变成十六进制</p>
<h1 id="题解-优解"><a href="#题解-优解" class="headerlink" title="题解 优解"></a>题解 优解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">toHex</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">"0"</span>;</div><div class="line">        <span class="built_in">string</span> HEX = <span class="string">"0123456789abcdef"</span>;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">int</span> time=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (num &amp;&amp; time++&lt;<span class="number">8</span>) &#123;<span class="comment">//题目要求32位整数范围</span></div><div class="line">            result=HEX[num&amp;<span class="number">15</span>]+result;</div><div class="line">            num&gt;&gt;=<span class="number">4</span>;<span class="comment">//将十进制转换为二进制，然后转换为16进制，举例，十进制15，转换为二进制1111，再转为十六进制f，然后右移4位</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[415. Add Strings]]></title>
      <url>/2017/02/01/LeetCode415/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p>
<p>Note:</p>
<p>The length of both num1 and num2 is &lt; 5100.<br>Both num1 and num2 contains only digits 0-9.<br>Both num1 and num2 does not contain any leading zero.<br>You must not use any built-in BigInteger library or convert the inputs to integer directly.</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>按位依次加上去<br>比如 1234   567这两个数<br>先算 4+7   结果是11，那么保留个位1，把十位1用carry存下来     ———&gt;1<br>然后继续3+6+carry  结果是10   同理保留0，1存下来到xiayiwei   ——-&gt;0<br>2+5+1                                                  ——-&gt;8<br>1                                                      ——–&gt;1<br>得到1081，然后把数组反过来就是1801，最终结果</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addStrings</span><span class="params">(<span class="built_in">string</span> num1, <span class="built_in">string</span> num2)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i=num1.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> j=num2.size()<span class="number">-1</span>;</div><div class="line">        <span class="built_in">string</span> res=<span class="string">""</span>;</div><div class="line">        <span class="keyword">int</span> carry=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;i&gt;=<span class="number">0</span>||j&gt;=<span class="number">0</span>||carry;i--,j-- ) &#123;</div><div class="line">            <span class="keyword">int</span> num=<span class="number">0</span>;</div><div class="line">             <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)   num+=(num1[i]-<span class="string">'0'</span>);</div><div class="line">             <span class="keyword">if</span>(j&gt;=<span class="number">0</span>)   num+=(num2[j]-<span class="string">'0'</span>);</div><div class="line">            num+=carry;</div><div class="line">            carry=num/<span class="number">10</span>;</div><div class="line">            num=num%<span class="number">10</span>;</div><div class="line">            res+=to_string(num);</div><div class="line">        &#125;</div><div class="line">        reverse(res.begin(),res.end());</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[268. Missing Number]]></title>
      <url>/2017/01/30/LeetCode268/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<p>For example,<br>Given nums = [0, 1, 3] return 2.</p>
<p>Note:<br>Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这题很简单，找到缺少的那个数字<br>思路有两种，第一是直接求和公式的和减去实际的和<br>第二种值得一提的就是用异位符做</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="求和公式做"><a href="#求和公式做" class="headerlink" title="求和公式做"></a>求和公式做</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> all=(nums.size()+<span class="number">1</span>)*(nums.size())/<span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> true_all=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a:nums)&#123;</div><div class="line">        true_all+=a;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> all-true_all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="异位符做"><a href="#异位符做" class="headerlink" title="异位符做"></a>异位符做</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> result = nums.size();</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</div><div class="line">        result ^= num;</div><div class="line">        result ^= i;</div><div class="line">        i++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[349. Intersection of Two Arrays]]></title>
      <url>/2017/01/22/LeetCode349/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].</p>
<p>Note:<br>Each element in the result must be unique.<br>The result can be in any order.<br><a id="more"></a></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目要求将nums2中的元素如果在nums1中也出现过，则返回这个元素，元素唯一，返回时可以无序，我的想法依旧是依靠数组的下标来做</p>
<h1 id="题解-Byself-6ms-Top95"><a href="#题解-Byself-6ms-Top95" class="headerlink" title="题解 Byself 6ms Top95%"></a>题解 Byself 6ms Top95%</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;drum(<span class="number">1000</span>);</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solution;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums1.size(); i++) &#123;</div><div class="line">            drum[nums1[i]]=<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums2.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span>(drum[nums2[i]]==<span class="number">1</span>) &#123;</div><div class="line">                solution.push_back(nums2[i]);</div><div class="line">                drum[nums2[i]]++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> solution;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="优解-6ms"><a href="#优解-6ms" class="headerlink" title="优解 6ms"></a>优解 6ms</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; intersection(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2) &#123;</div><div class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s(nums1.begin(), nums1.end());</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; out;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : nums2)</div><div class="line">        <span class="keyword">if</span> (s.erase(x))</div><div class="line">            out.push_back(x);</div><div class="line">    <span class="keyword">return</span> out;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为不熟悉STL，所以下面的一些函数不会用，但是后来搜索了下，觉得这样确实比我那样的空间复杂度要优点</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[383. Ransom Note]]></title>
      <url>/2017/01/22/LeetCode383/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.<br>Each letter in the magazine string can only be used once in your ransom note.<br>Note:<br>You may assume that both strings contain only lowercase letters.<br>example</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false</div><div class="line">canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false</div><div class="line">canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>题目意思是求前一个字符串是否被后一个包含，第一想法就是直接参考桶排序里面的做法，第一个循环把字符转为int放进数组下标里面，第二个循环直接减，如果小于0就返回false，反之true</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canConstruct</span><span class="params">(<span class="built_in">string</span> ransomNote, <span class="built_in">string</span> magazine)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> drum[<span class="number">50</span>]=&#123;<span class="number">0</span>&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; magazine.size(); i++) &#123;</div><div class="line">            <span class="keyword">int</span> a=magazine[i]<span class="number">-96</span>;</div><div class="line">            drum[a]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; ransomNote.size(); i++) &#123;</div><div class="line">            <span class="keyword">int</span> a=ransomNote[i]<span class="number">-96</span>;</div><div class="line">            drum[a]--;</div><div class="line">            <span class="keyword">if</span> (drum[a]&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[453. Minimum Moves to Equal Array Elements]]></title>
      <url>/2017/01/20/LeetCode453/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.</p>
<blockquote>
<p>Input:<br>[1,2,3]<br>Output:<br>3<br>Explanation:<br>Only three moves are needed (remember each move increments two elements):<br>[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]</p>
</blockquote>
<a id="more"></a>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这题说起来很简单，题目意思就是给一个n元素的数组，每次给n-1个数组+1.求最后全部相等需要几步<br>逆向思维，直接每步减1即可<br>然后我作死想要正向写。结果巨坑。。。。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">        int minMoves(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int mix=nums[0];</div><div class="line">        int temp=0;</div><div class="line">        for (int i=0; i&lt;nums.size(); i++)</div><div class="line">            if (mix&gt;nums[i])  mix=nums[i];</div><div class="line">        for (int i=0; i&lt;nums.size(); i++) &#123;</div><div class="line">            if (mix&lt;nums[i])  temp=temp+nums[i]-mix;</div><div class="line">        &#125;</div><div class="line">        return temp; </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">int temp=0;</div><div class="line">int minMoves(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    int add;</div><div class="line">    if (nums[0]==nums[nums.size()-1])   return temp;</div><div class="line">    add=nums[nums.size()-1]-nums[nums.size()-2];</div><div class="line">    temp=temp+add;</div><div class="line">    for (int i=0; i&lt;nums.size()-1; i++)  nums[i]+=add;</div><div class="line">    return minMoves(nums);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接给了一个[1,20000000]的数据，电脑直接崩了<br>然后我学聪明了，用while写了个差值相加，这个数据过了<br>结果下面个数据超时了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">int temp=0;</div><div class="line">int minMoves(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">    sort(nums.begin(), nums.end());</div><div class="line">    int add,j=2;</div><div class="line">    if (nums[0]==nums[nums.size()-1])   return temp;</div><div class="line">    while (!(nums[nums.size()-1]-nums[nums.size()-j])) &#123;</div><div class="line">        j++;</div><div class="line">    &#125;</div><div class="line">    add=nums[nums.size()-1]-nums[nums.size()-j];</div><div class="line">    temp=temp+add;</div><div class="line">    for (int i=0; i&lt;nums.size()-1; i++)  nums[i]+=add;</div><div class="line">    return minMoves(nums);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>毫无疑问，while+for直接超时</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[389. Find the Difference]]></title>
      <url>/2017/01/16/LeetCode389/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.<br>Example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Input:</div><div class="line">s = &quot;abcd&quot;</div><div class="line">t = &quot;abcde&quot;</div><div class="line"></div><div class="line">Output:</div><div class="line">e</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&apos;e&apos; is the letter that was added.</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这一道题和前面一道找出一串数字中只出现过一次的数字很像<br>首先将两个字符串加在一起<br>如果只出现过一次，那么用XOF就可以找出</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</div><div class="line">                s=s+t;</div><div class="line">        <span class="keyword">int</span> a=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> temp:s) a^=temp;</div><div class="line">        <span class="keyword">return</span>  a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[448. Find All Numbers Disappeared in an Array]]></title>
      <url>/2017/01/13/LeetCode448/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements of [1, n] inclusive that do not appear in this array.</p>
<p>Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.<br>Example:</p>
<blockquote>
<p>Input:<br>[4,3,2,7,8,2,3,1]<br>Output:<br>[5,6]</p>
</blockquote>
<a id="more"></a>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>英语不好，一开始以为是给定一个数字，求出它最小值和最大值之间没有出现过得数字<br>后面，才知道是给定一个长为n的数组，求出[1,n]中没有出现过的数字<br>第一次上手做的时候，直接一个for双循环<br>毫无意义，超时了<br>后面百思不得其解<br>去寻找思路 结果发现居然可以利用数组的下标来记载数组是否出现</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; findDisappearedNumbers(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="keyword">int</span> len=nums.size();</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</div><div class="line">            <span class="keyword">int</span> index=<span class="built_in">abs</span>(nums[i])<span class="number">-1</span>;   <span class="comment">//记载存在的数</span></div><div class="line">            <span class="keyword">if</span>(nums[index]&gt;<span class="number">0</span>)           <span class="comment">//如果该数大于0，则使他为负数</span></div><div class="line">            nums[index]=<span class="number">-1</span>*nums[index];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//举个例子，如果输入1,3,3,4，那么这一步过后</span></div><div class="line">        <span class="comment">//下标为0,2,3的数将变成负数,也就是在下一步循环的时候，只剩下下标为1的数为正        </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i]&gt;<span class="number">0</span>) &#123;</div><div class="line">                res.emplace_back(i+<span class="number">1</span>);<span class="comment">//所以直接输出1+1=2, 得到结果</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[476. Number Complement]]></title>
      <url>/2017/01/12/LeetCode476/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.</p>
<p>Note:<br>The given integer is guaranteed to fit within the range of a 32-bit signed integer.<br>You could assume no leading zero bit in the integer’s binary representation.</p>
<blockquote>
<p>Example 1:<br>Input: 5<br>Output: 2<br>Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.<br>Example 2:<br>Input: 1<br>Output: 0<br>Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</p>
</blockquote>
<a id="more"></a>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这道题的意思是，给出一个正数，输出其反码<br>听起来很简单，我想都没想就^num,果然跪了<br>然后看别人的代码，看了半个小时跟着写二进制<br>最后自己想明白了<br>首先先补充一个知识点</p>
<h2 id="负数的二进制"><a href="#负数的二进制" class="headerlink" title="负数的二进制"></a>负数的二进制</h2><p>在计算中，负数的二进制以正数的补码形式显示<br>以5为例子<br>二进制:00000101<br>反码  :11111010<br>补码=反码+1=11111010+1=11111011</p>
<h2 id="继续分析"><a href="#继续分析" class="headerlink" title="继续分析"></a>继续分析</h2><p>如果直接输出^num，以5为例子<br>会马上得到11111010<br>它的符号位第一位是1，也就是负数<br>所以我们首先要将11111010转换成补码<br>11111010的反码是00000101<br>11111010的补码是00000101+1=00000110=6的负数<br>而实际上，我们要求出5的补码，也就是应该求出010=2，结果不对</p>
<h2 id="那应该怎么做呢"><a href="#那应该怎么做呢" class="headerlink" title="那应该怎么做呢"></a>那应该怎么做呢</h2><p>我们将我们要得到的数转换成二进制<br>假如是5，它的二进制是00000101.<br>我们需要做的是00000101^00000111=00000010=2<br>而如果是9，它的二进制是00001001<br>我们需要做的是00001001^00001111=00000110=6<br>找到规律了，得到其二进制的位数，然后将其与对应的二进制亦或即可</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> c = (num | (num &gt;&gt; <span class="number">1</span>));</div><div class="line">        c = (c | (c &gt;&gt; <span class="number">2</span>));</div><div class="line">        c = (c | (c &gt;&gt; <span class="number">4</span>));</div><div class="line">        c = (c | (c &gt;&gt; <span class="number">8</span>));</div><div class="line">        c = (c | (c &gt;&gt; <span class="number">16</span>));</div><div class="line">        <span class="keyword">return</span>  c^num;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个代码是根据所求的数字，将其不断右移，得到自身相匹配的二进制，来实现</p>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[463. Island Perimeter]]></title>
      <url>/2017/01/11/LeetCode463/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p>
<blockquote>
<p>[[0,1,0,0],<br> [1,1,1,0],<br> [0,1,0,0],<br> [1,1,0,0]]<br> Answer: 16<br>Explanation: The perimeter is the 16 yellow stripes in the image below:<br><img src="https://o90qqsid7.qnssl.com/14841137334133.jpg" alt=""><br><a id="more"></a></p>
</blockquote>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>题意是给出一个数组，1代表岛，0代表海，问岛的周长，一开始觉得很复杂，后来想到直接每个岛算4周长，然后每一个相连减少2，即可算出</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Byself-146-ms"><a href="#Byself-146-ms" class="headerlink" title="Byself 146 ms"></a>Byself 146 ms</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> round=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;grid.size(); i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;grid[<span class="number">0</span>].size(); j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(grid[i][j]==<span class="number">1</span>)</div><div class="line">                &#123;</div><div class="line">                    count++;</div><div class="line">                    <span class="keyword">if</span>(i!=grid.size()<span class="number">-1</span>&amp;&amp;grid[i+<span class="number">1</span>][j]==<span class="number">1</span>) round++;</div><div class="line">                    <span class="keyword">if</span>(j!=grid[<span class="number">0</span>].size()<span class="number">-1</span>&amp;&amp;grid[i][j+<span class="number">1</span>]==<span class="number">1</span>) round++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count*<span class="number">4</span>-round*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>第一次提交的时候出错了，原因是if里面判断我直接这样写，没有考虑到数组会越界<br><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(grid[i+<span class="number">1</span>][j]==<span class="number">1</span>) round++;</div><div class="line"><span class="keyword">if</span>(grid[i][j+<span class="number">1</span>]==<span class="number">1</span>) round++;</div></pre></td></tr></table></figure></p>
<h2 id="优解-132ms"><a href="#优解-132ms" class="headerlink" title="优解 132ms"></a>优解 132ms</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter2</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(grid.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>, repeat = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.size(); i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].size(); j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(!grid[i][j]) <span class="keyword">continue</span>;</div><div class="line">            cnt++;</div><div class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j]) repeat++;</div><div class="line">            <span class="keyword">if</span>(j!=<span class="number">0</span> &amp;&amp; grid[i][j<span class="number">-1</span>]) repeat++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cnt*<span class="number">4</span> - repeat*<span class="number">2</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="优解-DFS-149ms"><a href="#优解-DFS-149ms" class="headerlink" title="优解_DFS 149ms"></a>优解_DFS 149ms</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; b, <span class="keyword">int</span> *ans, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= b.size() || j &lt; <span class="number">0</span> || j &gt;= b[<span class="number">0</span>].size() || b[i][j] != <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    b[i][j] = <span class="number">-1</span>; <span class="comment">// mark it as visited</span></div><div class="line">    *ans += (j + <span class="number">1</span> &gt;= b[<span class="number">0</span>].size() || b[i][j+<span class="number">1</span>] == <span class="number">0</span>) <span class="comment">/* right */</span> +</div><div class="line">    (i - <span class="number">1</span> &lt; <span class="number">0</span>            || b[i<span class="number">-1</span>][j] == <span class="number">0</span>) <span class="comment">/* top */</span> +</div><div class="line">    (j - <span class="number">1</span> &lt; <span class="number">0</span>            || b[i][j<span class="number">-1</span>] == <span class="number">0</span>) <span class="comment">/* left */</span> +</div><div class="line">    (i + <span class="number">1</span> &gt;= b.size()    || b[i+<span class="number">1</span>][j] == <span class="number">0</span>) <span class="comment">/* bottom */</span>;</div><div class="line">    dfs(b, ans, i, j + <span class="number">1</span>);</div><div class="line">    dfs(b, ans, i - <span class="number">1</span>, j);</div><div class="line">    dfs(b, ans, i, j - <span class="number">1</span>);</div><div class="line">    dfs(b, ans, i + <span class="number">1</span>, j);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, i, j;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; grid.size(); i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].size(); j++) &#123;</div><div class="line">            <span class="keyword">if</span> (grid[i][j]) &#123;</div><div class="line">                dfs(grid, &amp;ans, i, j);</div><div class="line">                <span class="keyword">return</span> ans;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[设置Github代理来提高下载速度]]></title>
      <url>/2017/01/10/ss-github/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实在受不了github clone时4kb/s的龟速，所以尝试用代理的方式来加速</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Mac端和Win端，首先先开启SS。标准就是此时打开Facebook等国外网页已经可以正常浏览了</p>
<p>然后在终端中输入以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global http.proxy http://127.0.0.1:1080</div><div class="line">git config --global https.proxy https://127.0.0.1:1080</div></pre></td></tr></table></figure></p>
<p>其中1080是自己SS的端口，根据自己的不同设置<br><img src="https://img.wxz.name/14840553771277.jpg" alt=""></p>
<p>比如像我，就是1087<br>设置完毕后就可以直接使用了<br><a id="more"></a></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>以上命令是全局设置，也就是只要说时走git clone哪怕不是github，像coding之类的也会走。这样很麻烦<br>我们可以先通过以下命令取消刚才的全局设置<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global --unset http.proxy</div><div class="line">git config --global --unset https.proxy</div></pre></td></tr></table></figure></p>
<p>然后通过以下命令，设置只有github的时候才走代理<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git config --global http.http://github.com.proxy http://127.0.0.1:1080</div><div class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1080</div></pre></td></tr></table></figure></p>
<h1 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h1><p>以上命令本人亲测成功，如果有问题的地方可以浏览</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[412. Fizz Buzz]]></title>
      <url>/2017/01/10/LeetCode412/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Write a program that outputs the string representation of numbers from 1 to n.</p>
<p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.<br>Example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">n = 15,</div><div class="line"></div><div class="line">Return:</div><div class="line">[</div><div class="line">    &quot;1&quot;,</div><div class="line">    &quot;2&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;4&quot;,</div><div class="line">    &quot;Buzz&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;7&quot;,</div><div class="line">    &quot;8&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;Buzz&quot;,</div><div class="line">    &quot;11&quot;,</div><div class="line">    &quot;Fizz&quot;,</div><div class="line">    &quot;13&quot;,</div><div class="line">    &quot;14&quot;,</div><div class="line">    &quot;FizzBuzz&quot;</div><div class="line">]</div></pre></td></tr></table></figure></p>
 <a id="more"></a>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Byself-3ms"><a href="#Byself-3ms" class="headerlink" title="Byself 3ms"></a>Byself 3ms</h2> <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> class Solution &#123;</div><div class="line"> public:</div><div class="line">    vector&lt;string&gt; fizzBuzz(int n) &#123;</div><div class="line">        vector&lt;string&gt; temp(n);</div><div class="line">        for (int i=1; i&lt;=n; i++) &#123;</div><div class="line">            if (i%3==0&amp;&amp;i%5==0) &#123;</div><div class="line">                temp[i-1]+=string(&quot;FizzBuzz&quot;);</div><div class="line">            &#125;</div><div class="line">            else if (i%3==0)&#123;</div><div class="line">                temp[i-1]+=string(&quot;Fizz&quot;);</div><div class="line">            &#125;</div><div class="line">            else if (i%5==0)&#123;</div><div class="line">                temp[i-1]+=string(&quot;Buzz&quot;);</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                temp[i-1]+=to_string(i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[461. Hamming Distance]]></title>
      <url>/2017/01/10/LeetCode461/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p>
<p>Given two integers x and y, calculate the Hamming distance.<br>Note:<br>0 ≤ x, y &lt; 231.</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Input: x = 1, y = 4</div><div class="line"></div><div class="line">Output: 2</div><div class="line"></div><div class="line">Explanation:</div><div class="line">1   (0 0 0 1)</div><div class="line">4   (0 1 0 0)</div><div class="line">       ↑   ↑</div><div class="line"></div><div class="line">The above arrows point to positions where the corresponding bits are different.</div></pre></td></tr></table></figure></p>
 <a id="more"></a>
<p><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="external">题目</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>题目意思是要找出两个数字转换成二进制后有几位不同<br>我直接想到用^运算符算出两个数字异或后的结果<br>然后统计有几个1就行了</p>
<h2 id="Byself"><a href="#Byself" class="headerlink" title="Byself"></a>Byself</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"> <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">d2b</span><span class="params">(<span class="keyword">int</span> d)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>( d )</div><div class="line">        &#123;</div><div class="line">            d2b(d/<span class="number">2</span>);</div><div class="line">            <span class="keyword">if</span>(d%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">                i++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp=x^y;</div><div class="line">        d2b(temp);</div><div class="line">        <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="优解"><a href="#优解" class="headerlink" title="优解"></a>优解</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> z = x^y;</div><div class="line">    <span class="keyword">int</span> count =<span class="number">0</span> ; </div><div class="line">    <span class="keyword">while</span>(z&gt;<span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(z%<span class="number">2</span>==<span class="number">1</span>)count++;</div><div class="line">    z=z/<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建Gogs]]></title>
      <url>/2017/01/09/Build-Gogs/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>之前写了些实验室的建议，结果今天老师找到我要我负责下我建议上面内容的实施<br>大概是利用学校内网服务器的高速，搭建Git，搭建各组论坛，搭建FTP空间<br>感觉自己挖了一个坑给自己跳，不管怎么样先做吧</p>
<h1 id="选择服务器"><a href="#选择服务器" class="headerlink" title="选择服务器"></a>选择服务器</h1><p>因为国内的VPS自己用来搭建博客了，所以在DigitalOcean新建了一个VPS<br>架着VPS配置服务器测试<br>服务器的话我直接选择Ubuntu14，毕竟熟悉点，服务器这种东西，感觉版本越高坑越多</p>
<h1 id="配置基本环节"><a href="#配置基本环节" class="headerlink" title="配置基本环节"></a>配置基本环节</h1><p>首先两条命令，更新包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get upgrade</div></pre></td></tr></table></figure></p>
<p>新建一个Git用户，如果直接用root用户建的话坑多<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo adduser git </div><div class="line">su git//切换到git用户</div><div class="line">cd ~  //进入用户git根目录</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install git //安装git</div><div class="line">git --version //检查git是否安装成功</div></pre></td></tr></table></figure>
<blockquote>
<p>这里如果提示无权限，或者不能使用sudo命令的话<br>编辑/etc/sudoers文件 在root ALL=(ALL:ALL) ALL 这行下添加git ALL=(ALL:ALL) ALL</p>
</blockquote>
<h1 id="安装Mysql数据库"><a href="#安装Mysql数据库" class="headerlink" title="安装Mysql数据库"></a>安装Mysql数据库</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install mysql-server //安装mysql数据库    账户：root  密码：********</div><div class="line">mysql --version //检查mysql版本判断是否安装成功</div><div class="line">mysql -u root -p</div><div class="line">mysql&gt; SET GLOBAL storage_engine = &apos;InnoDB&apos;;</div><div class="line">mysql&gt; CREATE DATABASE gogs CHARACTER SET utf8 COLLATE utf8_bin;</div><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON gogs.* TO ‘root’@‘localhost’ IDENTIFIED BY ‘itadmin’;</div><div class="line">mysql&gt; FLUSH PRIVILEGES;</div><div class="line">mysql&gt; QUIT；</div></pre></td></tr></table></figure>
<h1 id="安装golang环境"><a href="#安装golang环境" class="headerlink" title="安装golang环境"></a>安装golang环境</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo mkdir goapp //go应用安装目录</div><div class="line">sudo wget https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz</div><div class="line">tar -xzvf go1.7.4.linux-amd64.tar.gz -C /var/opt/</div></pre></td></tr></table></figure>
<p>然后可以在/var/opt/的目录下发现一个go文件夹，这里包含了golang环境文件</p>
<p>配置golang环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">echo export GOROOT=/var/opt/go &gt;&gt; .bashrc</div><div class="line">echo export GOBIN=$GOROOT/bin &gt;&gt; .bashrc</div><div class="line">echo export GOARCH=amd64 &gt;&gt; .bashrc</div><div class="line">echo export GOOS=linux &gt;&gt; .bashrc</div><div class="line">echo export GOPATH=/home/gogs/goapp &gt;&gt; .bashrc</div><div class="line">echo export PATH=.:$PATH:$GOBIN &gt;&gt; .bashrc</div></pre></td></tr></table></figure></p>
<p>使用环境生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">source  .bashrc</div></pre></td></tr></table></figure></p>
<h1 id="安装gogs"><a href="#安装gogs" class="headerlink" title="安装gogs"></a>安装gogs</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo mkdir repositories//创建仓库目录</div><div class="line">cd goapp </div><div class="line">sudo wget https://dl.gogs.io/gogs_v0.9.113_linux_amd64.tar.gz //下载gogs</div><div class="line">tar -xzvf  gogs_v0.9.113_linux_amd64.tar.gz //解压</div><div class="line">ls // 查看/home/git/goapp目录下文件和文件夹</div><div class="line">cd gogs //进入解压创建的文件gogs</div><div class="line">mkdir custom</div><div class="line">mkdir custom/conf //创建自定义配置文件目录</div><div class="line">sudo chmod -R 777 custom //修改custom文件夹权限</div><div class="line">mkdir log  //创建日志目录</div><div class="line">sudo chmod -R 777 log//修改log文件夹权限</div></pre></td></tr></table></figure>
<h1 id="启动gogs"><a href="#启动gogs" class="headerlink" title="启动gogs"></a>启动gogs</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /home/git/goapp/gogs</div><div class="line">./gogs web</div></pre></td></tr></table></figure>
<p>访问<a href="http://IP:3000/install来进行安装" target="_blank" rel="external">http://IP:3000/install来进行安装</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在mysql那主机地址我填了连不上去，所以直接用sqlite3做了</p>
<h1 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址"></a>相关地址</h1><p><a href="https://gogs.io" target="_blank" rel="external">Gogs官网</a></p>
<p>以上操作亲测成功，如果有遇到问题可以留言</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[344. Reverse String]]></title>
      <url>/2017/01/09/LeetCode344/</url>
      <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>Write a function that takes a string as input and returns the string reversed.<br>Given s = “hello”, return “olleh”.</p>
<p>Subscribe to see which companies asked this question<br> <a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Byself-19-ms"><a href="#Byself-19-ms" class="headerlink" title="Byself  19 ms"></a>Byself  19 ms</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> a=s;</div><div class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--,j++)</div><div class="line">        &#123;</div><div class="line">            a[j]=s[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>第四行尝试直接string a;<br>发现会无法输出结果，暂时还没理解明白</p>
</blockquote>
<h2 id="优解-13-ms"><a href="#优解-13-ms" class="headerlink" title="优解  13 ms"></a>优解  13 ms</h2><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = s.size() - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line">            swap(s[i++], s[j--]); </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[大二寒假日常记录]]></title>
      <url>/2017/01/09/2016WinterVaction/</url>
      <content type="html"><![CDATA[<p>点点滴滴记录每天的日常学习与阅读记录<br><a id="more"></a></p>
<h1 id="大二寒假日常记录"><a href="#大二寒假日常记录" class="headerlink" title="大二寒假日常记录"></a>大二寒假日常记录</h1><table>
<thead>
<tr>
<th style="text-align:left">日期</th>
<th style="text-align:left">项目</th>
<th style="text-align:left">算法</th>
<th style="text-align:left">阅读与生活</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.6</td>
<td style="text-align:left">工大助手-主界面修改</td>
<td style="text-align:left"></td>
<td style="text-align:left">假期开始</td>
</tr>
<tr>
<td style="text-align:left">1.7</td>
<td style="text-align:left">工大助手-电费界面修改</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.8</td>
<td style="text-align:left">工大助手-修改了图标</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.9</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-139,344</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.10</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-461</td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">1.11</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-412,463</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.12</td>
<td style="text-align:left">工大助手-重构考试查询/网络</td>
<td style="text-align:left">LeetCode-476</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.13</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-448</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.14</td>
<td style="text-align:left">工大助手-校园说说显示</td>
<td style="text-align:left">LeetCode-448</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.15</td>
<td style="text-align:left">工大助手-校园说说发表</td>
<td style="text-align:left">LeetCode-371</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.16</td>
<td style="text-align:left">工大助手-二手市场显示</td>
<td style="text-align:left">LeetCode-389</td>
<td style="text-align:left">《计算机网络》</td>
</tr>
<tr>
<td style="text-align:left">1.17</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">心情不好没干事</td>
</tr>
<tr>
<td style="text-align:left">1.18</td>
<td style="text-align:left">工大助手-二手市场详细显示</td>
<td style="text-align:left">LeetCode-485</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.19</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-283</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.20</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-453</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.21</td>
<td style="text-align:left">Face-开始构思</td>
<td style="text-align:left"></td>
<td style="text-align:left">夜宵</td>
</tr>
<tr>
<td style="text-align:left">1.22</td>
<td style="text-align:left">Face-集成Opencv</td>
<td style="text-align:left">LeetCode-383,389</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.23</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-171,387</td>
<td style="text-align:left">《iOS编程》</td>
</tr>
<tr>
<td style="text-align:left">1.24</td>
<td style="text-align:left">修复工大助手Bug</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">1.25</td>
<td style="text-align:left">写工大助手开源版本</td>
<td style="text-align:left">LeetCode-242,169,409,217,350</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.26</td>
<td style="text-align:left">Face-Model层</td>
<td style="text-align:left">LeetCode-401</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">1.27</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">过年</td>
</tr>
<tr>
<td style="text-align:left">1.28</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">过年</td>
</tr>
<tr>
<td style="text-align:left">1.29</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">过年</td>
</tr>
<tr>
<td style="text-align:left">1.30</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-268</td>
<td style="text-align:left">过年</td>
</tr>
<tr>
<td style="text-align:left">1.31</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">心情不好散心</td>
</tr>
<tr>
<td style="text-align:left">2.1</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-415</td>
<td style="text-align:left">电影</td>
</tr>
<tr>
<td style="text-align:left">2.2</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-405</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2.3</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-326</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2.4</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">好像是出去玩了= =</td>
</tr>
<tr>
<td style="text-align:left">2.5</td>
<td style="text-align:left"></td>
<td style="text-align:left">LeetCode-202</td>
<td style="text-align:left">《iOS编程》</td>
</tr>
<tr>
<td style="text-align:left">2.6</td>
<td style="text-align:left">工大助手-成绩界面</td>
<td style="text-align:left">LeetCode-231</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2.7</td>
<td style="text-align:left">工大助手-成绩显示</td>
<td style="text-align:left">LeetCode-35</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2.8</td>
<td style="text-align:left">工大助手-失物招领</td>
<td style="text-align:left">LeetCode-53</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">2.8</td>
<td style="text-align:left">工大助手-通知界面</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="/2016/07/08/daytoday/">大一暑假日常记录</a></p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 假期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[136. Single Number]]></title>
      <url>/2017/01/09/LeetCode136/</url>
      <content type="html"><![CDATA[<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br> <a id="more"></a><br><a href="https://leetcode.com/problems/single-number/" target="_blank" rel="external">Single Number</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            num = num ^ nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<!--more-->
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>按照异或的原则  1001^0101=1101<br>可以得到A^A=0 A^A^1=1 A^B^A^B^C=C这样<br>得到这样的思路</p>
<h1 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h1><p>有考虑过两个for循环<br>通过判断数字出现几次<br>如果只出现一次，则返回该数字<br>结果提交时显示超时</p>
<h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</div><div class="line">        &#123;</div><div class="line">            num = num ^ nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">    <span class="comment">// insert code here...</span></div><div class="line">    Solution A;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>&#125;;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;A.singleNumber(a)&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> LeetCode </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序开发尝试]]></title>
      <url>/2016/12/29/WeChatDev/</url>
      <content type="html"><![CDATA[<h1 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h1><p>官网教程:<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/?t=20161222" target="_blank" rel="external">https://mp.weixin.qq.com/debug/wxadoc/dev/?t=20161222</a></p>
<p>开发工具:<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161222" target="_blank" rel="external">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161222</a></p>
<p>正式上线时间:2016年1月9日<br><a id="more"></a></p>
<h1 id="1-注册相关"><a href="#1-注册相关" class="headerlink" title="1.注册相关"></a>1.注册相关</h1><p>首先需要注意的<br><strong>个人用户无法申请微信小程序</strong></p>
<h2 id="1-1-允许申请的主体类型"><a href="#1-1-允许申请的主体类型" class="headerlink" title="1.1.允许申请的主体类型"></a>1.1.允许申请的主体类型</h2><p>企业，政府，媒体，其他组织</p>
<p>目前看来，和个人关联最大的应该是企业-个体工商户<br>需要提交营业执照进行注册<br><img src="https://img.wxz.name/14829898891211.jpg" alt=""></p>
<h1 id="2-使用相关"><a href="#2-使用相关" class="headerlink" title="2.使用相关"></a>2.使用相关</h1><p><strong>1.首先先确认一点，二维码必须通过扫才有效，从相册读取是无效</strong><br><strong>2.其次，平板端的微信无法运行小程序</strong></p>
<blockquote>
<p>以上为公测时的结果，至于正式上线后，会不会在手机应用列表里面也出现个应用图标，可以直接打开还未知。</p>
</blockquote>
<p><img src="https://img.wxz.name/14829907170320.jpg" alt=""></p>
<h2 id="2-1-打开小程序"><a href="#2-1-打开小程序" class="headerlink" title="2.1.打开小程序"></a>2.1.打开小程序</h2><p>打开微信-扫一扫-扫描二维码即可直接打开<br><img src="https://img.wxz.name/14829911098201.jpg" alt=""></p>
<blockquote>
<p>首先弹出一个加载动画，这个加载动画为商家的商标<br>每个商家注册后会有一个Appid，通过这个id开发的所有程序，加载动画都会为这个商标<br>然后加载完毕后(0.5-3s),会直接弹出</p>
</blockquote>
<h2 id="2-2-小程序的界面"><a href="#2-2-小程序的界面" class="headerlink" title="2.2.小程序的界面"></a>2.2.小程序的界面</h2><p><img src="https://img.wxz.name/14829913479794.jpg" alt=""></p>
<p>看起来和原生的App相同，但是不同的是 <strong>左滑会直接返回微信</strong><br>另外感觉不及原生的App一样流畅<br>但从已知开放的接口来看<br>做一个点菜小程序，买票小程序，结合自带的微信支付，是很简单的事情</p>
<h1 id="3-开发相关"><a href="#3-开发相关" class="headerlink" title="3.开发相关"></a>3.开发相关</h1><p>首先下载<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=20161222" target="_blank" rel="external">开发工具</a>，目前仅支持Win平台和Mac平台，对Linux不支持。</p>
<p>开发工具的名称是微信Web开发者工具<br>打开后首先需要扫码，用自己的微信账号登录，无论是否注册为开发者都可以登录<br><img src="https://img.wxz.name/14829916687653.jpg" alt=""><br>以上有图标的，是以注册的Appid导入的项目，没有图标以&lt;/&gt;显示的，是以无Appid导入的项目<br>两者不同的一点是，前者可以生成二维码在真机上扫码运行，后者不可</p>
<h2 id="3-1-添加项目"><a href="#3-1-添加项目" class="headerlink" title="3.1.添加项目"></a>3.1.添加项目</h2><p>点击添加项目后，会出现以下的界面<br><img src="https://img.wxz.name/14829917471743.jpg" alt=""></p>
<blockquote>
<p>需要注意的一点是，第一行AppID，首先需要商家将你的微信号添加为开发者<br>然后需要填写商家注册的Appid。<br><img src="https://img.wxz.name/14829919055869.jpg" alt=""></p>
</blockquote>
<h2 id="3-2-开发界面"><a href="#3-2-开发界面" class="headerlink" title="3.2.开发界面"></a>3.2.开发界面</h2><p>新建一个最基本的界面，以下每个文件的用法在官网的简易教程中有。<br><img src="https://img.wxz.name/14829919804138.jpg" alt=""></p>
<h2 id="3-3-浏览项目"><a href="#3-3-浏览项目" class="headerlink" title="3.3.浏览项目"></a>3.3.浏览项目</h2><p>如果我们已经是开发者，即可点击项目-浏览<br><img src="https://img.wxz.name/14829920604151.jpg" alt=""></p>
<h3 id="扫码"><a href="#扫码" class="headerlink" title="扫码"></a>扫码</h3><p>此时为生成一个二维码，开发者用手机直接扫码即可打开微信小程序<br><img src="https://img.wxz.name/14829920930336.jpg" alt=""></p>
<h3 id="默认的HelloWorld工程"><a href="#默认的HelloWorld工程" class="headerlink" title="默认的HelloWorld工程"></a>默认的HelloWorld工程</h3><p><img src="https://img.wxz.name/14829921578187.jpg" alt=""></p>
<h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>首先，个人用户无法申请小程序，那么小程序最小的运营单位也是团体，而不是个人。<br>其次，小程序无法推送数据，按照张小龙的说法，适用的场所是即用既走，而二维码只能扫描不能从相册读取也说明了这点。<br>基于以上两点，我认为最普遍的使用场景应该是以下<br>对于政府，企业来说，取<a href="https://img.wxz.name/" target="_blank" rel="external">https://img.wxz.name/</a><br>对于个体经营商来说，只需要在桌面上放一个二维码，客户即可扫码，然后打开菜单点餐，接着用微信支付付款买单。轻松方便</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h1><p>部分微信小程序界面浏览<br><img src="https://img.wxz.name/14829939575920.jpg" alt=""><br><img src="https://img.wxz.name/14829939648406.jpg" alt=""><br><img src="https://img.wxz.name/14829939713349.jpg" alt=""><br><img src="https://img.wxz.name/14829939975292.jpg" alt=""><br><img src="https://img.wxz.name/14829940246574.jpg" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[App 隐私政策网址(URL)]]></title>
      <url>/2016/12/08/iOS-privacy-cn/</url>
      <content type="html"><![CDATA[<p> 本软件尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本软件会按照本隐私权政策的规定使用和披露您的个人信息。但本软件将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本软件不会将这些信息对外披露或向第三方提供。本软件会不时更新本隐私权政策。您在同意本软件服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本软件服务使用协议不可分割的一部分。<br>    1.适用范围<br>    a)在您使用本软件网络服务，本软件自动接收并记录的您的手机上的信息，包括但不限于您的健康数据、使用的语言、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；<br>    2.信息的使用<br>    a)在获得您的数据之后，本软件会将其上传至服务器，以生成您的排行榜数据，以便您能够更好地使用服务。<br>    3.信息披露<br>    a)本软件不会将您的信息披露给不受信任的第三方。<br>    b)根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；<br>    c)如您出现违反中国有关法律、法规或者相关规则的情况，需要向第三方披露；<br>    4.信息存储和交换本软件收集的有关您的信息和资料将保存在本软件及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本软件收集信息和资料所在地的境外并在境外被访问、存储和展示。<br>    5.信息安全<br>    a)在使用本软件网络服务进行网上交易时，您不可避免的要向交易对方或潜在的交易对方披露自己的个人信息，如联络方式或者邮政地址。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，请您立即联络本软件客服，以便本软件采取相应措施。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android提纲复习]]></title>
      <url>/2016/11/22/ReviewAndroid/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>自己写的考试提纲的答案，仅供参考，如有错误欢迎指正<br><a id="more"></a></p>
<h1 id="卷子结构"><a href="#卷子结构" class="headerlink" title="卷子结构"></a>卷子结构</h1><p>一、选择题（30分，15个）<br>二、填空题（30分，30空）<br>三、判断题（10分，10个）<br>四、简答题（10分，2个）<br>五、应用题（20分，4小题）</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h3 id="1-ADT的主要功能是什么？"><a href="#1-ADT的主要功能是什么？" class="headerlink" title="1.ADT的主要功能是什么？"></a>1.ADT的主要功能是什么？</h3><p>ADT(Android Development ToolKit),安装这个插件可以用于开发android应用.</p>
<blockquote>
<p>配置好了java的开发环境，安装了开发Android的IDE，下载安装了Android SDK，但是Eclipse还没有和Android SDK进行关联，也就是它们现在是互相独立的，就好比枪和子弹分开了。为了使得Android应用的创建，运行和调试更加方便快捷，Android的开发团队专门针对Eclipse IDE定制了一个插件：Android Development Tools（ADT）。</p>
</blockquote>
<h3 id="2-安卓应用程序的结构："><a href="#2-安卓应用程序的结构：" class="headerlink" title="2.安卓应用程序的结构："></a>2.安卓应用程序的结构：</h3><p>1）字符串资源文件、颜色资源文件分别放在那个目录下？<br>字符串资源文件  - res/values<br>颜色资源文件   - res/values</p>
<p>2）图像资源文件放置在那个目录？<br>图像资源文件 - res/drawable<br>根据图片大小还将在drawable-hdpi,drawable-ldpi,drawable-mdpi,drawable-xhdpi,drawable0xxhdpi</p>
<p>3）布局文件放置在那个目录？<br>布局文件 - res/layout</p>
<p>4)Java源程序文件一般放置在那个目录？<br>Java源程序文件 - src</p>
<h3 id="3-安卓编译器生成的可发布的文件的扩展名是？"><a href="#3-安卓编译器生成的可发布的文件的扩展名是？" class="headerlink" title="3.安卓编译器生成的可发布的文件的扩展名是？"></a>3.安卓编译器生成的可发布的文件的扩展名是？</h3><p>.apk</p>
<h3 id="4-安卓编译器把所有的资源的ID号，放在那个Java文档中"><a href="#4-安卓编译器把所有的资源的ID号，放在那个Java文档中" class="headerlink" title="4.安卓编译器把所有的资源的ID号，放在那个Java文档中?"></a>4.安卓编译器把所有的资源的ID号，放在那个Java文档中?</h3><p>R.java</p>
<h3 id="5-安卓系统的框架，一般分为哪四层？资源管理器、活动管理器定义在哪个结构层？通知管理器notificationManager定义在哪个结构层？"><a href="#5-安卓系统的框架，一般分为哪四层？资源管理器、活动管理器定义在哪个结构层？通知管理器notificationManager定义在哪个结构层？" class="headerlink" title="5.安卓系统的框架，一般分为哪四层？资源管理器、活动管理器定义在哪个结构层？通知管理器notificationManager定义在哪个结构层？"></a>5.安卓系统的框架，一般分为哪四层？资源管理器、活动管理器定义在哪个结构层？通知管理器notificationManager定义在哪个结构层？</h3><p>1)安卓系统的框架，一般分为哪四层？<br>应用程序层,应用程序框架层,系统运行库层,linux核心层</p>
<p>2）资源管理器、活动管理器定义在哪个结构层？<br>应用程序框架层。</p>
<blockquote>
<p>这一层即是编写Google发布的核心应用时所使用的API框架，开发人员同样可以使用这些框架来开发自己的应用，这样便简化了程序开发的架构设计</p>
</blockquote>
<p>3)通知管理器notificationManager定义在哪个结构层？<br>应用程序框架层。</p>
<h3 id="6-一个安卓应用程序这只能有一个活动-Activity吗？同一时刻可以有多个UI交互界面可操作吗？"><a href="#6-一个安卓应用程序这只能有一个活动-Activity吗？同一时刻可以有多个UI交互界面可操作吗？" class="headerlink" title="6.一个安卓应用程序这只能有一个活动 Activity吗？同一时刻可以有多个UI交互界面可操作吗？"></a>6.一个安卓应用程序这只能有一个活动 Activity吗？同一时刻可以有多个UI交互界面可操作吗？</h3><p>不是,可以，</p>
<blockquote>
<p>通过碎片的方法？</p>
</blockquote>
<h3 id="7-安卓应用程序的Activity一般由哪两个最基本的部分组成？"><a href="#7-安卓应用程序的Activity一般由哪两个最基本的部分组成？" class="headerlink" title="7.安卓应用程序的Activity一般由哪两个最基本的部分组成？"></a>7.安卓应用程序的Activity一般由哪两个最基本的部分组成？</h3><p>java文件和xml布局文件</p>
<h3 id="8-活动处在Pause状态时，UI界面是不可见的吗？在Stop状态，活动在内存中不存在了吗？活动刚创建的时候，一般最早引发那个事件？"><a href="#8-活动处在Pause状态时，UI界面是不可见的吗？在Stop状态，活动在内存中不存在了吗？活动刚创建的时候，一般最早引发那个事件？" class="headerlink" title="8.活动处在Pause状态时，UI界面是不可见的吗？在Stop状态，活动在内存中不存在了吗？活动刚创建的时候，一般最早引发那个事件？"></a>8.活动处在Pause状态时，UI界面是不可见的吗？在Stop状态，活动在内存中不存在了吗？活动刚创建的时候，一般最早引发那个事件？</h3><p>可见,存在,OnCreate()事件</p>
<h3 id="9-安卓活动管理器，采用堆栈还是队列的方式管理活动？"><a href="#9-安卓活动管理器，采用堆栈还是队列的方式管理活动？" class="headerlink" title="9.安卓活动管理器，采用堆栈还是队列的方式管理活动？"></a>9.安卓活动管理器，采用堆栈还是队列的方式管理活动？</h3><p>堆栈</p>
<h3 id="10-把一个活动作为对话框显示时，能够引发调用活动的Stop事件吗？怎样在配置文件中设置？"><a href="#10-把一个活动作为对话框显示时，能够引发调用活动的Stop事件吗？怎样在配置文件中设置？" class="headerlink" title="10.把一个活动作为对话框显示时，能够引发调用活动的Stop事件吗？怎样在配置文件中设置？"></a>10.把一个活动作为对话框显示时，能够引发调用活动的Stop事件吗？怎样在配置文件中设置？</h3><p>不会<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">android:theme=&quot;@android:style/Theme.Dialog&quot;</div></pre></td></tr></table></figure></p>
<h3 id="11-意图对象Intent无法用于活动间的导航？"><a href="#11-意图对象Intent无法用于活动间的导航？" class="headerlink" title="11.意图对象Intent无法用于活动间的导航？"></a>11.意图对象Intent无法用于活动间的导航？</h3><p>可以</p>
<h3 id="12-写出一个导航到拨打指定电话的Intent。"><a href="#12-写出一个导航到拨打指定电话的Intent。" class="headerlink" title="12.写出一个导航到拨打指定电话的Intent。"></a>12.写出一个导航到拨打指定电话的Intent。</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</div><div class="line">intent.setData(Url.parse(<span class="string">"tel:10086"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<blockquote>
<p>需要加入权限 <uses-permission android:name="android.permission.CALL_PHONE"></uses-permission></p>
</blockquote>
<h3 id="13-线性布局容器，只能让控件从上到下排列？如何让线性布局容器，让控件从下到上排列"><a href="#13-线性布局容器，只能让控件从上到下排列？如何让线性布局容器，让控件从下到上排列" class="headerlink" title="13.*线性布局容器，只能让控件从上到下排列？如何让线性布局容器，让控件从下到上排列?"></a>13.*线性布局容器，只能让控件从上到下排列？如何让线性布局容器，让控件从下到上排列?</h3><p>通过自定义控件实现（ViewGroup），只不过在onLayout（）方法中需要实现自己的逻辑，基本的思想就是后一个插入的控件的坐标位置放于前一个控件的前面。</p>
<h3 id="14-所有控件都是从View继承来的吗？"><a href="#14-所有控件都是从View继承来的吗？" class="headerlink" title="14.所有控件都是从View继承来的吗？"></a>14.所有控件都是从View继承来的吗？</h3><p>是</p>
<h3 id="15-布局容器可以嵌套使用吗？"><a href="#15-布局容器可以嵌套使用吗？" class="headerlink" title="15.布局容器可以嵌套使用吗？"></a>15.布局容器可以嵌套使用吗？</h3><p>可以</p>
<h3 id="16-显示图像的控件是？显示文本的控件是？显示进度条的控件是？显示列表对象的控件是？显示输入框的控件是？"><a href="#16-显示图像的控件是？显示文本的控件是？显示进度条的控件是？显示列表对象的控件是？显示输入框的控件是？" class="headerlink" title="16.显示图像的控件是？显示文本的控件是？显示进度条的控件是？显示列表对象的控件是？显示输入框的控件是？"></a>16.显示图像的控件是？显示文本的控件是？显示进度条的控件是？显示列表对象的控件是？显示输入框的控件是？</h3><p>图像 - ImageView<br>文本 - TextView<br>进度条 - ProgressBar<br>列表 - ListView<br>输入框 - EditText</p>
<h3 id="17-简述单选对话框的创建和使用步骤。"><a href="#17-简述单选对话框的创建和使用步骤。" class="headerlink" title="17.简述单选对话框的创建和使用步骤。"></a>17.简述单选对话框的创建和使用步骤。</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">signProfile</span><span class="params">(<span class="keyword">int</span> array, <span class="keyword">int</span> title, <span class="keyword">final</span> TextView show)</span> </span>&#123;		<span class="keyword">final</span> String[] ssex = getResources().getStringArray(array);AlertDialog.Builder builder = <span class="keyword">new</span> Builder(SignProfileActivity.<span class="keyword">this</span>);		builder.setTitle(title);		builder.setCancelable(<span class="keyword">false</span>);         <span class="comment">// 表示选用的是单选的对话框，同理，若是多选或者列表对话框只需表示为</span>         <span class="comment">// 多选 ：setMultiChoiceItems(arg0, arg1, arg2)</span>         <span class="comment">// 列表 ：setItems(arg0, arg1)</span>		builder.setSingleChoiceItems(array, <span class="number">1</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;						<span class="meta">@Override</span>			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;                 <span class="comment">// 列表中任一个选项选中的回调函数</span>				picWhich = which;			&#125;		&#125;);			builder.setPositiveButton(R.string.comfirm, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;				<span class="meta">@Override</span>			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;                 <span class="comment">// 确认按键按下的回调函数</span>				show.setText(ssex[signSex]);		 &#125;		&#125;);		builder.setNegativeButton(R.string.cancel, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;						<span class="meta">@Override</span>			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;                 <span class="comment">// 取消按键按下的回调函数</span>				show.setText(ssex[<span class="number">1</span>]);			&#125;		&#125;);         <span class="comment">// 通过builder创建并显示对话框</span>		builder.create().show();		<span class="keyword">return</span> picWhich;	&#125;</div></pre></td></tr></table></figure>
<h3 id="18-简述多选选对话框的创建和使用步骤。"><a href="#18-简述多选选对话框的创建和使用步骤。" class="headerlink" title="18.简述多选选对话框的创建和使用步骤。"></a>18.简述多选选对话框的创建和使用步骤。</h3><p> 将setSingleChoiceItems方法改为setMultiChoiceItems(arg0, arg1, arg2)</p>
<h3 id="19-简述复选对话框的创建和使用步骤。"><a href="#19-简述复选对话框的创建和使用步骤。" class="headerlink" title="19.简述复选对话框的创建和使用步骤。"></a>19.简述复选对话框的创建和使用步骤。</h3><p>将setSingleChoiceItems改为setItems(CharSequence[] arg0, OnClickListener arg1)</p>
<h3 id="20-怎样弹出上下文菜单COntextMenu？简述上下文菜单的建立过程。"><a href="#20-怎样弹出上下文菜单COntextMenu？简述上下文菜单的建立过程。" class="headerlink" title="20.怎样弹出上下文菜单COntextMenu？简述上下文菜单的建立过程。"></a>20.怎样弹出上下文菜单COntextMenu？简述上下文菜单的建立过程。</h3><p>长按弹出。<br>建立流程:<br>1)在Activity中使用上下文菜单，复写onCreateContextMenu() 和 onContextItemSelected()方法；<br>2)为视图控件View中注册上下文菜单，使用registerForContextMenu（View）方法。<br>3)在onCreateContextMenu(…ContextMenu menu)中添加菜单项menu.add(…)；<br>4)在onContextItemSelected()中通过设置菜单的id来实现菜单子项的监听。<br><a href="http://www.cnblogs.com/codingmyworld/archive/2011/08/27/2155521.html" target="_blank" rel="external">详细过程</a></p>
<h3 id="21-选项菜单Menu是怎样弹出的？了解选项菜单文件的格式。"><a href="#21-选项菜单Menu是怎样弹出的？了解选项菜单文件的格式。" class="headerlink" title="21.选项菜单Menu是怎样弹出的？了解选项菜单文件的格式。"></a>21.选项菜单Menu是怎样弹出的？了解选项菜单文件的格式。</h3><p>点击手机Menu键</p>
<blockquote>
<p>了解选项菜单文件的格式(这个是答什么？)</p>
</blockquote>
<h3 id="22-创建toast需要使用其静态方法是？可以创建自定义toast吗？"><a href="#22-创建toast需要使用其静态方法是？可以创建自定义toast吗？" class="headerlink" title="22.创建toast需要使用其静态方法是？可以创建自定义toast吗？"></a>22.创建toast需要使用其静态方法是？可以创建自定义toast吗？</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Toast.makeText(FirstActivity.<span class="keyword">this</span>,<span class="string">"you clicked button 1"</span>,Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<pre><code>可以自定义，[自定义的方法](http://www.cnblogs.com/salam/archive/2010/11/10/1873654.html)
</code></pre><h3 id="23-通知对象notification，可以设置让手机振动吗？可以设置让手机的指示灯闪烁红色吗？"><a href="#23-通知对象notification，可以设置让手机振动吗？可以设置让手机的指示灯闪烁红色吗？" class="headerlink" title="23.通知对象notification，可以设置让手机振动吗？可以设置让手机的指示灯闪烁红色吗？"></a>23.通知对象notification，可以设置让手机振动吗？可以设置让手机的指示灯闪烁红色吗？</h3><p>可以，<a href="http://www.cnblogs.com/xy95/p/5870040.html" target="_blank" rel="external">方法</a></p>
<h3 id="24-简述通知对象的使用步骤。"><a href="#24-简述通知对象的使用步骤。" class="headerlink" title="24.简述通知对象的使用步骤。"></a>24.简述通知对象的使用步骤。</h3><p>（1）获取NotificationManager实例<br>　　NotificationManager manager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);</p>
<p>（2）创建Notification对象，该对象用于存储通知的各种所需信息，我们可以使用它的有参构造函数来创建。<br>　　第一个参数指定通知图标，第二个参数用于指定通知的ticker 内容，当通知刚被创建的时候，它会在系统的状态栏一闪而过，属于一种瞬时的提示信息。第三个参数用于指定通知被创建的时间，以毫秒为单位，<br>　　Notification notification = new Notification(R.drawable.ic_launcher,”This is a ticker text”,System.currentTimeMillis());</p>
<p>（3）调用Notification的setLatestEventIfo()方法对通知的布局进行设定，这个方法接收四个参数，第一个参数是Context。第二个参数用于指定通知的标题内容，下拉系统状态栏就可以看到这部分内容。第三个参数用于指定通知的正文内容，同样下拉系统状态栏就可以看到这部分内容。第四个参数用于指定实现通知点击事件的PendingIntent对象，如果暂时用不到可以先传入null。因此，对通知的布局进行设定就可以写成：<br>　　notification.setLatestEventInfo(context, “This is content title”, “This iscontent text”, null);<br>　　<br>（4）调用NotificationManager的notify（）方法显示通知。</p>
<h3 id="25-使用列表控件，需要使用适配器。创建自定义适配器，需要从哪个类继承？需要传递哪两个最基本的参数？需要覆写哪个方法才能正确显示数据？"><a href="#25-使用列表控件，需要使用适配器。创建自定义适配器，需要从哪个类继承？需要传递哪两个最基本的参数？需要覆写哪个方法才能正确显示数据？" class="headerlink" title="25.*使用列表控件，需要使用适配器。创建自定义适配器，需要从哪个类继承？需要传递哪两个最基本的参数？需要覆写哪个方法才能正确显示数据？"></a>25.*使用列表控件，需要使用适配器。创建自定义适配器，需要从哪个类继承？需要传递哪两个最基本的参数？需要覆写哪个方法才能正确显示数据？</h3><p>继承BaseAdapter类。context和布局文件<br>getview()</p>
<h3 id="26-安卓程序启动服务的两种方式是？其引发的服务生命周期中的事件是否一样？"><a href="#26-安卓程序启动服务的两种方式是？其引发的服务生命周期中的事件是否一样？" class="headerlink" title="26.安卓程序启动服务的两种方式是？其引发的服务生命周期中的事件是否一样？"></a>26.安卓程序启动服务的两种方式是？其引发的服务生命周期中的事件是否一样？</h3><p>采用Start方式开启<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br>3.使用Context的startService(Intent)方法启动该Service<br>4.不再使用时，调用stopService(Intent)方法停止该服务<br>使用这种start方式启动的Service的生命周期如下：<br>onCreate()—&gt;onStartCommand()（onStart()方法已过时） —&gt; onDestory()<br>说明：如果服务已经开启，不会重复的执行onCreate()， 而是会调用onStart()和onStartCommand()。<br>服务停止的时候调用 onDestory()。服务只会被停止一次。</p>
<p>采用Bind方式开启<br>1.定义一个类继承Service<br>2.在Manifest.xml文件中配置该Service<br>3.使用Context的bindService(Intent, ServiceConnection, int)方法启动该Service<br>4.不再使用时，调用unbindService(ServiceConnection)方法停止该服务<br>使用这种start方式启动的Service的生命周期如下：<br>onCreate() —&gt;onBind()—&gt;onunbind()—&gt;onDestory()<br>注意：绑定服务不会调用onstart()或者onstartcommand()方法</p>
<p><a href="http://blog.csdn.net/syc434432458/article/details/51194268" target="_blank" rel="external">详细区别</a></p>
<h3 id="27-停止服务的的方法是？"><a href="#27-停止服务的的方法是？" class="headerlink" title="27.停止服务的的方法是？"></a>27.停止服务的的方法是？</h3><p>  stopService(intent);  </p>
<h3 id="28-要使用远程服务，必须定义一个接口文件，其扩展名一般是？"><a href="#28-要使用远程服务，必须定义一个接口文件，其扩展名一般是？" class="headerlink" title="28.要使用远程服务，必须定义一个接口文件，其扩展名一般是？"></a>28.要使用远程服务，必须定义一个接口文件，其扩展名一般是？</h3><p>.aidl</p>
<blockquote>
<p>通过AIDL文件定义服务(Service)向客户端(Client)提供的接口，我们需要在对应的目录下添加一个后缀为.aidl的文件</p>
</blockquote>
<h3 id="29-简述安卓应用程序发送广播的过程。"><a href="#29-简述安卓应用程序发送广播的过程。" class="headerlink" title="29.简述安卓应用程序发送广播的过程。"></a>29.简述安卓应用程序发送广播的过程。</h3><p>发送广播 - 接收广播 - 结束</p>
<h3 id="30-简述安卓程序接收消息的方法和步骤。写出注册接收器的配置文件的片段。"><a href="#30-简述安卓程序接收消息的方法和步骤。写出注册接收器的配置文件的片段。" class="headerlink" title="30.简述安卓程序接收消息的方法和步骤。写出注册接收器的配置文件的片段。"></a>30.简述安卓程序接收消息的方法和步骤。写出注册接收器的配置文件的片段。</h3><p>接收消息的方法<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        Toast.makeText(context, <span class="string">"接收到的Intent的Action位："</span>+intent.getAction()+<span class="string">"\n消息内容是："</span>+intent.getStringExtra(<span class="string">"msg"</span>),Toast.LENGTH_LONG).show();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注册接收器的配置文件<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;receiver android:name=".MyReceiver"&gt;  </div><div class="line">           &lt;intent-filter &gt;  </div><div class="line">               &lt;action android:name="com.example.BROADCAST"/&gt;  </div><div class="line">           &lt;/intent-filter&gt;  </div><div class="line">       &lt;/receiver&gt;</div></pre></td></tr></table></figure></p>
<h3 id="31-安卓应用程序可以接收系统级别的广播消息吗？"><a href="#31-安卓应用程序可以接收系统级别的广播消息吗？" class="headerlink" title="31.安卓应用程序可以接收系统级别的广播消息吗？"></a>31.安卓应用程序可以接收系统级别的广播消息吗？</h3><p>可以</p>
<h3 id="32-使用sharedPreferrence对象，可以直接存储对象的数据吗？sharedPreferrence采用什么格式存储数据？"><a href="#32-使用sharedPreferrence对象，可以直接存储对象的数据吗？sharedPreferrence采用什么格式存储数据？" class="headerlink" title="32.*使用sharedPreferrence对象，可以直接存储对象的数据吗？sharedPreferrence采用什么格式存储数据？"></a>32.*使用sharedPreferrence对象，可以直接存储对象的数据吗？sharedPreferrence采用什么格式存储数据？</h3><p>采用XML文件存储key-value键值对数据，位于/data/data/&lt;包名&gt;/shared_prefs目录</p>
<h3 id="33-安卓程序存储数据表格，采用哪种存储技术较好？"><a href="#33-安卓程序存储数据表格，采用哪种存储技术较好？" class="headerlink" title="33.安卓程序存储数据表格，采用哪种存储技术较好？"></a>33.安卓程序存储数据表格，采用哪种存储技术较好？</h3><p>SQLite</p>
<h3 id="34-安卓应用程序的数据，要共享给其它应用程序使用，需要采取的存储技术是？"><a href="#34-安卓应用程序的数据，要共享给其它应用程序使用，需要采取的存储技术是？" class="headerlink" title="34.安卓应用程序的数据，要共享给其它应用程序使用，需要采取的存储技术是？"></a>34.安卓应用程序的数据，要共享给其它应用程序使用，需要采取的存储技术是？</h3><p>ContentProvider</p>
<h3 id="35-安卓文件存储数据，可以保存任意类型的数据吗？打开输出文件流的方法是？打开输入文件流的方法是？"><a href="#35-安卓文件存储数据，可以保存任意类型的数据吗？打开输出文件流的方法是？打开输入文件流的方法是？" class="headerlink" title="35.*安卓文件存储数据，可以保存任意类型的数据吗？打开输出文件流的方法是？打开输入文件流的方法是？"></a>35.*安卓文件存储数据，可以保存任意类型的数据吗？打开输出文件流的方法是？打开输入文件流的方法是？</h3><p>打开输出文件流<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">File file=<span class="keyword">new</span> File(filename);  </div><div class="line">FileOutputStream outputStream=context.openFileOutput(filename, Context.MODE_PRIVATE); <span class="comment">//创建文件输出流并且指定文件操作模式  </span></div><div class="line">outputStream.write(fileContent.getBytes());<span class="comment">//写入输出流  </span></div><div class="line">outputStream.close();<span class="comment">//关闭输出流</span></div></pre></td></tr></table></figure></p>
<p>打开输入文件流<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/**  </div><div class="line">     * 读取数据   </div><div class="line">     * @param filename 文件名称  </div><div class="line">     * @return  </div><div class="line">     */  </div><div class="line">    public String read(String filename) throws Exception&#123;  </div><div class="line">        File file=new File(filename);  </div><div class="line">        FileInputStream inputStream= new FileInputStream(file);                  //创建输入流  </div><div class="line">        ByteArrayOutputStream outStream=new ByteArrayOutputStream();             //缓存输出流  </div><div class="line">        byte[] buffer =new byte[1024];                                           //创建字节数组  </div><div class="line">        int len=0;  </div><div class="line">         while((len=inputStream.read(buffer))!=-1)&#123;                              //循环读取数据并且将数据写入到缓存输出流中  </div><div class="line">            outStream.write(buffer, 0, len);  </div><div class="line">        &#125;  </div><div class="line">        return new String(outStream.toByteArray());  </div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="36-安卓程序与服务器程序通信，一般采用哪种方式？"><a href="#36-安卓程序与服务器程序通信，一般采用哪种方式？" class="headerlink" title="36.安卓程序与服务器程序通信，一般采用哪种方式？"></a>36.安卓程序与服务器程序通信，一般采用哪种方式？</h3><p>socket</p>
<h3 id="37-Socket客户端程序，需要设置连接服务器的哪几个参数才能正确连接到服务器？"><a href="#37-Socket客户端程序，需要设置连接服务器的哪几个参数才能正确连接到服务器？" class="headerlink" title="37.Socket客户端程序，需要设置连接服务器的哪几个参数才能正确连接到服务器？"></a>37.Socket客户端程序，需要设置连接服务器的哪几个参数才能正确连接到服务器？</h3><p>IP地址和端口号</p>
<h3 id="38-Http通信方式中，服务器不能主动往客户端发送数据吗？"><a href="#38-Http通信方式中，服务器不能主动往客户端发送数据吗？" class="headerlink" title="38.Http通信方式中，服务器不能主动往客户端发送数据吗？"></a>38.Http通信方式中，服务器不能主动往客户端发送数据吗？</h3><p>应该不能，因为http协议是基于请求/响应模式，客户端要想获取数据，需要通过get请求，而不能有服务器主动发送（话说主动发送的话没有客户端的信息，怎么发给指定的客户端？）</p>
<h3 id="39-编写安卓客户端登录界面程序，UI要求能输入账号、密码，服务器的IP地址和端口号；后台程序能保存最近使用的参数，下次启动程序时，自动恢复上次的数据。"><a href="#39-编写安卓客户端登录界面程序，UI要求能输入账号、密码，服务器的IP地址和端口号；后台程序能保存最近使用的参数，下次启动程序时，自动恢复上次的数据。" class="headerlink" title="39.编写安卓客户端登录界面程序，UI要求能输入账号、密码，服务器的IP地址和端口号；后台程序能保存最近使用的参数，下次启动程序时，自动恢复上次的数据。"></a>39.编写安卓客户端登录界面程序，UI要求能输入账号、密码，服务器的IP地址和端口号；后台程序能保存最近使用的参数，下次启动程序时，自动恢复上次的数据。</h3><p>xml界面<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"wxz.name.ui1.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></div><div class="line">        <span class="attr">android:ems</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/editText1"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"账号"</span></div><div class="line"></div><div class="line"> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></div><div class="line">        <span class="attr">android:ems</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/editText3"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"ip地址"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/editText2"</span></div><div class="line"> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"textPersonName"</span></div><div class="line">        <span class="attr">android:ems</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/editText4"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"端口"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"31dp"</span></div><div class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@+id/editText2"</span></div><div class="line"> /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></div><div class="line">        <span class="attr">android:ems</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"28dp"</span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/editText2"</span></div><div class="line">        <span class="attr">android:hint</span>=<span class="string">"密码"</span></div><div class="line"> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>java文件<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">     setContentView(R.layout.activity_main);</div><div class="line">        </div><div class="line">    EditText userName = (EditText)findViewById(R.id.editText1);</div><div class="line">    EditText passWord = (EditText)findViewById(R.id.editText2);</div><div class="line">    EditText ipEdit = (EditText)findViewById(R.id.editText3);</div><div class="line">    EditText portEdit = (EditText)findViewById(R.id.editText4);</div><div class="line">    </div><div class="line">    SharedPreferencessharedPreferences= getSharedPreferences(<span class="string">"test"</span>, </div><div class="line">    Activity.MODE_PRIVATE); </div><div class="line"></div><div class="line">String username =sharedPreferences.getString(<span class="string">"username"</span>, <span class="string">""</span>); </div><div class="line">String passWord =sharedPreferences.getString(<span class="string">"passWord"</span>, <span class="string">""</span>); </div><div class="line">String ip =sharedPreferences.getString(<span class="string">"ip"</span>, <span class="string">""</span>); </div><div class="line">String port =sharedPreferences.getString(<span class="string">"port"</span>, <span class="string">""</span>); </div><div class="line"></div><div class="line">userName.text=username;</div><div class="line">passWord.text=passWord;</div><div class="line">ipEdit.text=ip;</div><div class="line">portEdit.text=port;</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    WriteUserInfo()</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title">WriteUserInfo</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    SharedPreferences userInfo = getSharedPreferences(<span class="string">"user_info"</span>,<span class="number">0</span>);</div><div class="line">    SharedPreferences.Editor editor = userInfo.edit();</div><div class="line">    editor.putString(<span class="string">"username"</span>, userName.getText().toString());</div><div class="line">    editor.putString(<span class="string">"passWord"</span>, passWord.getText().toString());</div><div class="line">editor.putString(<span class="string">"ip"</span>, ipEdit.getText().toString());</div><div class="line">editor.putString(<span class="string">"port"</span>, portEdit.getText().toString());</div><div class="line">    editor.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="40-编写安卓应用程序，要求使用列表对象显示班级学生的信息。性别用图片显示，姓名、学号、专业、地址用文字显示。"><a href="#40-编写安卓应用程序，要求使用列表对象显示班级学生的信息。性别用图片显示，姓名、学号、专业、地址用文字显示。" class="headerlink" title="40.编写安卓应用程序，要求使用列表对象显示班级学生的信息。性别用图片显示，姓名、学号、专业、地址用文字显示。"></a>40.编写安卓应用程序，要求使用列表对象显示班级学生的信息。性别用图片显示，姓名、学号、专业、地址用文字显示。</h3><p>以下代码未包括，性别用图片显示这无聊的功能，如果要实现这个功能需要新建一个类重写适配器。代码巨长</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>  </div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;  </div><div class="line">  </div><div class="line">    <span class="tag">&lt;<span class="name">ListView</span>  </span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/listView"</span>  </div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span> &gt;  </div><div class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span>  </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">  </div><div class="line"><span class="keyword">private</span> ListView myListView;<span class="comment">//列表  </span></div><div class="line"><span class="keyword">private</span> List&lt;String&gt; itemList;<span class="comment">//数据  </span></div><div class="line">  </div><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">setContentView(R.layout.activity_main);  </div><div class="line">initData();  </div><div class="line">myListView = (ListView) findViewById(R.id.listView);  </div><div class="line"><span class="comment">//ArrayAdapter中有三个参数  </span></div><div class="line"><span class="comment">//Context context 指定现在的上下文  </span></div><div class="line"><span class="comment">//int textViewResourceId 指定一个包含textview的布局文件,显示每行的信息  </span></div><div class="line"><span class="comment">//List&lt;String&gt; objects 在listview上显示的数据信息  </span></div><div class="line">ArrayAdapter&lt;String&gt; myAdapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(MainActivity.<span class="keyword">this</span>,  </div><div class="line">android.R.layout.simple_list_item_1, itemList);<span class="comment">//适配器  </span></div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;  </div><div class="line">itemList = <span class="keyword">new</span> ArrayList&lt;String&gt;();  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;  </div><div class="line">string name=“名字”;</div><div class="line">string number=<span class="string">"15408500000"</span>;</div><div class="line">itemList.add(<span class="string">"姓名:"</span> +name+ <span class="string">"学号"</span>+number);<span class="comment">//省略.....name和number需要自己修改  </span></div><div class="line">&#125;  </div><div class="line">&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于搭建ShadowSocks以及使用]]></title>
      <url>/2016/11/06/Build-ShadowSocks/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>因为得到了Github学生包送的50美金VPS的代金券，想着没处用，就用来当翻墙用<br><a id="more"></a></p>
<h1 id="服务器购买与配置"><a href="#服务器购买与配置" class="headerlink" title="服务器购买与配置"></a>服务器购买与配置</h1><h2 id="获得优惠"><a href="#获得优惠" class="headerlink" title="获得优惠"></a>获得优惠</h2><p>打开<a href="https://www.digitalocean.com" target="_blank" rel="external">digitalocean</a>，注册一个账户。<br>注册的时候需要填写信用卡，如果没有的话需要使用PayPal，注册一个就好，然后充值5美元<br>登录进去后在设置里面输入Github学生优惠包里面给的优惠玛，即可得到50美元<br><img src="https://img.wxz.name/14784408449159.jpg" alt=""><br>这张图往下面拖一点，就是输入优惠码的地方了</p>
<h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>点击页面右上角这个按钮，新建一个VPS<br><img src="https://img.wxz.name/14784409805200.jpg" alt=""></p>
<p>系统建议Ubuntu 14.04，最低配置5美元每月即可<br><img src="https://img.wxz.name/14784410566665.jpg" alt=""></p>
<p>地区选择，这里很关键，只推荐这两个地方,Ping大概在300ms左右，我使用的是新加坡的服务器，虽然比旧金山慢一点，但是晚上丢包率低一点。<br><img src="https://img.wxz.name/14784411229022.jpg" alt=""></p>
<p>然后新建一个SSH Key 点击下面即可创建<br><img src="https://img.wxz.name/14784412067193.jpg" alt=""></p>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><p>通过SSH连接到服务<br>先更新软件源<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure></p>
<p>安装Pip环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo apt-get install python-pip</div></pre></td></tr></table></figure></p>
<p>直接安装shadowsocks<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>创建一个配置文件/etc/shadowsocks.json<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;你的服务器IP&quot;,</div><div class="line">    &quot;server_port&quot;:8388,</div><div class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;设置的密码&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可别直接复制，里面的中文改成你自己的东西</p>
</blockquote>
<p>输入命令运行服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo ssserver -p 8388 -k password -m aes-256-cfb -d start</div></pre></td></tr></table></figure></p>
<h1 id="使用Shadowsocks"><a href="#使用Shadowsocks" class="headerlink" title="使用Shadowsocks"></a>使用Shadowsocks</h1><h2 id="Windows环境"><a href="#Windows环境" class="headerlink" title="Windows环境"></a>Windows环境</h2><p>下载ShadowsocksR，如果是Let’s try开发社社员，可以直接在群文件中下载<br><img src="https://img.wxz.name/14784894677606.jpg" alt="群文件"></p>
<p>解压后打开Shadowsock<br><img src="https://img.wxz.name/14784895009050.jpg" alt=""><br><img src="https://cloud.smartisan.com/apps/note/notesimage/Notes_1477305122426.png" alt="解压"></p>
<p>依图进行设置,服务IP和密码换成自己设置的。如果是Let’s try社员可以直接在通知群里面拿到社团翻墙用服务器。<br><img src="https://img.wxz.name/14784887038051.jpg" alt=""></p>
<p>接着打开PAC模式(国内的网站还是用自己网，国外的网站走服务器代理)<br><img src="https://img.wxz.name/14784895095942.jpg" alt=""></p>
<h2 id="Android环境"><a href="#Android环境" class="headerlink" title="Android环境"></a>Android环境</h2><p>下载Shadowsock的Android软件，Let’s try社员可以在群文件中下载<br><img src="https://img.wxz.name/14784992391995.jpg" alt=""></p>
<p>打开APP，服务器和密码设置成自己的，然后点击连接即可。<br><img src="https://img.wxz.name/14784992848256.jpg" alt=""></p>
<h2 id="IOS端环境"><a href="#IOS端环境" class="headerlink" title="IOS端环境"></a>IOS端环境</h2><p>在AppStore中下载Wingy，进行服务器地址和密码的配置<br><img src="https://img.wxz.name/14784997190986.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[学生邮箱申请及Github私有仓库申请]]></title>
      <url>/2016/11/06/registeremail/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>很多优惠需要学生资格，而往往需要学生邮箱，这里主要先介绍申请湖南工业大学邮箱，然后申请Github学生资格，得到一系列的福利</p>
<blockquote>
<p>50美元的服务器代金券，基本可以买一台VPS一年不用花钱<br>免费赠送一个.me的域名<br>得到5个Github私有仓库资格<br><a id="more"></a></p>
</blockquote>
<h1 id="注册学生邮箱"><a href="#注册学生邮箱" class="headerlink" title="注册学生邮箱"></a>注册学生邮箱</h1><p>打开<a href="http://www.hut.edu.cn" target="_blank" rel="external">湖南工业大学</a>依照图片完成学生邮箱注册<br><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2020.43.13.png" alt="屏幕快照 2016-11-06 20.43.13"></p>
<h1 id="申请Github学生认证"><a href="#申请Github学生认证" class="headerlink" title="申请Github学生认证"></a>申请Github学生认证</h1><p>打开<a href="https://education.github.com" target="_blank" rel="external">Github Education</a>，点这个炫酷的包包得到它。<br><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2020.48.44.png" alt="屏幕快照 2016-11-06 20.48.44"></p>
<h2 id="依图选择"><a href="#依图选择" class="headerlink" title="依图选择"></a>依图选择</h2><p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2020.55.07.png" alt="屏幕快照 2016-11-06 20.55.07"></p>
<h2 id="添加学生邮箱"><a href="#添加学生邮箱" class="headerlink" title="添加学生邮箱"></a>添加学生邮箱</h2><p><img src="https://img.wxz.name/14784370463770.jpg" alt=""><br>在这里输入刚刚申请到的学生邮箱地址<br><img src="https://img.wxz.name/14784370831223.jpg" alt=""><br>接着登录学生邮箱，会收到一封邮件，点击链接认证下</p>
<h2 id="第一次申请，使用学生邮箱"><a href="#第一次申请，使用学生邮箱" class="headerlink" title="第一次申请，使用学生邮箱"></a>第一次申请，使用学生邮箱</h2><p>然后回到第一个界面，这里下拉会看到一个刚刚认证的邮箱，选择那个(我这里是示范号，所以没有显示)<br><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2021.00.03.png" alt="屏幕快照 2016-11-06 21.00.03"></p>
<p>然后剩下三行，用英文简单的说下，然后点击提交</p>
<p><strong>如果没有问题的话，应该是秒被拒绝，直接收到Github发来的拒绝信件</strong></p>
<h2 id="第二次申请，使用学生证件"><a href="#第二次申请，使用学生证件" class="headerlink" title="第二次申请，使用学生证件"></a>第二次申请，使用学生证件</h2><p>注意这里选择没有学生邮箱，然后提交学生证照片<br><img src="https://img.wxz.name/14784873316184.jpg" alt=""></p>
<p>正常情况如果你什么都不干，那么等两个月还是被拒，接下来就应该写信给github。</p>
<h2 id="向Github写信，解释"><a href="#向Github写信，解释" class="headerlink" title="向Github写信，解释"></a>向Github写信，解释</h2><p>点击这里打开<br><img src="https://img.wxz.name/14784375045202.jpg" alt=""></p>
<p>然后在下面输入件信</p>
<blockquote>
<p>Email地址地方改成学生邮箱<br>全程请用英文<br>不知道的句子请用有道翻译<br>义正言辞表示自己是学生<br>提出自己使用学生邮箱申请被拒绝了<br>表达自己热爱Github，并且使用它进行学习Android/IOS/前端</p>
</blockquote>
<p><img src="https://img.wxz.name/14784377000317.jpg" alt=""></p>
<h2 id="等待结果"><a href="#等待结果" class="headerlink" title="等待结果"></a>等待结果</h2><p>2天内就会接受到Github人员发给你的道歉信了，大致的内容是，我很道歉我们的邮箱自动判断机器人出现了问题，我们已经将你添加的Github学生资格。</p>
<p>接着可以愉快的使用Github私有仓库，已经50美元的服务器代金券，还有免费域名了。<br><img src="https://img.wxz.name/14784379908884.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[工大助手iOS端开发日志]]></title>
      <url>/2016/10/19/HutHelper/</url>
      <content type="html"><![CDATA[<p><img src="https://img.wxz.name/76@2x-1.png" alt="76@2x"><br>湖南工业大学校园助手iOS端</p>
<h1 id="项目总体概况"><a href="#项目总体概况" class="headerlink" title="项目总体概况"></a>项目总体概况</h1><ul>
<li><p>截止到17年1月24日，上架三个月的时间里，iOS端使用者已经达到2500人，另外Android端使用人数已过8000+,主要使用对象为湖南工业大学学生，覆盖全校60%以上人群，iOS端开发语言采用Objective-c，开发软件为Xcode，适配iOS8以上系统，后端数据部分采用JSON。</p>
</li>
<li><p>下载方式: <a href="https://itunes.apple.com/cn/app/gong-da-zhu-shou-hu-nan-gong/id1164848835" target="_blank" rel="external">AppStore</a></p>
</li>
</ul>
<h1 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">	├── HutHelper</div><div class="line">	│   ├── 3rd：因为各种原因没有用Pods管理的第三方库</div><div class="line">	│   ├── Utils：一些工具类等</div><div class="line">	│   ├── Request：网络请求</div><div class="line">	│   ├── Models：数据模型</div><div class="line">	│   ├── View：界面，xib或者storyboard之类的文件</div><div class="line">	│   ├── Supporting Files：一些支持文件</div><div class="line">	│   └── Controllers</div><div class="line">	│       ├── Main：主界面</div><div class="line">	│       ├── Login：登录界面</div><div class="line">	│       ├── Class：课程表</div><div class="line">	│       ├── Score：考试成绩</div><div class="line">	│       ├── Exam：考试计划查询</div><div class="line">	│       ├── User：用户界面</div><div class="line">	│       ├── FeedBack：反馈界面</div><div class="line">	│       ├── Power：寝室电费查询</div><div class="line">	│       ├── Set：用户设置界面</div><div class="line">	│       ├── Lost：失物招领界面</div><div class="line">	│       ├── Day：校历界面</div><div class="line">	│       ├── HomeWork：网上作业界面</div><div class="line">	│       ├── Hand：二手市场界面</div><div class="line">	│       ├── Library：图书馆界面</div><div class="line">	│       ├── Other：其他</div><div class="line">	└── Pods：项目使用了[CocoaPods](http://code4app.com/article/cocoapods-install-usage)这个类库管理工具</div><div class="line">	└── json:请求的示例数据</div></pre></td></tr></table></figure>
<p>请注意，因为使用了Pods,所以请下载完项目后先运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>考虑到在校用户信息的安全性,<strong>App的接口地址全部换成了镜像接口,与线上版本不同</strong></li>
<li>除此之外，一切和上线版本代码全部一致</li>
<li>同时因为镜像接口的数据是固定的,所以测试时，<strong>登录界面，无论输入什么，点登录就可以</strong></li>
<li>课程数据,考试数据,用户数据,课表数据,说说数据,二手数据这些也都是固定的</li>
<li>请求的数据可以在json文件夹中查看</li>
</ul>
<p><strong>如果要进行二次开发，可以直接把请求的地址改成自己后端的地址，然后把接受的数据改一下即可.</strong></p>
<h1 id="上架情况"><a href="#上架情况" class="headerlink" title="上架情况"></a>上架情况</h1><p><img src="https://img.wxz.name/14853135352743.jpg" alt=""></p>
<h1 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h1><h2 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h2><p>登录界面采用简洁的方式展示。<br>用户输入学号和密码后，将通过JSON连接网络，得到Msg信息<br>如果成功—&gt;存储Json至NSUserDefault<br>如果失败—&gt;返回Msg提示信息</p>
<p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2018.56.58.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="登录界面"></p>
<h2 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h2><p>主界面是直接用xib做的,图片直接使用UI给的图片,另外的话有很多数据是在这个界面初始化的</p>
<ul>
<li>viewDidLoad()方法中，需要计算APP打开的此时的周数，并且通过NSUserDefaults类将其数据存储到plist文件中</li>
<li>判断是否为第一次登陆，是的话跳转到登陆界面</li>
<li>判断设置中是否设置自动打开课程表，是的话跳转到课程表</li>
<li>判断用户信息的标签是否上传</li>
<li>初始化抽屉界面</li>
<li>…</li>
</ul>
<p><img src="https://img.wxz.name/IMG_1364.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="主界面"></p>
<h2 id="成绩查询"><a href="#成绩查询" class="headerlink" title="成绩查询"></a>成绩查询</h2><p>这里调用了<a href="https://github.com/ZhipingYang/UUChartView" target="_blank" rel="external">UUCharView - 成绩曲线图标</a>开源项目，展现了用户成绩数据，首先第一次打开这个界面会读取用户成绩数据，并缓存，后面几次打开时会直接读取缓存数据。如果需要刷新的话可以点刷新按钮。</p>
<p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2019.13.48.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="曲线成绩"><br>点右上角的按钮可以查询所有课程的成绩数据，同时也可以折叠数据。</p>
<p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2019.16.47.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="所有成绩查询"></p>
<h2 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h2><p>这里使用了<a href="https://github.com/GanWenpeng/GWPCourseListView" target="_blank" rel="external">GWPCourseListView - 课程表界面</a>开源项目，做了一些调整，并且修复了一些bug，开发者已经接受了我的pull。<br>同时自己集成了<a href="https://github.com/Friend-LGA/LGPlusButtonsView" target="_blank" rel="external">LGPlusButtonsView - 按钮控件</a>开源项目的按钮控件，使课程表数据可以上下周的调整。</p>
<ul>
<li>另外加入了实验课程表，可以单独显示，也可以在设置里面设置成一起显示</li>
</ul>
<p><img src="https://img.wxz.name/IMG_1365.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="课程表"></p>
<h2 id="考试计划"><a href="#考试计划" class="headerlink" title="考试计划"></a>考试计划</h2><p>考试计划中将显示教务处正在计划和已经确定的考试<br>用的自定义tableview做的，很简单的绘制一个cell，然后将Json的数据与之交互</p>
<p><img src="https://img.wxz.name/IMG_1366.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="IMG_1366"></p>
<h2 id="电费查询"><a href="#电费查询" class="headerlink" title="电费查询"></a>电费查询</h2><p>简单的调用接口查询，没什么技术含量</p>
<p><img src="https://img.wxz.name/IMG_1367.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="IMG_1367"></p>
<h2 id="校园说说"><a href="#校园说说" class="headerlink" title="校园说说"></a>校园说说</h2><p>这个部分最大的问题就是适配的问题,有的图片多，有的文字多，怎么决定这个长度呢<br>所以我把每条说说分为四个部分，从上往下依次是  用户信息和文字/图片部分/评论数目部分/评论部分<br>这样首先根据文字的长度，分配第一个cell也就是文字的高度<br>然后根据图片的部分，分配第二个cell也就是图片的高度</p>
<p><img src="https://img.wxz.name/IMG_1371.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="IMG_1371"></p>
<h2 id="二手市场"><a href="#二手市场" class="headerlink" title="二手市场"></a>二手市场</h2><p>每个cell显示两个商品，很简单的做法</p>
<p><img src="https://img.wxz.name/IMG_1372.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="IMG_1372"></p>
<h2 id="图书馆-校园说说-二手市场-网上作业"><a href="#图书馆-校园说说-二手市场-网上作业" class="headerlink" title="图书馆/校园说说/二手市场/网上作业"></a>图书馆/校园说说/二手市场/网上作业</h2><p>这两个部分因为没有接口，所以直接用web端做的</p>
<p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2019.41.19.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="图书馆"></p>
<p><img src="https://img.wxz.name/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-11-06%2019.41.41.png?imageView2/2/w/400/h/800/interlace/0/q/41" alt="网上作业"></p>
<h1 id="项目使用的开源项目"><a href="#项目使用的开源项目" class="headerlink" title="项目使用的开源项目"></a>项目使用的开源项目</h1><ul>
<li><a href="https://github.com/chennyhuang/LeftSlide" target="_blank" rel="external">LeftSlide - 主界面框架</a></li>
<li><a href="https://github.com/jdg/MBProgressHUD" target="_blank" rel="external">MBProgressHUD - 等待框动画</a></li>
<li><a href="https://github.com/GanWenpeng/GWPCourseListView" target="_blank" rel="external">GWPCourseListView - 课程表界面</a></li>
<li><a href="https://github.com/Friend-LGA/LGPlusButtonsView" target="_blank" rel="external">LGPlusButtonsView - 按钮控件</a></li>
<li><a href="https://github.com/ZhipingYang/UUChartView" target="_blank" rel="external">UUCharView - 成绩曲线图标</a></li>
<li><a href="https://github.com/sakkaras/SKSTableView" target="_blank" rel="external">SKSTableView - 成绩列表</a></li>
<li>[TZImagePickerController - 照片选择器]</li>
<li>[SDWebImage - 异步多图加载]</li>
<li>[MJRefresh - 上拉下拉刷新]</li>
<li>[YYModel - Json转Model]</li>
<li>[AFNetworking - 请求异步加载]</li>
<li>[UMengUShare - 友盟分享]</li>
<li>[ASIHTTPRequest - 照片同步上传]</li>
</ul>
<h1 id="最后-求一个Star"><a href="#最后-求一个Star" class="headerlink" title="最后,求一个Star"></a>最后,求一个Star</h1><p>这是本人刚进大二,在湖南工业大学实验室写的一款App，目的主要是为湖南工业大学的学生提供一些便利,同时也是湖南省省级项目,App中有很多不足的地方,代码的可读性也不是很好,甚至于最开始的版本，网络请求都是同步请求，没有加载框，很容易卡死。但是不管如何，我都在完善。<br>这是开源的第一个版本,在后续每当上线版本有大的更新后，我都会同步发布在这里<br>其目的是，如果有其他学校的同学也需要开发一个服务于自己母校的iOS App，可以从这得到一定的参考<br>如果有任何问题也可以在issues留言</p>
<p>我的个人网站是<a href="www.wxz.name">www.wxz.name</a></p>
<h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p><a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="external">Apache Licene 2.0</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS问题整理回答]]></title>
      <url>/2016/10/09/interviewQuestions/</url>
      <content type="html"><![CDATA[<p>感觉自己基础不够老实，网上找了一些别人的面试题，自己搜集了一些资料，来回答。<br><a id="more"></a></p>
<h1 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h1><p><a href="https://www.nowcoder.com/discuss/21022?type=0&amp;order=0&amp;pos=92&amp;page=1" target="_blank" rel="external">原文地址</a></p>
<h2 id="OC-中load方法和initialize方法的异同。"><a href="#OC-中load方法和initialize方法的异同。" class="headerlink" title="OC 中load方法和initialize方法的异同。"></a>OC 中load方法和initialize方法的异同。</h2><p>load<br>被程序装载时调用，main之前<br>父类-&gt;子类-&gt;分类<br>如果一个类没有实现load方法，那么就不会调用它父类的load方法<br>根据编译顺序</p>
<p>initializez<br>第一次给某个类发送消息时调用，惰性调用<br>如果子类实现了initialize方法，就不会执行父类的了，直接执行子类本身的。如果分类实现了initialize方法，也不会再执行主类的。所以initialize方法的执行覆盖顺序是 分类 -&gt; 子类 -&gt;类。且只会有一个initialize方法被执行。<br><a href="http://www.jianshu.com/p/d25f691f0b07" target="_blank" rel="external">建议学习</a></p>
<h2 id="说说你对-block-的理解"><a href="#说说你对-block-的理解" class="headerlink" title="说说你对 block 的理解"></a>说说你对 block 的理解</h2><h1 id="面试题集合"><a href="#面试题集合" class="headerlink" title="面试题集合"></a>面试题集合</h1><p><a href="http://www.2bjs.com/求职笔记/iOS面试题集合(BAT及各大中小型公司" target="_blank" rel="external">原文地址</a>/)</p>
<h1 id="去哪儿网一面"><a href="#去哪儿网一面" class="headerlink" title="去哪儿网一面"></a>去哪儿网一面</h1><h2 id="1-自我介绍"><a href="#1-自我介绍" class="headerlink" title="1.自我介绍"></a>1.自我介绍</h2><h2 id="2-atomic-和-nonatomic-的区别"><a href="#2-atomic-和-nonatomic-的区别" class="headerlink" title="2.atomic 和 nonatomic 的区别"></a>2.atomic 和 nonatomic 的区别</h2><p>前者是原子性，后者是非原子型。两者的区别在于一个加锁，比如说一个属性，同时几个线程在读和写，那么atomic能保证其不受到其他线程的影响。但不能保证线程安全，比如说线程 A 调了 getter，与此同时线程 B 、线程 C 都调了 setter——那最后线程 A get 到的值，3种都有可能。<br>从代码角度解释<br>非原子型<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//@property(nonatomic, retain) UITextField *userName;</span></div><div class="line"><span class="comment">//系统生成的代码如下：</span></div><div class="line"></div><div class="line">- (UITextField *) userName &#123;</div><div class="line">    <span class="keyword">return</span> userName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setUserName:(UITextField *)userName_ &#123;</div><div class="line">    [userName_ retain];</div><div class="line">    [userName release];</div><div class="line">    userName = userName_;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原子型<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">//@property(retain) UITextField *userName;</span></div><div class="line"><span class="comment">//系统生成的代码如下：</span></div><div class="line"></div><div class="line">- (UITextField *) userName &#123;</div><div class="line">    UITextField *retval = nil;</div><div class="line">    @synchronized(self) &#123;</div><div class="line">        retval = [[userName retain] autorelease];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retval;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>) setUserName:(UITextField *)userName_ &#123;</div><div class="line">    @synchronized(self) &#123;</div><div class="line">      [userName release];</div><div class="line">      userName = [userName_ retain];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建议阅读:<br><a href="http://www.jianshu.com/p/7288eacbb1a2" target="_blank" rel="external">atomic 和 nonatomic 有什么区别?</a><br><a href="http://www.cocoachina.com/ios/20151103/14007.html" target="_blank" rel="external">关于 @synchronized，这儿比你想知道的还要多</a></p>
<h2 id="3-手写-property-nonatomic-strong-readonly-NSString-context-的get-方法。前提是线程安全，lazy-load的方式"><a href="#3-手写-property-nonatomic-strong-readonly-NSString-context-的get-方法。前提是线程安全，lazy-load的方式" class="headerlink" title="3.手写@property (nonatomic, strong, readonly) NSString *context 的get 方法。前提是线程安全，lazy load的方式"></a>3.手写@property (nonatomic, strong, readonly) NSString *context 的get 方法。前提是线程安全，lazy load的方式</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">@synthesize context4=_context4;</div><div class="line">-(NSString*)context4&#123;</div><div class="line">    <span class="keyword">return</span> _context4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？"><a href="#4-property-atomic-strong-NSString-str-如果重写了str的set方法，那atomic还有效吗？" class="headerlink" title="4.@property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？"></a>4.@property (atomic, strong) NSString *str; 如果重写了str的set方法，那atomic还有效吗？</h2><p>get方法中的同步锁@synchronized还有，但是无法保证set了。</p>
<h2 id="5-写一个method-能满足输入-6-5-4-3-2-1-数组-输出-1-2-3-4-5-6-数组"><a href="#5-写一个method-能满足输入-6-5-4-3-2-1-数组-输出-1-2-3-4-5-6-数组" class="headerlink" title="5.写一个method 能满足输入[6, 5, 4, 3, 2, 1]数组 输出 [1, 2, 3, 4, 5, 6]数组"></a>5.写一个method 能满足输入[6, 5, 4, 3, 2, 1]数组 输出 [1, 2, 3, 4, 5, 6]数组</h2><h2 id="6-http-socket的区别，http是在网络里面的那一层。这里考的是网络传输的那7层。如何知道消息体的数据已经发送完成了。tcp-udp的理解。"><a href="#6-http-socket的区别，http是在网络里面的那一层。这里考的是网络传输的那7层。如何知道消息体的数据已经发送完成了。tcp-udp的理解。" class="headerlink" title="6.http socket的区别，http是在网络里面的那一层。这里考的是网络传输的那7层。如何知道消息体的数据已经发送完成了。tcp udp的理解。"></a>6.http socket的区别，http是在网络里面的那一层。这里考的是网络传输的那7层。如何知道消息体的数据已经发送完成了。tcp udp的理解。</h2><p><strong>http socket的区别?</strong><br>http在应用层</p>
<p>建议阅读:<br><a href="http://blog.csdn.net/u012861978/article/details/51236531" target="_blank" rel="external">TCP/IP SOCKET HTTP及HTTPS之间的关系及各自特性之总结</a></p>
<h2 id="7-一个新的app的设计思路，主要看架构方面的想法"><a href="#7-一个新的app的设计思路，主要看架构方面的想法" class="headerlink" title="7.一个新的app的设计思路，主要看架构方面的想法"></a>7.一个新的app的设计思路，主要看架构方面的想法</h2><h2 id="8-多个登录方式，比如qq，-微信，微博，手机号，邮箱等的登录，如果真对变化进行封装。这里考虑的更多的是设计模式上的问题。"><a href="#8-多个登录方式，比如qq，-微信，微博，手机号，邮箱等的登录，如果真对变化进行封装。这里考虑的更多的是设计模式上的问题。" class="headerlink" title="8.多个登录方式，比如qq， 微信，微博，手机号，邮箱等的登录，如果真对变化进行封装。这里考虑的更多的是设计模式上的问题。"></a>8.多个登录方式，比如qq， 微信，微博，手机号，邮箱等的登录，如果真对变化进行封装。这里考虑的更多的是设计模式上的问题。</h2><h2 id="9-事件响应链（比如点击事件）"><a href="#9-事件响应链（比如点击事件）" class="headerlink" title="9.事件响应链（比如点击事件）"></a>9.事件响应链（比如点击事件）</h2><p><a href="http://www.jianshu.com/p/2e074db792ba" target="_blank" rel="external">史上最详细的iOS之事件的传递和响应机制-原理篇</a></p>
<h2 id="10-GCD中group的优点，及串行，并行队列"><a href="#10-GCD中group的优点，及串行，并行队列" class="headerlink" title="10.GCD中group的优点，及串行，并行队列"></a>10.GCD中group的优点，及串行，并行队列</h2><p>获知所有线程的完成情况<br>串行队列: 线程任务按先后顺序逐个执行<br>并行队列: 多个任务按添加顺序一起开始执行</p>
<h2 id="11-framework时动态链接库还是静态链接库，和-a的区别是什么"><a href="#11-framework时动态链接库还是静态链接库，和-a的区别是什么" class="headerlink" title="11.framework时动态链接库还是静态链接库，和.a的区别是什么"></a>11.framework时动态链接库还是静态链接库，和.a的区别是什么</h2><p>.a静态库是一个纯二进制文件，.framework中除了有二进制文件之外还有资源文件<br>.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用(内部直接包含了要展示方法的.h文件)。</p>
<p>静态库：以.a 和 .framework为文件后缀名。<br>动态库：以.tbd(之前叫.dylib) 和 .framework 为文件后缀名。</p>
<p>静态库：链接时会被完整的复制到可执行文件中，被多次使用就有多份拷贝。<br>动态库：链接时不复制，程序运行时由系统动态加载到内存，系统只加载一次，多个程序共用（如系统的UIKit.framework等），节省内存。</p>
<h2 id="12-将对象加入字典，array时的引用计数是多少"><a href="#12-将对象加入字典，array时的引用计数是多少" class="headerlink" title="12.将对象加入字典，array时的引用计数是多少"></a>12.将对象加入字典，array时的引用计数是多少</h2><h2 id="13-weak的实现原理-strong的实现原理"><a href="#13-weak的实现原理-strong的实现原理" class="headerlink" title="13.weak的实现原理 strong的实现原理"></a>13.weak的实现原理 strong的实现原理</h2><h2 id="14-关于引用计数的知识点"><a href="#14-关于引用计数的知识点" class="headerlink" title="14.关于引用计数的知识点"></a>14.关于引用计数的知识点</h2><h2 id="15-手写一个set方法"><a href="#15-手写一个set方法" class="headerlink" title="15.手写一个set方法"></a>15.手写一个set方法</h2><h2 id="16-block中的弱引用强引用，什么情况会导致循环引用，什么时候需要-strong保持强引用"><a href="#16-block中的弱引用强引用，什么情况会导致循环引用，什么时候需要-strong保持强引用" class="headerlink" title="16.block中的弱引用强引用，什么情况会导致循环引用，什么时候需要__strong保持强引用"></a>16.block中的弱引用强引用，什么情况会导致循环引用，什么时候需要__strong保持强引用</h2><p>block中引用self会造成循环引用</p>
<h2 id="17-app的性能优化，都有哪些"><a href="#17-app的性能优化，都有哪些" class="headerlink" title="17.app的性能优化，都有哪些"></a>17.app的性能优化，都有哪些</h2><h2 id="18-对于image加载的优化方案有哪些"><a href="#18-对于image加载的优化方案有哪些" class="headerlink" title="18.对于image加载的优化方案有哪些"></a>18.对于image加载的优化方案有哪些</h2><h2 id="19-Runloop-runtime的理解"><a href="#19-Runloop-runtime的理解" class="headerlink" title="19.Runloop, runtime的理解"></a>19.Runloop, runtime的理解</h2><h1 id="计算机网络问题整理"><a href="#计算机网络问题整理" class="headerlink" title="计算机网络问题整理"></a>计算机网络问题整理</h1><ol>
<li>简要说明交换机，路由器的工作原理及它们之间的区别？</li>
</ol>
<ul>
<li>层不同：路由器在OSI的第三层–网络层，而交换机在第二层–数据链路层;</li>
<li>表不同：路由器有一张路由器表，而交换机有一张桥表;</li>
<li>功能不同：路由器是不同网段之间的连接设备，主要有路由选择、拥塞控制、存储转发功能;；交换机只有扩展延伸同一网络更多终端的作用。</li>
<li>协议不同：路由器用的协议多与软件有关，交换机所用协议多与硬件接口有关。</li>
<li>作用地址不同：路由器针对的地址是IP地址，可以用静态分配和动态分配，是变化的;而交换机作用地址是MAC地址，这是设备厂商出厂时就固化在设备中的，只能有一个，不能变化。</li>
</ul>
<p>2.描述TCP 协议三次握手，四次释放的过程<br><img src="https://img.wxz.name/15020184475110.jpg" alt=""></p>
<blockquote>
<p>三次握手：<br>1.客户端请求连接，会发送一个SYN序列号。<br>2.服务端发送一个针对上次SYN序号的应答确认号ACK，和一个SYN序列号。<br>3.客户端发送一个针对上次SYN序号的应答确认号ACK。<br>四次握手：<br>1.客户端请求断开连接，会发送一个FIN序号。<br>2.服务端发送一个针对上次FIN序号的应答确认号ACK。<br>3.服务端发送一个FIN序号请求断开连接。<br>4.客户端发送一个针对上次服务端FIN序号的应答确认号ACK。</p>
</blockquote>
<p>3.TCP 协议是如何进行流量控制，拥塞控制的？</p>
<ul>
<li>TCP流量控制原理<br>  运用TCP报文段中的窗口大小字段来控制，发送方的发送窗口不可以大于接收方发回的窗口大小。</li>
</ul>
<p>4.为什么建立连接时是三次握手，两次行不行？如果第三次握手失败了怎么处理</p>
<ul>
<li>如果只有两次的话，假如第二次服务端发送完ack就开始传送信息，此时不知道客户端是否可以收到</li>
<li>假如之前客户端已经请求了一次，但是没有到服务端。之后又请求了一次，得到回复开始传信息然后结束。此时上一次的那个请求才到达客户端。</li>
<li>如果第三次握手失败后发送RST报文段，进入CLOSED状态</li>
</ul>
<p>5.你怎么理解分层和协议？</p>
<ul>
<li>每层的提供的服务是固定的，所以每一层改变的时候，不会影响其他层次。<br>比如数据链路层是以太网、令牌环网，他们都能支持IP协议。而应用层的传输协议既可以使用TCP协议，也可以使用UDP协议。分层也使每一层的功能单一。</li>
<li>协议是两个通信的主体达成一致的通信规则，windows、linux都支持TCP/IP，他们就能通过TCP/IP通信。</li>
</ul>
<p>6.HTTP 请求中的 GET 和 POST 的区别</p>
<ul>
<li>请求方式:Get请求数据会放在Url之后，POST会放在HTTP请求的包体中。</li>
<li>传输数据大小，GET请求会受到URL长度限制，POST理论上不受限制，但服务器会对提交大小进行限制</li>
<li>安全性，POST请求安全性比GET高</li>
</ul>
<p>7.Session 和 Cookie 的区别。</p>
<blockquote>
<p>1，session 在服务器端，cookie 在客户端（浏览器）<br>2，session 默认被存在在服务器的一个文件里（不是内存）<br>3，session 的运行依赖 session id，而 session id 是存在 cookie 中的，也就是说，如果浏览器禁用了 cookie ，同时 session 也会失效（但是可以通过其它方式实现，比如在 url 中传递 session_id）<br>4，session 可以放在 文件、数据库、或内存中都可以。<br>5，用户验证这种场合一般会用 session</p>
</blockquote>
<p>8.谈谈你对 HTTP 1.1，2.0 和 HTTPS 理解</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS学习笔记-打开新窗口]]></title>
      <url>/2016/09/28/ios-opennew/</url>
      <content type="html"><![CDATA[<h1 id="打开新窗口"><a href="#打开新窗口" class="headerlink" title="打开新窗口"></a>打开新窗口</h1><p>入坑做ios的开发<br>其中在同一个storyboard中两个不同的ViewController跳转真是让我想破了头<br>最后终于找到了解决方案。<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> sb = <span class="type">UIStoryboard</span>(name:<span class="string">"Main"</span>, bundle: <span class="literal">nil</span>)</div><div class="line"><span class="keyword">let</span> vc = sb.instantiateViewController(withIdentifier: <span class="string">"vc"</span>) <span class="keyword">as</span>! <span class="type">MainViewController</span></div><div class="line"><span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>其中Main是storyboard的名称，vc是storyboard中的identifier。</p>
</blockquote>
<h1 id="解析JSON数据"><a href="#解析JSON数据" class="headerlink" title="解析JSON数据"></a>解析JSON数据</h1><p>因为做学校的教务系统接口，但是因为是用Swift语言开发，所以同样的找个方法快把整个百度翻过来了，好在最后还是解决了<br>调用了SwiftyJSON库，如果要使用的话先用Carthage进行中央库管理<br>然后在.swift文件中<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> SwiftyJSON</div></pre></td></tr></table></figure></p>
<p>同时我的解析代码如下:<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> url = <span class="type">NSURL</span>(string:<span class="string">"XXXXXXXXXXX"</span>)</div><div class="line"><span class="keyword">let</span> jsonData=<span class="type">NSData</span>(contentsOf: url! <span class="keyword">as</span> <span class="type">URL</span>)</div><div class="line"><span class="keyword">let</span> json=<span class="type">JSON</span>(data:jsonData! <span class="keyword">as</span> <span class="type">Data</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> msg=json[<span class="string">"msg"</span>]</div><div class="line"><span class="keyword">if</span>(msg==<span class="string">"ok"</span>)&#123;</div><div class="line"><span class="keyword">let</span> <span class="type">TrueName</span>=json[<span class="string">"data"</span>][<span class="string">"TrueName"</span>] <span class="comment">//姓名</span></div><div class="line">    </div><div class="line"><span class="keyword">let</span> class_name=json[<span class="string">"data"</span>][<span class="string">"class_name"</span>] <span class="comment">//班级</span></div><div class="line"><span class="keyword">let</span> dep_name=json[<span class="string">"data"</span>][<span class="string">"dep_name"</span>] <span class="comment">//学院</span></div><div class="line"><span class="keyword">let</span> studentKH=json[<span class="string">"data"</span>][<span class="string">"studentKH"</span>] <span class="comment">//学号</span></div><div class="line"><span class="type">Show</span>.text=<span class="string">"姓名:\(TrueName)\n学号:\(studentKH)\n学院:\(dep_name)\n班级:\(class_name)\n"</span></div></pre></td></tr></table></figure></p>
<h1 id="关闭虚拟键盘"><a href="#关闭虚拟键盘" class="headerlink" title="关闭虚拟键盘"></a>关闭虚拟键盘</h1><p>用了一万个方法，最后发现还是自己拖控件来的方便。。。<br><figure class="highlight swift"><table><tr><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">EditEnd</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.<span class="type">Password</span>.resignFirstResponder()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>记得绑定 Did End on Exit事件上</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android第一行代码-存储]]></title>
      <url>/2016/08/11/AndroidCapter6/</url>
      <content type="html"><![CDATA[<p>感觉现在开始码笔记都是晚上了，练车真是一个耗时的项目。</p>
<h1 id="文本存储"><a href="#文本存储" class="headerlink" title="文本存储"></a>文本存储</h1><p>这方面就是JAVA，没什么好讲的，直接上代码。</p>
<h2 id="save-方法"><a href="#save-方法" class="headerlink" title="save()方法"></a>save()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String inputText)</span> </span>&#123;</div><div class="line">	FileOutputStream out = <span class="keyword">null</span>;</div><div class="line">	BufferedWriter writer = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		out = openFileOutput(<span class="string">"data"</span>, Context.MODE_PRIVATE);</div><div class="line">		writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</div><div class="line">		writer.write(inputText);</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</div><div class="line">				writer.close();</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="load-方法"><a href="#load-方法" class="headerlink" title="load()方法"></a>load()方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line">	FileInputStream in = <span class="keyword">null</span>;</div><div class="line">	BufferedReader reader = <span class="keyword">null</span>;</div><div class="line">	StringBuilder content = <span class="keyword">new</span> StringBuilder();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		in = openFileInput(<span class="string">"data"</span>);</div><div class="line">		reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</div><div class="line">		String line = <span class="string">""</span>;</div><div class="line">		<span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">			content.append(line);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				reader.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> content.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改onCreate-方法"><a href="#修改onCreate-方法" class="headerlink" title="修改onCreate()方法"></a>修改onCreate()方法</h2><p>APP启动时检测文本文件，如果不为空则读取内容，并且将光标移至文本末尾<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(R.layout.activity_main);</div><div class="line">	edit = (EditText) findViewById(R.id.edit);</div><div class="line">	String inputText = load();</div><div class="line">	<span class="keyword">if</span> (!TextUtils.isEmpty(inputText)) &#123;</div><div class="line">		edit.setText(inputText);</div><div class="line">		edit.setSelection(inputText.length());</div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"Restoring succeeded"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="onDestroy-方法"><a href="#onDestroy-方法" class="headerlink" title="onDestroy()方法"></a>onDestroy()方法</h2><p>在APP关闭时执行save方法保存<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onDestroy();</div><div class="line">	String inputText = edit.getText().toString();</div><div class="line">	save(inputText);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>我真是越来越懒了 逃<del>记得新建一个EditText控件，巴拉巴拉</del>~</p>
</blockquote>
<h1 id="SharedPreferences存储"><a href="#SharedPreferences存储" class="headerlink" title="SharedPreferences存储"></a>SharedPreferences存储</h1><p>第一次知道还有这种存储方式的，真是孤陋寡闻了，快点码完我去看诛仙了TAT</p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SharedPreferences.Editor editor = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE).edit();</div><div class="line">editor.putString(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</div><div class="line">editor.putInt(<span class="string">"age"</span>, <span class="number">28</span>);</div><div class="line">editor.putBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</div><div class="line">editor.commit();</div></pre></td></tr></table></figure>
<p>会在/data/data/&lt;包名&gt;/shared_prefs中新建一个data.xml的文件，里面的内容是这样的<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8' standalone='yes' ?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">int</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"28"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">boolean</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SharedPreferences pref = getSharedPreferences(<span class="string">"data"</span>, MODE_PRIVATE);</div><div class="line">String name = pref.getString(<span class="string">"name"</span>, <span class="string">""</span>);</div><div class="line"><span class="keyword">int</span> age = pref.getInt(<span class="string">"age"</span>, <span class="number">0</span>);</div><div class="line"><span class="keyword">boolean</span> married = pref.getBoolean(<span class="string">"married"</span>, <span class="keyword">false</span>);</div><div class="line">Log.d(<span class="string">"MainActivity"</span>, <span class="string">"name is "</span> + name);</div><div class="line">Log.d(<span class="string">"MainActivity"</span>, <span class="string">"age is "</span> + age);</div><div class="line">Log.d(<span class="string">"MainActivity"</span>, <span class="string">"married is "</span> + married);</div></pre></td></tr></table></figure>
<p>简洁明白，嗯我先去看诛仙，回来再来码，就这么决定了</p>
<h1 id="SQLite数据库存储"><a href="#SQLite数据库存储" class="headerlink" title="SQLite数据库存储"></a>SQLite数据库存储</h1><p>心情不好，继续码笔记</p>
<h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>新建一个继承SQLiteOpenHelper的MyDatabaseHelper类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDatabaseHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">//创建一个BOOK表</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_BOOK = <span class="string">"create table Book ("</span></div><div class="line">			+ <span class="string">"id integer primary key autoincrement, "</span> </div><div class="line">			+ <span class="string">"author text, "</span></div><div class="line">			+ <span class="string">"price real, "</span> </div><div class="line">			+ <span class="string">"pages integer, "</span> </div><div class="line">			+ <span class="string">"name text)"</span>;</div><div class="line">	<span class="comment">//创建一个Category表</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CREATE_CATEGORY = <span class="string">"create table Category ("</span></div><div class="line">			+ <span class="string">"id integer primary key autoincrement, "</span></div><div class="line">			+ <span class="string">"category_name text, "</span></div><div class="line">			+ <span class="string">"category_code integer)"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Context mContext;</div><div class="line"><span class="comment">//name是数据库名，Factory一般传入null，version是版本号</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyDatabaseHelper</span><span class="params">(Context context, String name,</span></span></div><div class="line">			CursorFactory factory, <span class="keyword">int</span> version) &#123;</div><div class="line">		<span class="keyword">super</span>(context, name, factory, version);</div><div class="line">		mContext = context;</div><div class="line">	&#125;</div><div class="line"><span class="comment">//执行语句创建数据库，其实你直接输也行</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</div><div class="line">		db.execSQL(CREATE_BOOK);</div><div class="line">		db.execSQL(CREATE_CATEGORY);</div><div class="line">		Toast.makeText(mContext, <span class="string">"Create succeeded"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line"><span class="comment">//就是SQL语句</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</div><div class="line">		db.execSQL(<span class="string">"drop table if exists Book"</span>);</div><div class="line">		db.execSQL(<span class="string">"drop table if exists Category"</span>);</div><div class="line">		onCreate(db);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在MainActivity中加入以下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">dbHelper = <span class="keyword">new</span> MyDatabaseHelper(<span class="keyword">this</span>, <span class="string">"BookStore.db"</span>, <span class="keyword">null</span>, <span class="number">1</span>);</div><div class="line">   dbHelper.getWritableDatabase();</div></pre></td></tr></table></figure></p>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line"><span class="comment">//开始第一条数据</span></div><div class="line">values.put(<span class="string">"name"</span>, <span class="string">"The Da Vinci Code"</span>);</div><div class="line">values.put(<span class="string">"author"</span>, <span class="string">"Dan Brown"</span>);</div><div class="line">values.put(<span class="string">"pages"</span>, <span class="number">454</span>);</div><div class="line">values.put(<span class="string">"price"</span>, <span class="number">16.96</span>);</div><div class="line">db.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</div><div class="line">values.clear();</div><div class="line"><span class="comment">//开始第二条数据</span></div><div class="line">values.put(<span class="string">"name"</span>, <span class="string">"The Lost Symbol"</span>);</div><div class="line">values.put(<span class="string">"author"</span>, <span class="string">"Dan Brown"</span>);</div><div class="line">values.put(<span class="string">"pages"</span>, <span class="number">510</span>);</div><div class="line">values.put(<span class="string">"price"</span>, <span class="number">19.95</span>);</div><div class="line">db.insert(<span class="string">"Book"</span>, <span class="keyword">null</span>, values);</div></pre></td></tr></table></figure>
<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</div><div class="line">values.put(<span class="string">"price"</span>, <span class="number">10.99</span>);</div><div class="line">db.update(<span class="string">"Book"</span>, values, <span class="string">"name = ?"</span>,</div><div class="line">		<span class="keyword">new</span> String[] &#123; <span class="string">"The Da Vinci Code"</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">db.delete(<span class="string">"Book"</span>, <span class="string">"pages &gt; ?"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"500"</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">SQLiteDatabase db = dbHelper.getWritableDatabase();</div><div class="line">Cursor cursor = db.query(<span class="string">"Book"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>,</div><div class="line">		<span class="keyword">null</span>);</div><div class="line"><span class="keyword">if</span> (cursor.moveToFirst()) &#123;</div><div class="line">	<span class="keyword">do</span> &#123;</div><div class="line">		String name = cursor.getString(cursor</div><div class="line">				.getColumnIndex(<span class="string">"name"</span>));</div><div class="line">		String author = cursor.getString(cursor</div><div class="line">				.getColumnIndex(<span class="string">"author"</span>));</div><div class="line">		<span class="keyword">int</span> pages = cursor.getInt(cursor</div><div class="line">				.getColumnIndex(<span class="string">"pages"</span>));</div><div class="line">		<span class="keyword">double</span> price = cursor.getDouble(cursor</div><div class="line">				.getColumnIndex(<span class="string">"price"</span>));</div><div class="line">		Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book name is "</span> + name);</div><div class="line">		Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book author is "</span> + author);</div><div class="line">		Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book pages is "</span> + pages);</div><div class="line">		Log.d(<span class="string">"MainActivity"</span>, <span class="string">"book price is "</span> + price);</div><div class="line">	&#125; <span class="keyword">while</span> (cursor.moveToNext());</div><div class="line">&#125;</div><div class="line">cursor.close();</div></pre></td></tr></table></figure>
<h2 id="直接使用SQL操作数据库"><a href="#直接使用SQL操作数据库" class="headerlink" title="直接使用SQL操作数据库"></a>直接使用SQL操作数据库</h2><p>我觉得这种方法简单多了，放几个实例部分代码<br>创建表<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">db.execSQL(<span class="string">"DROP TABLE IF EXISTS students"</span>);  </div><div class="line">da.execSQL(<span class="string">"CREATE TABLE IF NOT EXISTS student (_id INTEGER PRIMARY KEY AUTOINCREMENT, Name text,Number INTEGER, Chinese INTEGER,Math INTEGER, English integer)"</span>);</div></pre></td></tr></table></figure></p>
<p>依据Select编辑框里面内容删除数据<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">da.execSQL(<span class="string">"DELETE FROM student WHERE Name=?"</span>,<span class="keyword">new</span> String[]&#123;Select.getText().toString()&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>数据库示例，大一做的，<a href="https://github.com/isnine/Android-Student" target="_blank" rel="external">学生成绩管理系统</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android第一行代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android第一行代码-广播]]></title>
      <url>/2016/08/10/AndroidCapter5/</url>
      <content type="html"><![CDATA[<p>今天上午不要练车，所以继续来码学习笔记</p>
<h2 id="动态注册监听网络变化"><a href="#动态注册监听网络变化" class="headerlink" title="动态注册监听网络变化"></a>动态注册监听网络变化</h2><h3 id="创建两个实例"><a href="#创建两个实例" class="headerlink" title="创建两个实例"></a>创建两个实例</h3><p>IntentFilter用于监听广播，NetworkChangeReceiver用于监听广播变化（应该是这样）<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> IntentFilter intentFilter;</div><div class="line"><span class="keyword">private</span> NetworkChangeReceiver networkChangeReceiver;</div></pre></td></tr></table></figure></p>
<h3 id="新建一个NetworkChangeReceiver类继承BroadcastReceiver"><a href="#新建一个NetworkChangeReceiver类继承BroadcastReceiver" class="headerlink" title="新建一个NetworkChangeReceiver类继承BroadcastReceiver"></a>新建一个NetworkChangeReceiver类继承BroadcastReceiver</h3><p>当网络变化时onReceive()方法就会执行<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context,Intent intent)</span></span>&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"network changes"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="在onDestroy-中进行取消注册"><a href="#在onDestroy-中进行取消注册" class="headerlink" title="在onDestroy()中进行取消注册"></a>在onDestroy()中进行取消注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">super</span>.onDestroy();</div><div class="line">	unregisterReceiver(networkChangeReceiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在onCreate-中添加代码"><a href="#在onCreate-中添加代码" class="headerlink" title="在onCreate()中添加代码"></a>在onCreate()中添加代码</h3><p>实例化IntentFilter()，并给它添加一个android.net.conn.CONNECTIVITY_CHANGE值，因为当网络变化时系统广播的正是android.net.conn.CONNECTIVITY_CHANGE。<br>接着调用registerReceiver方法进行注册，将networkChangeReceiver和intentFilter传值进去<br>这样当intentFilter监听的广播出现时，就会执行networkChangeReceiver中的onReceive（我猜是这样）<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">intentFilter = <span class="keyword">new</span> IntentFilter();</div><div class="line">intentFilter.addAction(<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span>);</div><div class="line">networkChangeReceiver = <span class="keyword">new</span> NetworkChangeReceiver();</div><div class="line">registerReceiver(networkChangeReceiver,intentFilter);</div></pre></td></tr></table></figure></p>
<h3 id="准备的告诉用户当前是否有网络"><a href="#准备的告诉用户当前是否有网络" class="headerlink" title="准备的告诉用户当前是否有网络"></a>准备的告诉用户当前是否有网络</h3><p>通过getSystemService()方法得到ConnectivityManager的实例，然后调用getActivityNetworkInfo()方法得到NetworkInfo的实例，接着调用NetworkInfo的isAvailable()方法，就可以判断是否有网络了。<br>在onReceive()中加入以下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context,Intent intent)</span></span>&#123;</div><div class="line">	ConnectivityManager connectionManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);</div><div class="line">	NetworkInfo networkInfo=connectionManager.getActiveNetworkInfo();</div><div class="line">	<span class="keyword">if</span>(networkInfo!=<span class="keyword">null</span>&amp;&amp;networkInfo.isAvailable())&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"network is available"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		Toast.makeText(context, <span class="string">"network is unavailable"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="静态注册实现开机启动"><a href="#静态注册实现开机启动" class="headerlink" title="静态注册实现开机启动"></a>静态注册实现开机启动</h2><p>动态注册的广播接收器可以自由的控制注册和注销，但是也有致命的缺点就是，必须在程序启动后才可以接受广播，如果想要在程序未启动的情况下就可以接受广播，就需要使用静态注册的方法了。<br>新建一个BootCompleteReceiver类继承BroadcastReceiver<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootCompleteReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"Boot Complete"</span>, Toast.LENGTH_LONG).show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="修改AndroidManifest-xml文件"><a href="#修改AndroidManifest-xml文件" class="headerlink" title="修改AndroidManifest.xml文件"></a>修改AndroidManifest.xml文件</h3><p>加入权限<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.RECEIVE_BOOT_COMPLETED"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>一个新的标签<receiver>，所有的静态注册的广播接收器都是在这里进行注册，它的用法和<activity>类似，先是通过android:name来指定具体注册哪一个广播接收器，接着在<intent-filiter>标签里加入想要接收的广播，比如系统启动时会发生一条”android.intent.action.BOOT_COMPLETED”，这里在这里添加。<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;receiver android:name=".BootCompleteReceiver"&gt;</div><div class="line">    &lt;intent-filter &gt;</div><div class="line">        &lt;action android:name="android.intent.action.BOOT_COMPLETED"/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure></intent-filiter></activity></receiver></p>
<blockquote>
<p>小米4真机调试这一步失败，也许因为安全措施的原因？虚拟机测试通过。</p>
</blockquote>
<h2 id="发送自定义广播"><a href="#发送自定义广播" class="headerlink" title="发送自定义广播"></a>发送自定义广播</h2><p>新建一个MyBroadcastReceiver继承BroadcastReceiver<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"received in MyBroadcastReceive"</span>,</div><div class="line">				Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在AndroidManifest-xml中进行注册"><a href="#在AndroidManifest-xml中进行注册" class="headerlink" title="在AndroidManifest.xml中进行注册"></a>在AndroidManifest.xml中进行注册</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;receiver android:name=".MyBroadcastReceiver"&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="com.example.broadcasttest.MY_BROADCAST"/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<h3 id="在MainActivity中添加代码"><a href="#在MainActivity中添加代码" class="headerlink" title="在MainActivity中添加代码"></a>在MainActivity中添加代码</h3><p>可以放在按钮事件里面执行<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">sendBroadcast(intent)；</div></pre></td></tr></table></figure></p>
<h2 id="发生有序广播"><a href="#发生有序广播" class="headerlink" title="发生有序广播"></a>发生有序广播</h2><p>一个应用程序发出的广播，另一个应用程序应该也可以接收到</p>
<h3 id="新建另一个APP项目，然后新建一个AnotherBroadcastReceiver类"><a href="#新建另一个APP项目，然后新建一个AnotherBroadcastReceiver类" class="headerlink" title="新建另一个APP项目，然后新建一个AnotherBroadcastReceiver类"></a>新建另一个APP项目，然后新建一个AnotherBroadcastReceiver类</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"received in AnotherBroadcastReceiver"</span>,</div><div class="line">				Toast.LENGTH_SHORT).show();</div><div class="line">		abortBroadcast();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在AndroidManifest-xml中注册"><a href="#在AndroidManifest-xml中注册" class="headerlink" title="在AndroidManifest.xml中注册"></a>在AndroidManifest.xml中注册</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;receiver</div><div class="line">    android:name=".AnotherBroadcastReceiver"</div><div class="line">    android:priority="100" &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="com.example.broadcasttest.MY_BROADCAST" /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><p>先运行新建的APP，然后再打开上一个APP，发生广播，会发现弹出两个Toast。</p>
<blockquote>
<p>小米4真机调试这一步失败，也许因为安全措施的原因？虚拟机测试通过。</p>
</blockquote>
<h2 id="发生有序广播-1"><a href="#发生有序广播-1" class="headerlink" title="发生有序广播"></a>发生有序广播</h2><p>改动一行代码，第一个参数仍是Intent，第二个参数是null<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.broadcasttest.MY_BROADCAST"</span>);</div><div class="line">sendOrderedBroadcast(intent,<span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<h3 id="设定先后顺序"><a href="#设定先后顺序" class="headerlink" title="设定先后顺序"></a>设定先后顺序</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;receiver android:name=".MyBroadcastReceiver"&gt;</div><div class="line">    &lt;intent-filter android:priority="100"&gt;</div><div class="line">        &lt;action android:name="com.example.broadcasttest.MY_BROADCAST"/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/receiver&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>android:priority中的数值越大优先级越高</p>
</blockquote>
<h3 id="设置是否允许扩散"><a href="#设置是否允许扩散" class="headerlink" title="设置是否允许扩散"></a>设置是否允许扩散</h3><p>在MyBroadcastReceiver中<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">	public void onReceive(Context context, Intent intent) &#123;</div><div class="line">		Toast.makeText(context, "received in MyBroadcastReceive",</div><div class="line">				Toast.LENGTH_SHORT).show();</div><div class="line">		abortBroadcast();  //截断广播</div><div class="line">	&#125;</div><div class="line">``` </div><div class="line">## 使用本地广播</div><div class="line">广播只在本地应用程序中进行。</div><div class="line">### 创建两个实例</div><div class="line">IntentFilter用于监听广播，NetworkChangeReceiver用于监听广播变化（应该是这样）</div><div class="line">``` java</div><div class="line">	private LocalReceiver localReceiver;</div><div class="line">	private LocalBroadcastManager localBroadcastManager;</div></pre></td></tr></table></figure></p>
<h3 id="新建一个NetworkChangeReceiver类继承BroadcastReceiver-1"><a href="#新建一个NetworkChangeReceiver类继承BroadcastReceiver-1" class="headerlink" title="新建一个NetworkChangeReceiver类继承BroadcastReceiver"></a>新建一个NetworkChangeReceiver类继承BroadcastReceiver</h3><p>当网络变化时onReceive()方法就会执行<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		Toast.makeText(context, <span class="string">"received local broadcast"</span>,</div><div class="line">				Toast.LENGTH_SHORT).show();</div><div class="line">	&#125;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在onDestroy-中进行取消注册-1"><a href="#在onDestroy-中进行取消注册-1" class="headerlink" title="在onDestroy()中进行取消注册"></a>在onDestroy()中进行取消注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">super</span>.onDestroy();</div><div class="line">	localBroadcastManager.unregisterReceiver(localReceiver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在onCreate-中添加代码-1"><a href="#在onCreate-中添加代码-1" class="headerlink" title="在onCreate()中添加代码"></a>在onCreate()中添加代码</h3><p>通过LocalBroadcastManager的getInstance()方法得到它的一个实例，然后在注册广播接收器的时候调用LocalBroadcastManager的registerReceiver()方法。<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">localBroadcastManager = LocalBroadcastManager.getInstance(this);</div><div class="line">		intentFilter = new IntentFilter();</div><div class="line">		intentFilter.addAction("com.example.broadcasttest.LOCAL_BROADCAST");</div><div class="line">		localReceiver = new LocalReceiver();</div><div class="line">		localBroadcastManager.registerReceiver(localReceiver, intentFilter);</div><div class="line">```  </div><div class="line">### 发送广播</div><div class="line">发送广播的时候，调用LocalBroadcastManager的sendBroadcast()方法</div><div class="line">``` java</div><div class="line">				Intent intent = new Intent(</div><div class="line">						"com.example.broadcasttest.LOCAL_BROADCAST");</div><div class="line">				localBroadcastManager.sendBroadcast(intent);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android第一行代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android第一行代码-碎片]]></title>
      <url>/2016/08/07/AndroidCapter4/</url>
      <content type="html"><![CDATA[<p>第四章的学习了，感觉碎片有点难，慢慢码代码。</p>
<h2 id="布局中添加碎片"><a href="#布局中添加碎片" class="headerlink" title="布局中添加碎片"></a>布局中添加碎片</h2><h3 id="新建两个布局文件，left-fragment-xml和right-fragment-xml"><a href="#新建两个布局文件，left-fragment-xml和right-fragment-xml" class="headerlink" title="新建两个布局文件，left_fragment.xml和right_fragment.xml"></a>新建两个布局文件，left_fragment.xml和right_fragment.xml</h3><p>线性布局，不用特别设置，</p>
<h3 id="新建两个继承Fragment的类"><a href="#新建两个继承Fragment的类" class="headerlink" title="新建两个继承Fragment的类"></a>新建两个继承Fragment的类</h3><p>另一个类类似以下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeftFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></div><div class="line">			Bundle savedInstanceState) &#123;</div><div class="line">		View view = inflater.inflate(R.layout.left_fragment, container, <span class="keyword">false</span>);</div><div class="line">		<span class="keyword">return</span> view;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="修改activity-main-xml代码"><a href="#修改activity-main-xml代码" class="headerlink" title="修改activity_main.xml代码"></a>修改activity_main.xml代码</h3><p>注意为相对布局<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">    android:id=<span class="string">"@+id/left_fragment"</span></div><div class="line">    android:name=<span class="string">"com.example.test.LeftFragment"</span></div><div class="line">    android:layout_width=<span class="string">"0dp"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:layout_weight=<span class="string">"1"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;fragment</div><div class="line">    android:id=<span class="string">"@+id/right_fragment"</span></div><div class="line">    android:name=<span class="string">"com.example.test.RightFragment"</span></div><div class="line">    android:layout_width=<span class="string">"0dp"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:layout_weight=<span class="string">"1"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="动态加载碎片"><a href="#动态加载碎片" class="headerlink" title="动态加载碎片"></a>动态加载碎片</h2><h3 id="新建一个碎片"><a href="#新建一个碎片" class="headerlink" title="新建一个碎片"></a>新建一个碎片</h3><p>新建一个another_right_fragment.xml和AnotherRightFragment类作为另一个右侧碎片<br>代码类似LeftFragment</p>
<h3 id="修改activity-main-xml代码-1"><a href="#修改activity-main-xml代码-1" class="headerlink" title="修改activity_main.xml代码"></a>修改activity_main.xml代码</h3><p>将右侧碎片放在了一个FrameLayout中<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;FrameLayout </div><div class="line">    android:id="@+id/right_layout"</div><div class="line">    android:layout_width="0dp"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:layout_weight="1" &gt;        </div><div class="line">    &lt;fragment</div><div class="line">    android:id="@+id/right_fragment"</div><div class="line">    android:name="com.example.test.RightFragment"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent" /&gt;     </div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure></p>
<h3 id="在按钮中添加事件"><a href="#在按钮中添加事件" class="headerlink" title="在按钮中添加事件"></a>在按钮中添加事件</h3><p>1.创建待添加的碎片实例。<br>2.获取到FragmentManager，直接调用getFragmentManager()方法可以得到<br>3.开启一个事务，通过beginTransaction()方法开启。<br>4.向容器内加入碎片，一般通过replace()方法实现，需要传入容器的id和待添加的碎片实例。<br>5.提交事务，调用commit（）方法来完成。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">AnotherRightFragment fragment = <span class="keyword">new</span> AnotherRightFragment();</div><div class="line">FragmentManager fragmentManager = getFragmentManager();</div><div class="line">FragmentTransaction transaction = fragmentManager</div><div class="line">		.beginTransaction();</div><div class="line">transaction.replace(R.id.right_layout, fragment);</div><div class="line">transaction.addToBackStack(<span class="keyword">null</span>);   <span class="comment">//添加返回栈，Back键返回上一个碎片</span></div><div class="line">transaction.commit();</div></pre></td></tr></table></figure></p>
<h2 id="碎片事件"><a href="#碎片事件" class="headerlink" title="碎片事件"></a>碎片事件</h2><p>1.运行状态<br>2.暂停状态<br>3.停止状态<br>4.销毁状态</p>
<h2 id="动态加载布局的技巧"><a href="#动态加载布局的技巧" class="headerlink" title="动态加载布局的技巧"></a>动态加载布局的技巧</h2><p>使用限定符</p>
<h3 id="修改layout文件夹下面的activty-main-xml文件"><a href="#修改layout文件夹下面的activty-main-xml文件" class="headerlink" title="修改layout文件夹下面的activty_main.xml文件"></a>修改layout文件夹下面的activty_main.xml文件</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"&gt;</div><div class="line">    &lt;fragment</div><div class="line">        android:id="@+id/left_fragment"</div><div class="line">        android:name="com.example.test.LeftFragment"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent" /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h3 id="在res文件夹下新建一个layout-large文件夹"><a href="#在res文件夹下新建一个layout-large文件夹" class="headerlink" title="在res文件夹下新建一个layout-large文件夹"></a>在res文件夹下新建一个layout-large文件夹</h3><p>新建一个布局，也是activty_main.xml文件。这个文件就会适配平板等大屏幕<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"&gt;</div><div class="line">    &lt;fragment</div><div class="line">        android:id="@+id/left_fragment"</div><div class="line">        android:name="com.example.test.LeftFragment"</div><div class="line">        android:layout_width="0dp"</div><div class="line">        android:layout_height="match_parent" </div><div class="line">        android:layout_weight="1" /&gt;</div><div class="line">    &lt;fragment</div><div class="line">        android:id="@+id/right_fragment"</div><div class="line">        android:name="com.example.test.RightFragment"</div><div class="line">        android:layout_width="0dp"</div><div class="line">        android:layout_height="match_parent" </div><div class="line">        android:layout_weight="3" /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>可以依照其他限定符，small,normal,large,xlarge，也可以使用最小宽度限定符。layout-sw600dp</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android第一行代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android第一行代码-UI界面]]></title>
      <url>/2016/08/04/AndroidCapter3/</url>
      <content type="html"><![CDATA[<p>龟速的学习进度终于到第三章了，上午学驾照，下午学Android，晚上计划计划旅行/看直播/娱乐。<br>嗯，认真的码学习笔记。</p>
<h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>文字对齐<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:gravity=<span class="string">"center"</span></div></pre></td></tr></table></figure></p>
<p>字体大小与颜色<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:textSize=<span class="string">"24sp"</span></div><div class="line">android:textColor=<span class="string">"#00ff00"</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><h3 id="方法一-注册监听器的方法"><a href="#方法一-注册监听器的方法" class="headerlink" title="方法一-注册监听器的方法"></a>方法一-注册监听器的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> Button button;</div><div class="line">	<span class="meta">@Override</span> </div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		button=(Button)findViewById(R.id.button);</div><div class="line">		button.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">			   <span class="comment">//添加事件</span></div><div class="line">		  	   &#125;</div><div class="line">			   &#125;);</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h3 id="方法二-接口的方式注册"><a href="#方法二-接口的方式注册" class="headerlink" title="方法二-接口的方式注册"></a>方法二-接口的方式注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line"><span class="keyword">private</span> Button button;		</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		button=(Button)findViewById(R.id.button);</div><div class="line">		button.setOnClickListener(<span class="keyword">this</span>)</div><div class="line">		&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>&#123;</div><div class="line">	<span class="keyword">switch</span>(v.getId())&#123;</div><div class="line">	<span class="keyword">case</span> R.id.button:</div><div class="line">	  <span class="comment">//添加事件</span></div><div class="line">	  <span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">	  <span class="keyword">break</span>;</div><div class="line">	  &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><p>隐藏字体<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:hint=<span class="string">"Type something here"</span></div></pre></td></tr></table></figure></p>
<p>设置行数<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:maxLines=<span class="string">"2"</span></div></pre></td></tr></table></figure></p>
<p>获得编辑框内容<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">private</span> EditText editText;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">     editText = (EditText)findViewById(R.id.edit_text);</div><div class="line">     String inputText=editText.getText().toString();</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3> <figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:src=<span class="string">"@drawable/ic_launcher"</span></div></pre></td></tr></table></figure>
<h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3> <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="keyword">private</span> ImageView imageView;</div><div class="line"> 	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">     imageView = (ImageView)findViewById(R.id.image_view);</div><div class="line">     imageView.setImageResource(R.drawable.jelly_bean);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>进度条控件</p>
<h3 id="静态设置可见属性"><a href="#静态设置可见属性" class="headerlink" title="静态设置可见属性"></a>静态设置可见属性</h3><p>三种模式,visible-可见，invisible-不可见但占位置,gone-不可见且不占位置<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:visibility=<span class="string">"visible"</span></div></pre></td></tr></table></figure></p>
<h3 id="动态设置可见属性"><a href="#动态设置可见属性" class="headerlink" title="动态设置可见属性"></a>动态设置可见属性</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line"> ``` java</div><div class="line"> private ProgressBar progressBar;</div><div class="line"> 	@Override</div><div class="line">	protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">		super.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">     progressBar = (ProgressBar)findViewById(R.id.progressBar_bar);</div><div class="line">     if(progressBar.getVisibility()==View.VISIBLE)&#123;</div><div class="line">          progressBar.setVisibility(View.VISIBLE);</div><div class="line">     &#125;     </div><div class="line">&#125;</div><div class="line">### 切换样式</div><div class="line">将圈形切换成条形</div><div class="line">``` java</div><div class="line">        android:max="100"</div><div class="line">        style="?android:attr/progressBarStyleHorizontal"</div></pre></td></tr></table></figure>
<h3 id="进度条进度"><a href="#进度条进度" class="headerlink" title="进度条进度"></a>进度条进度</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> progress=progressBar.getProgress();</div><div class="line">progress=progress + <span class="number">10</span>;</div><div class="line">progressBar.setProgress(progress);</div></pre></td></tr></table></figure>
<h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h2><p>AlertDialog可以在当前的界面弹出一个对话框，这个对话框是置顶于所有界面元素之上。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(MainActivity.<span class="keyword">this</span>);</div><div class="line">dialog.setTitle(<span class="string">"标题"</span>);</div><div class="line">dialog.setMessage(<span class="string">"正文"</span>);</div><div class="line">dialog.setCancelable(<span class="keyword">false</span>);</div><div class="line">dialog.setPositiveButton(<span class="string">"OK"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span></span>&#123;</div><div class="line"><span class="comment">//OK按钮事件</span></div><div class="line">&#125;&#125;);</div><div class="line">dialog.setNegativeButton(<span class="string">"Cancel"</span>,<span class="keyword">new</span> DialogInterface.OnClickListener()&#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,<span class="keyword">int</span> which)</span></span>&#123;</div><div class="line"><span class="comment">//取消按钮事件</span></div><div class="line">&#125;&#125;);</div><div class="line">dialog.show();</div></pre></td></tr></table></figure></p>
<h2 id="ProgressDialog"><a href="#ProgressDialog" class="headerlink" title="ProgressDialog"></a>ProgressDialog</h2><p>ProgressDialog和AlertDialog类似，不同的是ProgressDialog会显示一个进度条。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(MainActivity.<span class="keyword">this</span>);</div><div class="line">progressDialog.setTitle(<span class="string">"This is ProgressDialog"</span>);</div><div class="line">progressDialog.setMessage(<span class="string">"Loading..."</span>);</div><div class="line">progressDialog.setCancelable(<span class="keyword">true</span>);</div><div class="line">progressDialog.show();</div></pre></td></tr></table></figure></p>
<h2 id="四种基本布局"><a href="#四种基本布局" class="headerlink" title="四种基本布局"></a>四种基本布局</h2><h3 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h3><p>线性布局，可以通过android:orientation属性指定排列方向，垂直vertical,水平horizontal<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:orientation=<span class="string">"horizontal"</span></div></pre></td></tr></table></figure></p>
<h3 id="控件参数"><a href="#控件参数" class="headerlink" title="控件参数"></a>控件参数</h3><p>android:layout_width  - 宽度，可以设置铺满”match_parent”,适当”wrap_content”，自定”2px”<br>android:layout_height - 高度，可以设置铺满”match_parent”,适当”wrap_content”，自定”2px”<br>android:layout_gravity - 设置控件在布局中对齐方式，可以设置”top”,”center_vertical”,”bottom”<br>android:layout_weight - 按照比例的方式指定控件大小<br>使用方法，两个控件都这样设置，会按1:1比例分割<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:layout_width = “<span class="number">0</span>dp”</div><div class="line">android:layout_weight = <span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<h2 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h2><p>相对布局，用的比较多，用法比较多，代码就先略过了</p>
<h2 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h2><p>所有的控件都放在左上角</p>
<h2 id="TableLayout"><a href="#TableLayout" class="headerlink" title="TableLayout"></a>TableLayout</h2><p>允许我们使用表格的方式来排列控件<br>例子:<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;TableLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:stretchColumns="1" &gt;</div><div class="line">    &lt;TableRow&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:text="Account:" /&gt;</div><div class="line">        &lt;EditText</div><div class="line">            android:id="@+id/account"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:hint="Input your account" /&gt;</div><div class="line">    &lt;/TableRow&gt;</div><div class="line">    &lt;TableRow&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id="@+id/login"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_span="2"</div><div class="line">            android:text="Login" /&gt;</div><div class="line">    &lt;/TableRow&gt;</div><div class="line">&lt;/TableLayout&gt;</div></pre></td></tr></table></figure></p>
<p>在TableLayout中每加入一个TableRow就表示在表格中添加了一行，然后在TableRow中每加入一个控件就表示在该行中加入了一列。TableRow中的控件是不能指定宽度的。<br>可以使用android:layout_span=”2”让登陆按钮占两行，使用android:inputType=”textPassword”让其变成密码输入框。<br>使表格占满整个屏幕宽度。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:stretchColumns=<span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><p>这里以自定义标题为例子</p>
<h3 id="新建一个title-xml"><a href="#新建一个title-xml" class="headerlink" title="新建一个title.xml"></a>新建一个title.xml</h3><p>两个Button，一个TextView构成一个标题栏</p>
<h3 id="新建一个TitleLayout继承LinearLayout"><a href="#新建一个TitleLayout继承LinearLayout" class="headerlink" title="新建一个TitleLayout继承LinearLayout"></a>新建一个TitleLayout继承LinearLayout</h3><p>这里写自定义标题栏的事件代码<br>列子代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TitleLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(context, attrs);</div><div class="line">		LayoutInflater.from(context).inflate(R.layout.title, <span class="keyword">this</span>);</div><div class="line">		Button titleBack = (Button) findViewById(R.id.title_back);</div><div class="line">		Button titleEdit = (Button) findViewById(R.id.title_edit);</div><div class="line">		titleBack.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				((Activity) getContext()).finish();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		titleEdit.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">				Toast.makeText(getContext(), <span class="string">"You clicked Edit button"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在activity-main-xml引入控件"><a href="#在activity-main-xml引入控件" class="headerlink" title="在activity_main.xml引入控件"></a>在activity_main.xml引入控件</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;com.example.uicustomviews.TitleLayout</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="wrap_content"</div><div class="line">    &gt;&lt;/com.example.uicustomviews.TitleLayout&gt;</div></pre></td></tr></table></figure>
<h2 id="单位和尺寸"><a href="#单位和尺寸" class="headerlink" title="单位和尺寸"></a>单位和尺寸</h2><p>px - 像素<br>pt - 磅，一般作为字体单位<br>dp - 密度，会根据手机分辨率自动调节</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android第一行代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android第一行代码-探究活动]]></title>
      <url>/2016/07/30/AndroidCapter2/</url>
      <content type="html"><![CDATA[<h2 id="活动初始化"><a href="#活动初始化" class="headerlink" title="活动初始化"></a>活动初始化</h2><p>新建一个项目，首先要输入的代码便是<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自己去网上搜索了下这行代码，网上给出的解释如下</p>
<blockquote>
<p>每个activity都要进行一些必要的初始化，而这些初始化就是通过调用父类的构造函数来进行的，举个例子，生成一个空白的activity,起码有一个标题，这个标题是怎样关联和生成的，就是通过构造函数来处理的啦。<br>事实上，如果没有这行代码，程序启动时会发生崩溃。</p>
</blockquote>
<a id="more"></a>
<h2 id="活动中加载布局"><a href="#活动中加载布局" class="headerlink" title="活动中加载布局"></a>活动中加载布局</h2><p>.class文件里面会写程序的代码，而.xml界面文件里面则会保存APP的外观，在我个人看来，就像肉与灵魂的关系，.xml文件里修改外表，而.class文件里面决定每一个部件会发生什么行为<br>加载布局<br>在Oncrete函数中写<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">setContentView(R.layout.first_layout);</div></pre></td></tr></table></figure></p>
<h2 id="在AndroidManifest文件中注册"><a href="#在AndroidManifest文件中注册" class="headerlink" title="在AndroidManifest文件中注册"></a>在AndroidManifest文件中注册</h2><p>完成了.class文件和.xml文件的关联后，我们还需要在AndroidMainfest.xml文件中进行注册<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line"></div><div class="line">&lt;activity</div><div class="line">    android:name="com.example.activitylifecycletest.MainActivity"</div><div class="line">    android:label="@string/app_name" &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name="android.intent.action.MAIN" /&gt;</div><div class="line"></div><div class="line">        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>每一个Android项目都会包含一个AndroidManifest.xml文件，这个文件包含了APK所需的系统权限等。<br>  开发文档：The manifest tag is the root of an AndroidManifest.xml file, describing the contents of an Android package (.apk) file. One attribute must always be supplied: package gives a unique name for the package, using a Java-style naming convention to avoid name collisions. For example, applications published by Google could have names of the form com.google.app.appname<br>Inside of the manifest tag, may appear the following tags in any order: permission, permission-group, permission-tree, uses-sdk, uses-permission, uses-configuration, application, instrumentation, uses-feature.</p>
</blockquote>
<h2 id="隐藏标题栏"><a href="#隐藏标题栏" class="headerlink" title="隐藏标题栏"></a>隐藏标题栏</h2><p>有的时候我们往往需要将标题栏隐藏，可以在Oncreate函数中加入以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">	setContentView(R.layout.first_layout);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>特别注意代码需要在<strong>setContentView(R.layout.first_layout);</strong>之前加    </p>
</blockquote>
<h2 id="使用Toast"><a href="#使用Toast" class="headerlink" title="使用Toast"></a>使用Toast</h2><p>Toash是一种很好的提醒方式，一般小的信息我们都会用Toast进行提示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked Add"</span>, Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<h2 id="使用Menu"><a href="#使用Menu" class="headerlink" title="使用Menu"></a>使用Menu</h2><h3 id="新建一个menu文件"><a href="#新建一个menu文件" class="headerlink" title="新建一个menu文件"></a>新建一个menu文件</h3><p>res文件夹中New-Folder新建一个文件夹menu，然后在这个文件夹中新建一个名叫main的菜单文件，New-Android XML File,在新建的文件中输入以下代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">&lt;item</div><div class="line">    android:id=<span class="string">"@+id/add_item"</span></div><div class="line">    android:title=<span class="string">"Add"</span>/&gt;</div><div class="line">&lt;item</div><div class="line">    android:id=<span class="string">"@+id/remove_item"</span></div><div class="line">    android:title=<span class="string">"Remove"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="调用menu菜单"><a href="#调用menu菜单" class="headerlink" title="调用menu菜单"></a>调用menu菜单</h3><p>然后回到.class文件中，重写onCreateOptionMenu()方法，代码如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line">	getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>通过getMenuInflater()方法得到MenuInflater对象，再调用它的inflate()方法就可以给当前活动创建菜单，两个参数，第一个为我们的菜单，第二个为添加到哪一个Menu对象，使用onCreateOptionsMenu()方法传入的menu参数，然后返回true，如果返回false则无法显示。</p>
</blockquote>
<h3 id="添加菜单响应事件"><a href="#添加菜单响应事件" class="headerlink" title="添加菜单响应事件"></a>添加菜单响应事件</h3><p>在.class文件中，重写onOptionsItemSelected()方法:<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (item.getItemId()) &#123;</div><div class="line">	<span class="keyword">case</span> R.id.add_item:</div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked Add"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> R.id.remove_item:</div><div class="line">		Toast.makeText(<span class="keyword">this</span>, <span class="string">"You clicked Remove"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="销毁活动"><a href="#销毁活动" class="headerlink" title="销毁活动"></a>销毁活动</h2><p>效果类似于按一下Back键<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">finish();</div></pre></td></tr></table></figure></p>
<h2 id="打开新窗口"><a href="#打开新窗口" class="headerlink" title="打开新窗口"></a>打开新窗口</h2><h3 id="使用显示Intent"><a href="#使用显示Intent" class="headerlink" title="使用显示Intent"></a>使用显示Intent</h3><h4 id="在AndroidMainfest-xml中"><a href="#在AndroidMainfest-xml中" class="headerlink" title="在AndroidMainfest.xml中"></a>在AndroidMainfest.xml中</h4><p>为SecondActivity注册<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;activity</div><div class="line">           android:name=".SecondActivity"</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<h4 id="在-class文件中"><a href="#在-class文件中" class="headerlink" title="在.class文件中"></a>在.class文件中</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<blockquote>
<p>FirstActivity.this是当前类，SecondActivity.class是要打开的类。</p>
</blockquote>
<h3 id="使用隐式Intent"><a href="#使用隐式Intent" class="headerlink" title="使用隐式Intent"></a>使用隐式Intent</h3><h4 id="在AndroidMainfest-xml中-1"><a href="#在AndroidMainfest-xml中-1" class="headerlink" title="在AndroidMainfest.xml中"></a>在AndroidMainfest.xml中</h4><p>注册<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">              &lt;action android:name="com.example.activitytest.ACTION_START" /&gt;</div><div class="line">              &lt;category android:name="android.intent.category.DEFAULT" /&gt;</div><div class="line">          &lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>
<h4 id="在-class文件中-1"><a href="#在-class文件中-1" class="headerlink" title="在.class文件中"></a>在.class文件中</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.activitytest.ACTION_START"</span>);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h3 id="隐式Intent打开网站"><a href="#隐式Intent打开网站" class="headerlink" title="隐式Intent打开网站"></a>隐式Intent打开网站</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</div><div class="line">intent.setData(Url.parse(<span class="string">"https://www.baidu.com"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h3 id="隐式Intent拨打电话"><a href="#隐式Intent拨打电话" class="headerlink" title="隐式Intent拨打电话"></a>隐式Intent拨打电话</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</div><div class="line">intent.setData(Url.parse(<span class="string">"tel:10086"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
<h3 id="向下一个活动传递数据"><a href="#向下一个活动传递数据" class="headerlink" title="向下一个活动传递数据"></a>向下一个活动传递数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">intent.putExtra(<span class="string">"param1"</span>, <span class="string">"data1"</span>);</div><div class="line">intent.putExtra(<span class="string">"param2"</span>, <span class="string">"data2"</span>);			startActivity(intent);</div></pre></td></tr></table></figure>
<blockquote>
<p>putExtra方法中第一个参数是键，用于后面从Intent中取值，第二个参数才是真正传递的数据。</p>
</blockquote>
<h4 id="从下个活动中取出传递的数据"><a href="#从下个活动中取出传递的数据" class="headerlink" title="从下个活动中取出传递的数据"></a>从下个活动中取出传递的数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = getIntent();  </div><div class="line">String data = intent.getStringExtra(<span class="string">"param1"</span>);</div><div class="line"></div><div class="line">Log.d(<span class="string">"SecondActivity"</span>,data);</div></pre></td></tr></table></figure>
<blockquote>
<p>传递的Int数据则用getIntExtra()方法，布尔型数据则用getBooleanExtra()方法.</p>
</blockquote>
<h3 id="返回数据给上一个活动"><a href="#返回数据给上一个活动" class="headerlink" title="返回数据给上一个活动"></a>返回数据给上一个活动</h3><h4 id="在第一个-class中"><a href="#在第一个-class中" class="headerlink" title="在第一个.class中"></a>在第一个.class中</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(FirstActivity.<span class="keyword">this</span>, SecondActivity.class);</div><div class="line">startActivityForResult(intent,<span class="number">1</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>第二个参数是请求值，这里设为1，只要是唯一值就好了</p>
</blockquote>
<h4 id="在第二个-class中"><a href="#在第二个-class中" class="headerlink" title="在第二个.class中"></a>在第二个.class中</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.putExtra(<span class="string">"data_return"</span>, <span class="string">"Hello FirstActivity"</span>);</div><div class="line">setResult(RESULT_OK,intent);</div><div class="line">finish();</div></pre></td></tr></table></figure>
<blockquote>
<p>setResult()方法中有两个值，第一个参数一般只用RESULT_OK，第二个参数是返回的值</p>
</blockquote>
<h4 id="在第一个-class中重写onActivtyResult-方法来得到返回的数据"><a href="#在第一个-class中重写onActivtyResult-方法来得到返回的数据" class="headerlink" title="在第一个.class中重写onActivtyResult()方法来得到返回的数据"></a>在第一个.class中重写onActivtyResult()方法来得到返回的数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">	<span class="keyword">switch</span> (requestCode) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">		<span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">			String returnedData = data.getStringExtra(<span class="string">"data_return"</span>);</div><div class="line">			Log.d(<span class="string">"FirstActivity"</span>, returnedData);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>为了确保用户在按Back键回到上一个界面时也会返回数据应该在onBackPressed()方法中也添加倒数的二个模块中的代码</p>
</blockquote>
<h2 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h2><p>每个活动在生命周期中最多四个状态</p>
<h3 id="1-运行状态"><a href="#1-运行状态" class="headerlink" title="1.运行状态"></a>1.运行状态</h3><p>  当一个活动在返回栈栈顶时，则处于运动状态。</p>
<h3 id="2-暂停状态"><a href="#2-暂停状态" class="headerlink" title="2.暂停状态"></a>2.暂停状态</h3><p>  不处于栈顶，但仍可见。比如对话框</p>
<h3 id="3-停止状态"><a href="#3-停止状态" class="headerlink" title="3.停止状态"></a>3.停止状态</h3><p>  当一个活动不再栈顶，并且不可见，则停止。如果其他地方需要内存，则有可能被系统回收。</p>
<h3 id="4-销毁状态"><a href="#4-销毁状态" class="headerlink" title="4.销毁状态"></a>4.销毁状态</h3><p>  当一个活动从返回栈移除后，则变成销毁状态。系统最倾向回收这个状态的活动，以保证手机内存充足。</p>
<h2 id="活动的生存期"><a href="#活动的生存期" class="headerlink" title="活动的生存期"></a>活动的生存期</h2><p>  <img src="https://o90qqsid7.qnssl.com/QQ20160801.png" alt="QQ20160801"></p>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><p>在活动的第一次被创建，在这个方法中完成活动的初始化，比如加载布局，绑定事件。</p>
<h3 id="onStart"><a href="#onStart" class="headerlink" title="onStart()"></a>onStart()</h3><p>活动由不可见变成可见时调用</p>
<h3 id="onResumen"><a href="#onResumen" class="headerlink" title="onResumen()"></a>onResumen()</h3><h3 id="onPause"><a href="#onPause" class="headerlink" title="onPause()"></a>onPause()</h3><h3 id="onStop"><a href="#onStop" class="headerlink" title="onStop()"></a>onStop()</h3><h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><p>销毁之前调用，之后活动的状态将变成销毁状态</p>
<h3 id="onRestart"><a href="#onRestart" class="headerlink" title="onRestart()"></a>onRestart()</h3><h2 id="三种生存期"><a href="#三种生存期" class="headerlink" title="三种生存期"></a>三种生存期</h2><h3 id="完整生存期"><a href="#完整生存期" class="headerlink" title="完整生存期"></a>完整生存期</h3><p>在onCreate()方法和onDestroy()方法之间所经历的</p>
<h3 id="可见生存期"><a href="#可见生存期" class="headerlink" title="可见生存期"></a>可见生存期</h3><p>在onStart()方法和onStop()方法之间经历的</p>
<h3 id="前台生存期"><a href="#前台生存期" class="headerlink" title="前台生存期"></a>前台生存期</h3><p>活动在onResume()方法和onPause()方法之间经历的</p>
<h2 id="保存临时数据"><a href="#保存临时数据" class="headerlink" title="保存临时数据"></a>保存临时数据</h2><p>当活动处于停止状态时，是有可能被系统回收的，那么为了保存临时的数据，Activity提供了一个onSaceInstanceState()方法解决活动呗回收时临时数据得不到保存的问题。</p>
<h3 id="重写onSaveInstanceState-方法"><a href="#重写onSaveInstanceState-方法" class="headerlink" title="重写onSaveInstanceState()方法"></a>重写onSaveInstanceState()方法</h3><p>这个方法将在停止的活动被系统销毁前调用<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span></span>&#123;</div><div class="line">	<span class="keyword">super</span>.onSaveInstanceState(outState);</div><div class="line">	outState.putString(<span class="string">"data_key"</span>,<span class="string">"传值"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="修改onCreate-方法"><a href="#修改onCreate-方法" class="headerlink" title="修改onCreate()方法"></a>修改onCreate()方法</h3><p>可以看到onCreate方法中有个Bundle类型的参数，在平时这个参数会为null，但是当活动在被系统回收前有通过onSaveInstanceState()方法保存参数的话，这个参数会带有之前保存的全部数据。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">	setContentView(R.layout.normal_layout)</div><div class="line">	<span class="keyword">if</span>(savedInstanceState!=<span class="keyword">null</span>)&#123;</div><div class="line">		String tempData=savedInstanceState.getString(<span class="string">"data_key"</span>);</div><div class="line">	&#125;	&#125;</div></pre></td></tr></table></figure></p>
<h2 id="活动的四种启动模式"><a href="#活动的四种启动模式" class="headerlink" title="活动的四种启动模式"></a>活动的四种启动模式</h2><h3 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h3><p>默认启动模式，在不进行指定的情况下，所有活动都会自动以这种模式。<br>每启动一个新的活动，就会在返回栈中入栈，并位于栈顶位置。</p>
<blockquote>
<p>对于使用standard模式的活动，系统不会在乎是否已经在返回栈中存在，每次启动都会创建一个新的实例</p>
</blockquote>
<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3><p>当返回栈栈顶已经为该活动时，不会再新建一个实例<br>使用方法，在AndroidMain.xml中的启动模式中设置。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:launchMode=<span class="string">"singleTop"</span></div></pre></td></tr></table></figure></p>
<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3><p>当返回栈中已经存在该活动时，不再新建一个实例，而是将活动之上的所有活动统统出栈。<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:launchMode=<span class="string">"singleTask"</span></div></pre></td></tr></table></figure></p>
<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3><p>启动一个新的返回栈来管理活动<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">android:launchMode=<span class="string">"singleInstance"</span></div></pre></td></tr></table></figure></p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/isnine/AndroidWork/tree/master/Android第一行代码源码/第2章/ActivityTest" target="_blank" rel="external">https://github.com/isnine/AndroidWork/tree/master/Android第一行代码源码/第2章/ActivityTest</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android第一行代码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[杭电ACM机器人]]></title>
      <url>/2016/07/27/acmac/</url>
      <content type="html"><![CDATA[<p>首先放效果图，爬虫放在自己的VPS上面运行了一下午，Rank从25W到了22名，全站4700道题其中一共AC掉2000+题<br><img src="http://img.wxz.name/acmacrobot-1.png" alt="acmacrobot"></p>
<a id="more"></a>
<h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><p>源码作者的博客<a href="http://bigballon.github.io/python/2016/05/15/python_crawler-12.html" target="_blank" rel="external">听说你叫爬虫(11) —— 也写个AC自动机</a><br>杭电的OJ:<a href="http://acm.hdu.edu.cn" target="_blank" rel="external">杭电ACM</a><br>题解数据来源:<a href="http://so.csdn.net/so/" target="_blank" rel="external">CSDN搜索</a></p>
<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>模拟登录-爬取题目-搜索-提取代码-提交-成功下一题/失败继续搜索</p>
<h2 id="测试情况"><a href="#测试情况" class="headerlink" title="测试情况"></a>测试情况</h2><p>首先自己将作者代码放在VPS上面测试，发现对于有些题目，正则表达式没有考虑全，会发生错误<br>而且默认是1000直接到最后一题</p>
<h2 id="修改情况"><a href="#修改情况" class="headerlink" title="修改情况"></a>修改情况</h2><p>自己根据情况，对异常进行了一个catch处理，这样保证发生了异常后跳过继续运行<br>对代码可以自行设置初始题号和终止题号</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><h3 id="运行在Python2-7，需要安装相关类"><a href="#运行在Python2-7，需要安装相关类" class="headerlink" title="运行在Python2.7，需要安装相关类"></a>运行在Python2.7，需要安装相关类</h3><pre><code class="python"><span class="comment"># coding='utf-8'</span>
<span class="keyword">import</span> requests, re, os, HTMLParser, time, getpass

host_url = <span class="string">'http://acm.hdu.edu.cn'</span>
post_url = <span class="string">'http://acm.hdu.edu.cn/userloginex.php?action=login'</span>
sub_url = <span class="string">'http://acm.hdu.edu.cn/submit.php?action=submit'</span>
csdn_url = <span class="string">'http://so.csdn.net/so/search/s.do'</span>
head = {
    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36'</span>}
html_parser = HTMLParser.HTMLParser()
s = requests.session()


<span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(usr, psw)</span>:</span>
    s.get(host_url);
    data = {<span class="string">'username'</span>: usr, <span class="string">'userpass'</span>: psw, <span class="string">'login'</span>: <span class="string">'Sign In'</span>}
    r = s.post(post_url, data=data)


<span class="function"><span class="keyword">def</span> <span class="title">check_lan</span><span class="params">(lan)</span>:</span>
    <span class="keyword">if</span> <span class="string">'java'</span> <span class="keyword">in</span> lan:
        <span class="keyword">return</span> <span class="string">'5'</span>
    <span class="keyword">return</span> <span class="string">'0'</span>


<span class="function"><span class="keyword">def</span> <span class="title">parser_code</span><span class="params">(code)</span>:</span>
    <span class="keyword">return</span> html_parser.unescape(code).encode(<span class="string">'utf-8'</span>)


<span class="function"><span class="keyword">def</span> <span class="title">is_ac</span><span class="params">(pid, usr)</span>:</span>
    tmp = requests.get(<span class="string">'http://acm.hdu.edu.cn/userstatus.php?user='</span> + usr).text
    accept = re.search(
        <span class="string">'List of solved problems&lt;/font&gt;&lt;/h3&gt;.*?&lt;p align=left&gt;&lt;script language=javascript&gt;(.*?)&lt;/script&gt;&lt;br&gt;&lt;/p&gt;'</span>, tmp,
        re.S)
    <span class="keyword">if</span> pid <span class="keyword">in</span> accept.group(<span class="number">1</span>):
        <span class="keyword">print</span> <span class="string">'%s was solved'</span> % pid
        <span class="keyword">return</span> <span class="keyword">True</span>
    <span class="keyword">else</span>:
        <span class="keyword">return</span> <span class="keyword">False</span>


<span class="function"><span class="keyword">def</span> <span class="title">search_csdn</span><span class="params">(PID, usr)</span>:</span>
    get_data = {<span class="string">'q'</span>: <span class="string">'HDU '</span> + PID, <span class="string">'t'</span>: <span class="string">'blog'</span>, <span class="string">'o'</span>: <span class="string">''</span>, <span class="string">'s'</span>: <span class="string">''</span>, <span class="string">'l'</span>: <span class="string">'null'</span>}
    search_html = requests.get(csdn_url, params=get_data).text
    linklist = re.findall(<span class="string">'&lt;dd class="search-link"&gt;&lt;a href="(.*?)" target="_blank"&gt;'</span>, search_html, re.S)
    <span class="keyword">for</span> l <span class="keyword">in</span> linklist:
        <span class="keyword">print</span> l
        tm_html = requests.get(l, headers=head).text;
        title = re.search(<span class="string">'&lt;title&gt;(.*?)&lt;/title&gt;'</span>, tm_html, re.S).group(<span class="number">1</span>).lower()
        <span class="keyword">if</span> PID <span class="keyword">not</span> <span class="keyword">in</span> title:
            <span class="keyword">continue</span>
        <span class="keyword">if</span> <span class="string">'hdu'</span> <span class="keyword">not</span> <span class="keyword">in</span> title:
            <span class="keyword">continue</span>
        tmp = re.search(<span class="string">'name="code" class="(.*?)"&gt;(.*?)&lt;/pre&gt;'</span>, tm_html, re.S)
        <span class="keyword">if</span> tmp == <span class="keyword">None</span>:
            <span class="keyword">print</span> <span class="string">'code not find'</span>
            <span class="keyword">continue</span>
        LAN = check_lan(tmp.group(<span class="number">1</span>))
        CODE = parser_code(tmp.group(<span class="number">2</span>))
        <span class="keyword">if</span> <span class="string">r'include'</span> <span class="keyword">in</span> CODE:
            <span class="keyword">pass</span>
        <span class="keyword">elif</span> <span class="string">r'import java'</span> <span class="keyword">in</span> CODE:
            <span class="keyword">pass</span>
        <span class="keyword">else</span>:
            <span class="keyword">continue</span>
        <span class="keyword">print</span> PID, LAN
        <span class="keyword">print</span> <span class="string">'--------------'</span>
        submit_data = {<span class="string">'check'</span>: <span class="string">'0'</span>, <span class="string">'problemid'</span>: PID, <span class="string">'language'</span>: LAN, <span class="string">'usercode'</span>: CODE}
        s.post(sub_url, headers=head, data=submit_data)
        time.sleep(<span class="number">5</span>)
        <span class="keyword">if</span> is_ac(PID, usr):
            <span class="keyword">break</span>


<span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:
    usr = raw_input(<span class="string">'input your username:'</span>)
    psw = getpass.getpass(<span class="string">'input your password:'</span>)
    start = input(<span class="string">'start problem(1000-5762):'</span>)
    end = input(<span class="string">'end problem:'</span>)
    login(usr, psw)
    pro_cnt = start
    <span class="keyword">while</span> pro_cnt &lt;= end:
        PID = str(pro_cnt)
        <span class="keyword">if</span> is_ac(PID, usr):
            pro_cnt += <span class="number">1</span>
            <span class="keyword">continue</span>
        <span class="keyword">try</span>:
           search_csdn(PID, usr)
        <span class="keyword">except</span>:
           <span class="keyword">continue</span>
        pro_cnt += <span class="number">1</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[摘录]]></title>
      <url>/2016/07/08/book-think/</url>
      <content type="html"><![CDATA[<h2 id="《你的孤独虽败犹荣》"><a href="#《你的孤独虽败犹荣》" class="headerlink" title="《你的孤独虽败犹荣》"></a>《你的孤独虽败犹荣》</h2><blockquote>
<p>正在经历的孤独，我们称之为迷茫。经历过的那些孤独，我们称之为成长.</p>
</blockquote>
<blockquote>
<p>很多人缺少了另外一个人便没有自己，无论最终你变成怎样的人，要相信这些年你都能一个人度过所有。当时你恐慌害怕的，最终会成为你面对这个世界的盔甲。</p>
</blockquote>
<h2 id="微博摘录"><a href="#微博摘录" class="headerlink" title="微博摘录"></a>微博摘录</h2><blockquote>
<p>不是机会改变了一个人的命运，而是一个人能抓住机会，从而改变了自己的命运。不是机会让你出人头地、年少成名，而是你长期的准备让你获得了能出人头地的机会，你的经验和积累让你能抓住机会，而不是遗憾错失。所以大多数人一直等的，其实并不是机会，而是自己的成长。 -刘同</p>
</blockquote>
<h2 id="知乎摘录"><a href="#知乎摘录" class="headerlink" title="知乎摘录"></a>知乎摘录</h2><blockquote>
<p>这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜看书到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富士康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。</p>
</blockquote>
<blockquote>
<p>你越往人群中靠近一寸寻找存在感，你内心就多一份孤独与落寞</p>
</blockquote>
<blockquote>
<p>所有的感情都不会是一帆风顺的</p>
</blockquote>
<blockquote>
<p>维系一段感情，除了用心和甜言蜜语外，还要努力变得更加优秀</p>
</blockquote>
<blockquote>
<p>当然，有些人，无论你变得如何优秀，TA都不会看你一眼</p>
</blockquote>
<blockquote>
<p>你多学一样本事，就少说一句求人的话</p>
</blockquote>
<blockquote>
<p>不浮躁就是该吃饭吃饭，该睡觉睡觉<br>该看书看书，该洗澡洗澡<br>聊事时聊事，陪朋友时陪朋友<br>万事各得其所，专心在此时此刻，做每一件事</p>
</blockquote>
<blockquote>
<p>在一群出色的人中间，常常误以为自己也是其中一员，然后忘了努力</p>
</blockquote>
<blockquote>
<p>在一群平庸的人中间，往往也会认为自己很出色，而忘了努力</p>
</blockquote>
<blockquote>
<p>Nothing is easy when you grow up</p>
</blockquote>
<blockquote>
<p>似乎大家都是这样。自命不凡，却无足轻重</p>
</blockquote>
<blockquote>
<p>没人嘲笑你的梦想，他们都是在嘲笑你的实力</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 书 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大一暑假日常记录]]></title>
      <url>/2016/07/08/2016SummerVaction/</url>
      <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left">日期</th>
<th style="text-align:left">编程</th>
<th style="text-align:left">理论</th>
<th style="text-align:left">生活</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">7.6</td>
<td style="text-align:left"></td>
<td style="text-align:left">买书《算法》</td>
<td style="text-align:left">假期开始</td>
</tr>
<tr>
<td style="text-align:left">7.7</td>
<td style="text-align:left">斯坦福大学cs193p 1-2章</td>
<td style="text-align:left"></td>
<td style="text-align:left">老友聚会</td>
</tr>
<tr>
<td style="text-align:left">7.8</td>
<td style="text-align:left">Ios计算器App完成</td>
<td style="text-align:left"></td>
<td style="text-align:left">驾照报名</td>
</tr>
<tr>
<td style="text-align:left">7.9</td>
<td style="text-align:left">Leetcode 2题</td>
<td style="text-align:left">《Java核心技术》1-2章</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.10</td>
<td style="text-align:left"></td>
<td style="text-align:left">《算法》1-74页</td>
<td style="text-align:left">科目一1-20页</td>
</tr>
<tr>
<td style="text-align:left">7.11</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.12</td>
<td style="text-align:left">斯坦福大学cs193p 3章</td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一20-40页</td>
</tr>
<tr>
<td style="text-align:left">7.13</td>
<td style="text-align:left">省程设比赛 开发文档2/6</td>
<td style="text-align:left"></td>
<td style="text-align:left">练字</td>
</tr>
<tr>
<td style="text-align:left">7.14</td>
<td style="text-align:left">省程设比赛 开发文档6/6</td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一40-60页</td>
</tr>
<tr>
<td style="text-align:left">7.15</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">聚会</td>
</tr>
<tr>
<td style="text-align:left">7.16</td>
<td style="text-align:left">省程设比赛 APP功能完善</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.17</td>
<td style="text-align:left">省程设比赛 演示视频</td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一60-80页</td>
</tr>
<tr>
<td style="text-align:left">7.18</td>
<td style="text-align:left"></td>
<td style="text-align:left">《Java核心技术》浏览一遍</td>
<td style="text-align:left">夜宵</td>
</tr>
<tr>
<td style="text-align:left">7.19</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">电影</td>
</tr>
<tr>
<td style="text-align:left">7.20</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一80-100页</td>
</tr>
<tr>
<td style="text-align:left">7.21</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一100-120页</td>
</tr>
<tr>
<td style="text-align:left">7.22</td>
<td style="text-align:left"></td>
<td style="text-align:left">开始看Python</td>
<td style="text-align:left">科目一133/1310题</td>
</tr>
<tr>
<td style="text-align:left">7.23</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一355/1310题</td>
</tr>
<tr>
<td style="text-align:left">7.24</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一527/1310题</td>
</tr>
<tr>
<td style="text-align:left">7.25</td>
<td style="text-align:left"></td>
<td style="text-align:left">Python-基础</td>
<td style="text-align:left">科目一1310/1310题</td>
</tr>
<tr>
<td style="text-align:left">7.26</td>
<td style="text-align:left"></td>
<td style="text-align:left">Python-函数</td>
<td style="text-align:left">科目一1310/1310题</td>
</tr>
<tr>
<td style="text-align:left">7.27</td>
<td style="text-align:left">Python杭电ACM爬虫</td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一模拟测试88分</td>
</tr>
<tr>
<td style="text-align:left">7.28</td>
<td style="text-align:left">Python知乎爬虫</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.29</td>
<td style="text-align:left">Java知乎爬虫</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">7.30</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究活动</td>
<td style="text-align:left">科目一模拟测试86分</td>
</tr>
<tr>
<td style="text-align:left">7.31</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究活动</td>
<td style="text-align:left">科目一模拟测试92分</td>
</tr>
<tr>
<td style="text-align:left">8.1</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究活动</td>
<td style="text-align:left">科目一模拟测试</td>
</tr>
<tr>
<td style="text-align:left">8.2</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究活动完成</td>
<td style="text-align:left">科目一模拟测试</td>
</tr>
<tr>
<td style="text-align:left">8.3</td>
<td style="text-align:left">省程设比赛 省级三等奖(Top55%)</td>
<td style="text-align:left"></td>
<td style="text-align:left">科目一98分通过</td>
</tr>
<tr>
<td style="text-align:left">8.4</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究UI</td>
<td style="text-align:left">科目二练习</td>
</tr>
<tr>
<td style="text-align:left">8.5</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究UI完成</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.6</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究碎片</td>
<td style="text-align:left">科目三</td>
</tr>
<tr>
<td style="text-align:left">8.7</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究碎片</td>
<td style="text-align:left">科目二练习(3/5)</td>
</tr>
<tr>
<td style="text-align:left">8.8</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究碎片完成</td>
<td style="text-align:left">科目二练习</td>
</tr>
<tr>
<td style="text-align:left">8.9</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究广播</td>
<td style="text-align:left">科目二练习</td>
</tr>
<tr>
<td style="text-align:left">8.10</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究广播完成</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.11</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究数据</td>
<td style="text-align:left">科目二练习</td>
</tr>
<tr>
<td style="text-align:left">8.12</td>
<td style="text-align:left"></td>
<td style="text-align:left">Android探究数据完成</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">8.13</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行准备</td>
</tr>
<tr>
<td style="text-align:left">8.14</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行准备</td>
</tr>
<tr>
<td style="text-align:left">8.15</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-杭 州</td>
</tr>
<tr>
<td style="text-align:left">8.16</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-杭州</td>
</tr>
<tr>
<td style="text-align:left">8.17</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-上海</td>
</tr>
<tr>
<td style="text-align:left">8.18</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-苏州</td>
</tr>
<tr>
<td style="text-align:left">8.19</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-苏州</td>
</tr>
<tr>
<td style="text-align:left">8.20</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-南京</td>
</tr>
<tr>
<td style="text-align:left">8.21</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行中-南京</td>
</tr>
<tr>
<td style="text-align:left">8.22</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">旅行结束</td>
</tr>
<tr>
<td style="text-align:left">8.23</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">休息</td>
</tr>
<tr>
<td style="text-align:left">8.24</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">夜宵</td>
</tr>
<tr>
<td style="text-align:left">8.25</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">休息</td>
</tr>
<tr>
<td style="text-align:left">8.26</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">休息</td>
</tr>
<tr>
<td style="text-align:left">8.27</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">到达学校</td>
</tr>
<tr>
<td style="text-align:left">8.28</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">电影/夜宵</td>
</tr>
<tr>
<td style="text-align:left">8.29</td>
<td style="text-align:left"></td>
<td style="text-align:left">《Swift开发指南》</td>
<td style="text-align:left">8km慢跑</td>
</tr>
<tr>
<td style="text-align:left">8.30</td>
<td style="text-align:left"></td>
<td style="text-align:left">《Swift开发指南》</td>
<td style="text-align:left">8km慢跑</td>
</tr>
<tr>
<td style="text-align:left">8.31</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">8km慢跑</td>
</tr>
<tr>
<td style="text-align:left">9.1</td>
<td style="text-align:left"></td>
<td style="text-align:left">《Android群英传》</td>
<td style="text-align:left">8km慢跑</td>
</tr>
<tr>
<td style="text-align:left">9.2</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">8km慢跑</td>
</tr>
<tr>
<td style="text-align:left">8.3</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">夜宵</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 暑假 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[计算器App开发]]></title>
      <url>/2016/07/08/ios-calculator/</url>
      <content type="html"><![CDATA[<p>暑假打算入Ios的坑了，查询了网上一些学习方法，打算以斯坦福大学cs193p教程为参考，进行学习，以下的斯坦福cs193p自己的自学过程，以及课程内容计算器的制作<br><a id="more"></a><br><img src="http://img.wxz.name//2016/07/08/mains.png" alt="main"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.首先打开Xcode，新建一个Ios工程<br>2.为了工程的简洁性，我们将不必要的文件移至新的文件夹内<br><img src="http://img.wxz.name//2016/07/08/1.png" alt="1"></p>
<h2 id="数字输入模块"><a href="#数字输入模块" class="headerlink" title="数字输入模块"></a>数字输入模块</h2><p>在我看来Ios的开发很像Android的开发，所以我很多东西都能类比，比如Main.storyboard文件就很像Andorid开发中xml文件，ViewController.swift文件很像Andorid开发里面的类<br>1.首先在Main.storyboard文件中拖出10个Button控件和1个Label控件。<br><img src="http://img.wxz.name//2016/07/08/2.png" alt="2"><br>2.然后在iOS开发中，我们可以采取按住Control拖取至ViewController.swift文件中的方式写事件。<br>3.声明Label控件，然后写个Button按钮的Action事件<br>4.代码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>:</span> UIViewController &#123;</div><div class="line">    </div><div class="line">    @IBOutlet weak var dieplay: UILabel!</div><div class="line">    </div><div class="line">    var a:Bool=<span class="literal">false</span></div><div class="line">    </div><div class="line">    @IBAction func appendDight(sender: UIButton) &#123;</div><div class="line">        let dight = sender.currentTitle!</div><div class="line">        <span class="keyword">if</span> a&#123;</div><div class="line">            dieplay.text=dieplay.text!+dight</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            dieplay.text=dight</div><div class="line">            a=<span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>5.此时运行已经可以看到Labei控件会显示Button控件中点击的数字</p>
<h2 id="计算模块"><a href="#计算模块" class="headerlink" title="计算模块"></a>计算模块</h2><p>这部分比较麻烦，建议直接看cs193的视频一步步的学习<br>1.在这里比较注意的几点应该是复制控件以后要取消之前关联的事件<br>2.新加代码如下<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">@<span class="function">IBAction func <span class="title">operate</span><span class="params">(sender: UIButton)</span> </span>&#123;</div><div class="line">     let operation=sender.currentTitle!</div><div class="line">     <span class="keyword">if</span> a&#123;</div><div class="line">         enter()</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">switch</span> operation&#123;</div><div class="line">     <span class="keyword">case</span> <span class="string">"X"</span>:performOpertion&#123;$<span class="number">0</span> * $<span class="number">1</span>&#125;</div><div class="line">     <span class="keyword">case</span> <span class="string">"÷"</span>:performOpertion&#123;$<span class="number">1</span> / $<span class="number">0</span>&#125;</div><div class="line">     <span class="keyword">case</span> <span class="string">"✚"</span>:performOpertion&#123;$<span class="number">0</span> + $<span class="number">1</span>&#125;</div><div class="line">     <span class="keyword">case</span> <span class="string">"−"</span>:performOpertion&#123;$<span class="number">1</span> - $<span class="number">1</span>&#125;</div><div class="line">     <span class="keyword">default</span>:<span class="keyword">break</span></div><div class="line">         </div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> func performOpertion(operation:(Double,Double) -&gt;Double) &#123;</div><div class="line">     <span class="keyword">if</span> operandStack.count &gt;= <span class="number">2</span> &#123;</div><div class="line">         displayValue=operation(operandStack.removeLast(),operandStack.removeLast())</div><div class="line">         enter()</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> var operandStack: Array&lt;Double&gt;=Array&lt;Double&gt;()</div><div class="line"> </div><div class="line"> @IBAction func enter() &#123;</div><div class="line">     a=<span class="literal">false</span></div><div class="line">     operandStack.append(displayValue)</div><div class="line">     print(<span class="string">"operandStack=\(operandStack)"</span>)</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> var displayValue:Double&#123;</div><div class="line">     get&#123;</div><div class="line">         <span class="keyword">return</span> NSNumberFormatter().numberFromString(dieplay.text!)!.doubleValue</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">set</span>&#123;</div><div class="line">         dieplay.text=<span class="string">"\(newValue)"</span></div><div class="line">         a=<span class="literal">false</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> App </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[添加网站功能的一些感想]]></title>
      <url>/2016/07/04/addfindthink/</url>
      <content type="html"><![CDATA[<p>这几天一直忙着对博客进行改造，主要是博客静态功能的实现和照片墙的实现，期间找了许多许多的方法。<br>例如<br><a href="http://www.netcan666.com/2015/11/20/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3Hexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2%E9%97%AE%E9%A2%98/" target="_blank" rel="external">完美解决Hexo静态博客搜索问题-Netcan</a><br><a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索-MOxFIVE</a><br>几种方法都试了很多次，最后在MOxFIVE的帮助下，终于实现了静态搜索功能，但是因为博客主题样式的不兼容，造成了很大问题<br><a id="more"></a><br><img src="http://img.wxz.name//2016/07/04/bug.png" alt="主题样式不兼容"></p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>期间真是一个个文件排斥过去，操碎了心。<br>最后问题的解决得益于两个博客主题的github文件更改追踪<br><a href="https://github.com/MOxFIVE/hexo-theme-yelee/commits/master" target="_blank" rel="external">yelee主题修改记录</a><br><a href="https://github.com/luuman/hexo-theme-spfk/commits/master" target="_blank" rel="external">spfk主题修改记录</a><br>通过一个个版本对照，终于发现main.styl的问题<br>终于在spfk主题修改这个版本中找到了问题所在<br><a href="https://github.com/luuman/hexo-theme-spfk/commits/master/source/css/_partial/main.styl" target="_blank" rel="external">spfk主题main.style修改记录</a><br>几番更改终于完善了搜索功能的问题<br><img src="http://img.wxz.name//2016/07/04/OK.png" alt="修改后"></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>因为自己不是做前端的，所以对这方面比较薄弱，不然一看文件就应该能找到问题所在，而不是像这样要翻越大量的网页文件，甚至于翻主题修改记录才找到解决方案<br>但是也好在，终于达到了预期效果</p>
<p><strong>造不出轮子，能找到轮子，也是好的，对吧</strong></p>
<p>可是还是觉得善于问人，善于自己思考问题，善于利用工具，是一种好的习惯<br>可是，造轮子才是最终最好的解决方案。</p>
<p><strong>试想如果有人来询问我一个Question，我能不能也像MOxFIVE回答我问题一样，看一遍代码，然后很轻松的找到了问题，并告诉我解决方案呢？</strong></p>
<p>我想，这是值得思考的<br>想来后天就开始正式暑假了，转眼大一就这么过去了，自身有点技术，但也就停留在用轮子，与借鉴，或者直接说复制的层面。对代码核心的理解还十分薄弱，甚至无法做出不借用别人的Demo，不借用互联网，自己开发一个APP。</p>
<p>我想，路还远，多想，多做。<br>                                                               2016年7月4日，<br>                                                               大一的最后一天。</p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[对hexo博客添加站内搜索功能]]></title>
      <url>/2016/07/04/addfind/</url>
      <content type="html"><![CDATA[<p>花了几天的时间终于把博客搜索功能给添加了上去，整理了一下修改记录，把修改方式放在这里，亲测可以使用，希望能对有需要的人有帮助。<br><a id="more"></a></p>
<h2 id="需要修改的文件列表"><a href="#需要修改的文件列表" class="headerlink" title="需要修改的文件列表"></a>需要修改的文件列表</h2><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><h4 id="layout-partial-left-col-ejs"><a href="#layout-partial-left-col-ejs" class="headerlink" title="layout/_partial/left-col.ejs"></a>layout/_partial/left-col.ejs</h4><h4 id="source-css-partial-search-styl"><a href="#source-css-partial-search-styl" class="headerlink" title="source/css/_partial/search.styl"></a>source/css/_partial/search.styl</h4><h4 id="source-css-style-styl"><a href="#source-css-style-styl" class="headerlink" title="source/css/style.styl"></a>source/css/style.styl</h4><h4 id="source-js-search-js"><a href="#source-js-search-js" class="headerlink" title="source/js/search.js"></a>source/js/search.js</h4><h4 id="layout-partial-after-footer-ejs"><a href="#layout-partial-after-footer-ejs" class="headerlink" title="layout/_partial/after-footer.ejs"></a>layout/_partial/after-footer.ejs</h4><h4 id="安装插件hexo-generator-search"><a href="#安装插件hexo-generator-search" class="headerlink" title="安装插件hexo-generator-search"></a>安装插件hexo-generator-search</h4><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install --save hexo-generator-search</div></pre></td></tr></table></figure>
<h2 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h2><h3 id="config-yml-添加"><a href="#config-yml-添加" class="headerlink" title="_config.yml 添加"></a>_config.yml 添加</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">search:</div><div class="line">  on: true</div><div class="line">  onload: false</div></pre></td></tr></table></figure>
<h3 id="layout-partial-left-col-ejs修改-添加"><a href="#layout-partial-left-col-ejs修改-添加" class="headerlink" title="layout/_partial/left-col.ejs修改/添加"></a>layout/_partial/left-col.ejs修改/添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.search.on)&#123; %&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"search-form"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"local-search-input"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">results</span>=<span class="string">"0"</span> <span class="attr">placeholder</span>=<span class="string">"search..."</span> <span class="attr">class</span>=<span class="string">"search form-control"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> <span class="attr">searchonload</span>=<span class="string">"&lt;%= theme.search.onload %&gt;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-times"</span> <span class="attr">onclick</span>=<span class="string">"resetSearch()"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">'no-result'</span>&gt;</span>No results found <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'fa fa-spinner fa-pulse'</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="source-css-partial-search-styl-新建一个文件"><a href="#source-css-partial-search-styl-新建一个文件" class="headerlink" title="source/css/_partial/search.styl 新建一个文件"></a>source/css/_partial/search.styl 新建一个文件</h3><figure class="highlight"><table><tr><td class="code"><pre><div class="line">.search</div><div class="line">    width 68%</div><div class="line">    height 18px</div><div class="line">    margin-top 1px</div><div class="line">    padding 0</div><div class="line">    font-family inherit</div><div class="line">    border 2px solid transparent</div><div class="line">    border-bottom 2px solid lightgray</div><div class="line">    border-radius 2px</div><div class="line">    opacity .65</div><div class="line">    background none</div><div class="line">    &amp;:hover</div><div class="line">        border 2px solid lightgray</div><div class="line">        opacity 1</div><div class="line">        box-shadow 0 0 10px rgba(0, 0, 0, .3)</div><div class="line"></div><div class="line">#search-form .fa-times</div><div class="line">    display none</div><div class="line">    padding 1px .7em</div><div class="line">    box-shadow: 0 0 3px rgba(0, 0, 0, .15)</div><div class="line">    cursor pointer</div><div class="line">    color gray</div><div class="line">    &amp;:active</div><div class="line">        background lightgray</div><div class="line">    &amp;:hover</div><div class="line">        zoom 1.1</div><div class="line">        padding 1px .6em</div><div class="line">        border: 1px solid lightgray</div><div class="line">        box-shadow: 0 0 6px rgba(0, 0, 0, .25)</div><div class="line"></div><div class="line">#local-search-result</div><div class="line">    margin auto -12% auto -6%</div><div class="line">    font-size .9rem</div><div class="line">    text-align left</div><div class="line">    word-break break-all</div><div class="line">    ul.search-result-list li:hover</div><div class="line">        font-weight normal</div><div class="line">    li</div><div class="line">        margin .5em auto</div><div class="line">        border-bottom 2px solid lightgray</div><div class="line">    .search-result-list li:hover</div><div class="line">        background rgba(158,188,226,0.21)</div><div class="line">        box-shadow 0 0 5px rgba(0, 0, 0, .2)</div><div class="line">    a.search-result-title</div><div class="line">        line-height 1.2</div><div class="line">        font-weight bold</div><div class="line">        color #708090</div><div class="line">    p.search-result</div><div class="line">        margin .4em auto</div><div class="line">        line-height 1.2rem</div><div class="line">        max-height @line-height * 3rem</div><div class="line">        overflow hidden</div><div class="line">        font-size .8rem</div><div class="line">        text-align justify</div><div class="line">        color gray</div><div class="line">    em.search-keyword</div><div class="line">        color #f58e90</div><div class="line">        border-bottom: 1px dashed @color</div><div class="line">        font-weight: bold</div><div class="line">        font-size .85rem</div><div class="line"></div><div class="line">p.no-result</div><div class="line">    display none</div><div class="line">    margin 2em 0 2em 6%</div><div class="line">    padding-bottom .5em</div><div class="line">    text-align left</div><div class="line">    color gray</div><div class="line">    font-family font-serif serif</div><div class="line">    border-bottom 2px solid lightgray</div></pre></td></tr></table></figure>
<h3 id="source-css-style-styl添加，没有的话搜索样式会错误"><a href="#source-css-style-styl添加，没有的话搜索样式会错误" class="headerlink" title="source/css/style.styl添加，没有的话搜索样式会错误"></a>source/css/style.styl添加，没有的话搜索样式会错误</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> search</div><div class="line">    @<span class="keyword">import</span> <span class="string">"_partial/search"</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">### source/js/pc.js添加</div><div class="line"></div><div class="line">         var search = function()&#123;</div><div class="line">        require([yiliaConfig.rootUrl + 'js/search.js'], function()&#123;</div><div class="line">            var inputArea = document.querySelector("#local-search-input");</div><div class="line">            var $HideWhenSearch = $("#toc, #tocButton, .post-list, #post-nav-button a:nth-child(2)");</div><div class="line">            var $resetButton = $("#search-form .fa-times");</div><div class="line">            var $resultArea = $("#local-search-result");</div><div class="line"></div><div class="line">            var getSearchFile = function()&#123;</div><div class="line">                var search_path = "search.xml";</div><div class="line">                var path = yiliaConfig.rootUrl + search_path;</div><div class="line">                searchFunc(path, 'local-search-input', 'local-search-result');</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var getFileOnload = inputArea.getAttribute('searchonload');</div><div class="line">            if (yiliaConfig.search &amp;&amp; getFileOnload === "true") &#123;</div><div class="line">                getSearchFile();</div><div class="line">            &#125; else &#123;</div><div class="line">                inputArea.onfocus = function()&#123; getSearchFile() &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            var HideTocArea = function()&#123;</div><div class="line">                $HideWhenSearch.css("visibility","hidden");</div><div class="line">                $resetButton.show();</div><div class="line">            &#125;</div><div class="line">            inputArea.oninput = function()&#123; HideTocArea() &#125;</div><div class="line">            inputArea.onkeydown = function()&#123; if(event.keyCode==13) return false&#125;</div><div class="line"></div><div class="line">            resetSearch = function()&#123;</div><div class="line">                $HideWhenSearch.css("visibility","initial");</div><div class="line">                $resultArea.html("");</div><div class="line">                document.querySelector("#search-form").reset();</div><div class="line">                $resetButton.hide();</div><div class="line">                $(".no-result").hide();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $resultArea.bind("DOMNodeRemoved DOMNodeInserted", function(e) &#123;</div><div class="line">                if (!$(e.target).text()) &#123;</div><div class="line">                    $(".no-result").show(200);</div><div class="line">                &#125; else &#123;</div><div class="line">                  $(".no-result").hide();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在最下面的return函数中添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">search();</div></pre></td></tr></table></figure></p>
<h3 id="source-js-search-js添加"><a href="#source-js-search-js添加" class="headerlink" title="source/js/search.js添加"></a>source/js/search.js添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">     <span class="comment">// A local search script with the help of [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)</span></div><div class="line"><span class="comment">// Copyright (C) 2015 </span></div><div class="line"><span class="comment">// Joseph Pan &lt;http://github.com/wzpan&gt;</span></div><div class="line"><span class="comment">// Shuhao Mao &lt;http://github.com/maoshuhao&gt;</span></div><div class="line"><span class="comment">// Edited by MOxFIVE &lt;http://github.com/MOxFIVE&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: path,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">"xml"</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</div><div class="line">            <span class="comment">// get the contents from search data</span></div><div class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">title</span>: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</div><div class="line">                    <span class="attr">content</span>: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</div><div class="line">                    <span class="attr">url</span>: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</div><div class="line">                &#125;;</div><div class="line">            &#125;).get();</div><div class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;                </div><div class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</div><div class="line">                $resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// perform local searching</span></div><div class="line">                datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">var</span> content_index = [];</div><div class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_url = data.url;</div><div class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</div><div class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></div><div class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</div><div class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</div><div class="line">                            index_title = data_title.indexOf(keyword);</div><div class="line">                            index_content = data_content.indexOf(keyword);</div><div class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</div><div class="line">                                isMatch = <span class="literal">false</span>;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">                                    index_content = <span class="number">0</span>;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                                    first_occur = index_content;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// show search results</span></div><div class="line">                    <span class="keyword">if</span> (isMatch) &#123;</div><div class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title' target='_blank'&gt;"</span>+ <span class="string">"&gt; "</span> + data_title +<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</div><div class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// cut out characters</span></div><div class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">6</span>;</div><div class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">6</span>;</div><div class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</div><div class="line">                                start = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</div><div class="line">                                end = <span class="number">10</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(end &gt; content.length)&#123;</div><div class="line">                                end = content.length;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end); </div><div class="line">                            <span class="comment">// highlight all keywords</span></div><div class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword</span>)</span>&#123;</div><div class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</div><div class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">                            &#125;);</div><div class="line">                            </div><div class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                $resultContent.innerHTML = str;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="layout-partial-after-footer-ejs添加"><a href="#layout-partial-after-footer-ejs添加" class="headerlink" title="layout/_partial/after-footer.ejs添加"></a>layout/_partial/after-footer.ejs添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;script&gt; </div><div class="line">yiliaConfig.search = <span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.search.on</span> %&gt;</span>;</span></div><div class="line">yiliaConfig.rootUrl = "\/";</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文参照了MOxFIVE的方法，链接在这<a href="http://moxfive.xyz/2016/05/31/hexo-local-search/" target="_blank" rel="external">让 Hexo 博客支持本地站内搜索-MOxFIVE</a><br>博主为了给博客添加搜索功能，真是操碎了心，不停改代码都没实现，最后是在MOxFIVE帮助下，实现了功能，特别感谢，并在此整理了这篇文章，希望能对人有用。</p>
<h2 id="完整的代码修改记录"><a href="#完整的代码修改记录" class="headerlink" title="完整的代码修改记录"></a>完整的代码修改记录</h2><p><a href="https://github.com/isnine/hexo-theme-yilia/commit/1b915ef08707bc8808000c1d032689286dc84dde" target="_blank" rel="external">Nine’s Github</a><br><a href="https://github.com/isnine/hexo-theme-yilia" target="_blank" rel="external">添加修改功能的yilia主题</a><br>已知试用于yilia主题，spfk主题，以及从yilia主题修改出来的其他主题。</p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[照片墙的制作]]></title>
      <url>/2016/07/03/photobuild/</url>
      <content type="html"><![CDATA[<p>看了很多人的博客，心血来潮的突然想自己也弄个照片墙。<br>当然，因为服务器的原因，直接构建肯定是不行的，所以搜集了很多资料，最后整理下，将方法放在这里，希望能对有需要的人有帮助。<br><a id="more"></a></p>
<h2 id="新建个照片页面"><a href="#新建个照片页面" class="headerlink" title="新建个照片页面"></a>新建个照片页面</h2><p>首先第一步要做的，自然是新建一个照片页面<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hexo new page &quot;photo&quot;</div></pre></td></tr></table></figure></p>
<p>然后在hexo___根目录___新建一个photos文件夹<br>注意是根目录，因为我们这个目录里面东西不上传至服务器里，上传至七牛云里</p>
<h2 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h2><p>修改我们刚刚新建的photo.md文件，加入以下代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;link type=&quot;text/css&quot; href=&quot;/fancybox/jquery.fancybox.css&quot; rel=&quot;stylesheet&quot;&gt;</div><div class="line">&lt;div class=&quot;instagram&quot;&gt;&lt;section class=&quot;archives album&quot;&gt;&lt;ul class=&quot;img-box-ul&quot;&gt;&lt;/ul&gt;&lt;/section&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script src=&quot;/js/photo.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>在hexo根目录下面新建一个tool.js文件<br>这个文件会读取photos里面的照片，并把照片名称保存在photo文件夹里面<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="string">"photos"</span>;</div><div class="line"></div><div class="line">fs.readdir(path, <span class="function"><span class="keyword">function</span> (<span class="params">err, files</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> arr = [];</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">iterator</span>(<span class="params">index</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index == files.length) &#123;</div><div class="line">            fs.writeFile(<span class="string">"source/photo/output.json"</span>, <span class="built_in">JSON</span>.stringify(arr, <span class="literal">null</span>, <span class="string">"\t"</span>));</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        fs.stat(path + <span class="string">"/"</span> + files[index], <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (stats.isFile()) &#123;</div><div class="line">                arr.push(files[index]);</div><div class="line">            &#125;</div><div class="line">            iterator(index + <span class="number">1</span>);</div><div class="line">        &#125;)</div><div class="line">    &#125;(<span class="number">0</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开/thems/你的主题/source/js文件夹<br>新建photo.js文件，注意中间<a href="https://o90qqsid7.qnssl.com//photo/请替换为自己七牛云空间地址" target="_blank" rel="external">https://o90qqsid7.qnssl.com//photo/请替换为自己七牛云空间地址</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">page</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">offset</span>: <span class="number">20</span>,</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">            $.getJSON(<span class="string">"/photo/output.json"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">                that.render(that.page, data);</div><div class="line"></div><div class="line">                that.scroll(data);</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">render</span>: <span class="function"><span class="keyword">function</span> (<span class="params">page, data</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> begin = (page - <span class="number">1</span>) * <span class="keyword">this</span>.offset;</div><div class="line">            <span class="keyword">var</span> end = page * <span class="keyword">this</span>.offset;</div><div class="line">            <span class="keyword">if</span> (begin &gt;= data.length) <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">var</span> html, li = <span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</div><div class="line">                li += <span class="string">'&lt;li&gt;&lt;div class="img-box"&gt;'</span> +</div><div class="line">                    <span class="string">'&lt;a class="img-bg" rel="example_group" href="https://o90qqsid7.qnssl.com//photo/'</span> + data[i] + <span class="string">'?raw=true"&gt;&lt;/a&gt;'</span> +</div><div class="line">                    <span class="string">'&lt;img lazy-src="https://o90qqsid7.qnssl.com//photo/'</span> + data[i] + <span class="string">'?imageView2/1/w/225/h/225/interlace/0/q/100&amp;raw=true" /&gt;'</span> +</div><div class="line">                    <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            $(<span class="string">".img-box-ul"</span>).append(li);</div><div class="line">            $(<span class="string">".img-box-ul"</span>).lazyload();</div><div class="line">            $(<span class="string">"a[rel=example_group]"</span>).fancybox();</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        <span class="attr">scroll</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">            $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> windowPageYOffset = <span class="built_in">window</span>.pageYOffset;</div><div class="line">                <span class="keyword">var</span> windowPageYOffsetAddHeight = windowPageYOffset + <span class="built_in">window</span>.innerHeight;</div><div class="line">                <span class="keyword">var</span> sensitivity = <span class="number">0</span>;</div><div class="line"></div><div class="line">                <span class="keyword">var</span> offsetTop = $(<span class="string">".instagram"</span>).offset().top + $(<span class="string">".instagram"</span>).height();</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (offsetTop &gt;= windowPageYOffset &amp;&amp; offsetTop &lt; windowPageYOffsetAddHeight + sensitivity) &#123;</div><div class="line">                    that.render(++that.page, data);</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>修改同目录下main.js<br>在尾部添加代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>($(<span class="string">".instagram"</span>).length) &#123;</div><div class="line">    <span class="built_in">require</span>([<span class="string">'/js/photo.js'</span>, <span class="string">'/fancybox/jquery.fancybox.js'</span>, <span class="string">'/js/jquery.lazyload.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        obj.init();</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h3><h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><p>完工</p>
<h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p>这里参考了以下博客<br><a href="http://imoblab.com/2016/03/17/Hexo-Yilia相册图片相关配置/" target="_blank" rel="external">往事随风</a><br><a href="http://zlwis.me/2016/01/17/hexo主题中添加相册功能/" target="_blank" rel="external">那时候的我</a><br><a href="http://fuboyou.github.io/2016/04/01/hexo相册/" target="_blank" rel="external">翊翌</a><br><a href="https://yq.aliyun.com/articles/8607?spm=0.0.0.0.TP5ICj" target="_blank" rel="external">Hexo折腾记</a></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决新浪云SAE部署上传错误的问题]]></title>
      <url>/2016/07/03/sinaSAEdeloyer/</url>
      <content type="html"><![CDATA[<p>解决Hexo部署在新浪云SAE上面deloyer错误的情况</p>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>尝试了一下部署在新浪云SAE上的效果，但是发现每次hexo d会产生错误<br><img src="http://img.wxz.name//2016/07/02/sinasae.png" alt="问题"></p>
<h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p>最开始我发现git上传可以直接用，但是使用hexo d命令上传时就会产生错误。<br>那么我在hexo生成的public文件夹里面设置一个git仓库<br>每次hexo g后面在git push ase master：x （x为1，2，3，4…）</p>
<h3 id="优点-博客版本可以随时切换，更加安全稳定"><a href="#优点-博客版本可以随时切换，更加安全稳定" class="headerlink" title="优点:博客版本可以随时切换，更加安全稳定"></a>优点:博客版本可以随时切换，更加安全稳定</h3><h3 id="缺点-每次上传要使用两次命令，切换很麻烦"><a href="#缺点-每次上传要使用两次命令，切换很麻烦" class="headerlink" title="缺点:每次上传要使用两次命令，切换很麻烦"></a>缺点:每次上传要使用两次命令，切换很麻烦</h3><h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><p>来自<a href="http://www.netcan666.com" target="_blank" rel="external">Netcan</a><br>修改hexo-deployer-git插件</p>
<p>打开hexo-deployer-git/lib/deployer.js文件<br>修改以下代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">repo</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> git(<span class="string">'add'</span>, <span class="string">'-A'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> git(<span class="string">'commit'</span>, <span class="string">'-m'</span>, message).catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="comment">// Do nothing. It's OK if nothing to commit.</span></div><div class="line">&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> git(<span class="string">'push'</span>, <span class="string">'-u'</span>, repo.url, <span class="string">'master:1'</span> , <span class="string">'--force'</span>);</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">deploy:</div><div class="line">type: git</div><div class="line">repo: https://git.sinacloud.com/netcanblog</div><div class="line">message:</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[10km Jogging]]></title>
      <url>/2016/06/20/10kmJogging/</url>
      <content type="html"><![CDATA[<p>跑步一直是我很喜欢的运动方式<br><a id="more"></a><br>第一次尝试10km慢跑</p>
<h2 id="最初"><a href="#最初" class="headerlink" title="最初"></a>最初</h2><p>最开始尝试慢跑的时候是在备考高考<br>因为减压开始尝试跑步<br>后来越来越觉得跑步像一门<strong>哲学</strong></p>
<h2 id="跑道"><a href="#跑道" class="headerlink" title="跑道"></a>跑道</h2><p>我觉得长长的跑道像人生的一条路</p>
<h3 id="现在跑在前面的人未必以后追不上"><a href="#现在跑在前面的人未必以后追不上" class="headerlink" title="现在跑在前面的人未必以后追不上"></a>现在跑在前面的人未必以后追不上</h3><h3 id="现在在后面的人也可能以后在前面"><a href="#现在在后面的人也可能以后在前面" class="headerlink" title="现在在后面的人也可能以后在前面"></a>现在在后面的人也可能以后在前面</h3><h2 id="慢跑"><a href="#慢跑" class="headerlink" title="慢跑"></a>慢跑</h2><p>第一个3km圈时，被同行的人超过，转眼就没再看到背影了<br>第三个3km圈时，发现自己已经超过了他们</p>
<h3 id="一路上都是按照自己的节奏慢跑，从不加快，也从不减速"><a href="#一路上都是按照自己的节奏慢跑，从不加快，也从不减速" class="headerlink" title="一路上都是按照自己的节奏慢跑，从不加快，也从不减速"></a>一路上都是按照自己的节奏慢跑，从不加快，也从不减速</h3><p>后来，他们跑完了第三个3km圈时已经放弃，我继续跑完了第四个3km圈</p>
<h3 id="我想不骄不躁，静下来，总能到达自己的目标"><a href="#我想不骄不躁，静下来，总能到达自己的目标" class="headerlink" title="我想不骄不躁，静下来，总能到达自己的目标"></a>我想不骄不躁，静下来，总能到达自己的目标</h3><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><table>
<thead>
<tr>
<th style="text-align:center">日期</th>
<th style="text-align:center">路程</th>
<th style="text-align:center">时间</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">6.11</td>
<td style="text-align:center">6.3km</td>
<td style="text-align:center">1’10h</td>
</tr>
<tr>
<td style="text-align:center">6.13</td>
<td style="text-align:center">7km</td>
<td style="text-align:center">1’h</td>
</tr>
<tr>
<td style="text-align:center">6.16</td>
<td style="text-align:center">7km</td>
<td style="text-align:center">1’09h</td>
</tr>
<tr>
<td style="text-align:center">6.17</td>
<td style="text-align:center">7km</td>
<td style="text-align:center">1’13h</td>
</tr>
<tr>
<td style="text-align:center">6.20</td>
<td style="text-align:center">10km</td>
<td style="text-align:center">1’27h</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建站记录]]></title>
      <url>/2016/06/20/Web-build/</url>
      <content type="html"><![CDATA[<p>这里写着Nine’s Blog的成长日志.<br><a id="more"></a></p>
<h2 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h2><h3 id="Nine是谁"><a href="#Nine是谁" class="headerlink" title="Nine是谁"></a>Nine是谁</h3><p><a href="/about/">Nine</a></p>
<h3 id="这里有什么"><a href="#这里有什么" class="headerlink" title="这里有什么"></a>这里有什么</h3><p>这里写着一只热爱旅游的程序员的成长生活，你会在这里看到一个人从大一开始成长的心得，看到他的所见所闻，以及对很多很幼稚的问题的思考，哦对了，还有他的努力和那个矫情的词语梦想。</p>
<h2 id="建站日程"><a href="#建站日程" class="headerlink" title="建站日程"></a>建站日程</h2><h3 id="第一阶段-2015-11-2015-12"><a href="#第一阶段-2015-11-2015-12" class="headerlink" title="第一阶段 2015.11-2015.12"></a>第一阶段 2015.11-2015.12</h3><ul>
<li>服务器：阿里云</li>
<li>域名：nine.ac.cn</li>
<li>平台：Wordpress<h3 id="第二阶段-2015-12-2016-5"><a href="#第二阶段-2015-12-2016-5" class="headerlink" title="第二阶段 2015.12-2016.5"></a>第二阶段 2015.12-2016.5</h3></li>
<li>服务器：腾讯云</li>
<li>域名：wxz.name</li>
<li>平台：Wordpress<h3 id="第四阶段-2016-5-2016-6"><a href="#第四阶段-2016-5-2016-6" class="headerlink" title="第四阶段 2016.5-2016.6"></a>第四阶段 2016.5-2016.6</h3></li>
<li>服务器：Github</li>
<li>域名：isnine.me</li>
<li>平台：Hexo<h3 id="第五阶段-2016-6-至今"><a href="#第五阶段-2016-6-至今" class="headerlink" title="第五阶段 2016.6-至今"></a>第五阶段 2016.6-至今</h3></li>
<li>服务器：腾讯云</li>
<li>域名：isnine.me &amp; wxz.name</li>
<li>平台：Hexo</li>
</ul>
<h2 id="建站日志"><a href="#建站日志" class="headerlink" title="建站日志"></a>建站日志</h2><h3 id="服务器的选择"><a href="#服务器的选择" class="headerlink" title="服务器的选择"></a>服务器的选择</h3><p>  最开始使用阿里云原因是因为学生9.9优惠，后来选择腾讯云的原因是因为腾讯云只要1块钱（学生就是这么穷哈哈，毕竟一个月9.9，四年就是500了）</p>
<h3 id="平台的选择"><a href="#平台的选择" class="headerlink" title="平台的选择"></a>平台的选择</h3><p>   之前选择Wordpress因为好操作，后来使用Hexo喜欢自己折腾，在代码框里面控制，有种极客的感觉，而且感觉Wordpress插件太多了，影响服务器速度。</p>
<h3 id="为什么先使用Github-pages又放弃了"><a href="#为什么先使用Github-pages又放弃了" class="headerlink" title="为什么先使用Github pages又放弃了"></a>为什么先使用Github pages又放弃了</h3><p>  其实Github pages真的很不错，但是因为经常会被墙，对比国内的速度太慢了，所以放弃了<br>  具体见<a href="/2016-06-19/博客迁移至腾讯云/">博客迁移至腾讯云</a><br>  其实最大的原因还是因为服务器好折腾哈哈</p>
<p>  也尝试过Coding国内的平台But太贵了！！！！</p>
<p>  还是腾讯云的服务器价格对学生友好</p>
<h3 id="为什么使用SSL，开启全站Https"><a href="#为什么使用SSL，开启全站Https" class="headerlink" title="为什么使用SSL，开启全站Https?"></a>为什么使用SSL，开启全站Https?</h3><p>  我觉得在这个时代，网络的安全（逼格）是一件十分重要的事情，像百度知乎等网站已经开始全面支持Https了，作为新时代的个人博客，当然也要增强安全（提升逼格）</p>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><h3 id="2016-6-19支持SSl"><a href="#2016-6-19支持SSl" class="headerlink" title="2016.6.19支持SSl"></a>2016.6.19支持SSl</h3><p> 原来的博客主题用了大量的外链，导致无法开启ssl，在https中许多用http外链的js全部失效，博客一片混乱，所以用了大量的精力查看主题js代码，将里面的代码修改，现在已经可以在ssl环境中使用了。<br> 下载见<br> <a href="https://github.com/isnine/ssl_spfk" target="_blank" rel="external">ssl_spfk主题下载</a></p>
<h3 id="2016-6-20修改了多说"><a href="#2016-6-20修改了多说" class="headerlink" title="2016.6.20修改了多说"></a>2016.6.20修改了多说</h3><p> 多说中的头像引用是用http操作的，会使https的绿色小锁失效，想了很多办法最后终于让头像从https中访问解决了。<br> 但是评论表情功能因为也是http中走得，不过因为我都不喜欢表情，所以所有的表情我都禁用了<br> 此外还有ws接口被我改成wss了，同样的原因。具体代码中在 <a href="https://github.com/isnine/ssl_spfk" target="_blank" rel="external">ssl_spfk主题下载</a>可以找到<br> 单独需要的人可以直接在主题中找到ssl_spfk\source\js\embed.js复制出来替换自己的</p>
<h3 id="2016-7-2增加了照片墙"><a href="#2016-7-2增加了照片墙" class="headerlink" title="2016.7.2增加了照片墙"></a>2016.7.2增加了照片墙</h3><p> 采用了node.js的方式在本地生成照片目录<br> 然后将照片上传至七牛云<br> 接着通过photo.js将照片墙生成</p>
<h3 id="2016-7-3增加了搜索功能"><a href="#2016-7-3增加了搜索功能" class="headerlink" title="2016.7.3增加了搜索功能"></a>2016.7.3增加了搜索功能</h3><p> 一直想要的搜索功能终于加上去了<br> 博主真是操碎了心</p>
<h3 id="2016-7-4修改了搜索功能的BUG"><a href="#2016-7-4修改了搜索功能的BUG" class="headerlink" title="2016.7.4修改了搜索功能的BUG"></a>2016.7.4修改了搜索功能的BUG</h3>]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于博客开启SSL]]></title>
      <url>/2016/06/19/SSL/</url>
      <content type="html"><![CDATA[<p>网站开启SSL，</p>
<a id="more"></a>
<h3 id="Https的网站地址"><a href="#Https的网站地址" class="headerlink" title="Https的网站地址"></a>Https的网站地址</h3><p><a href="https://www.wxz.name/">汪小祯 - Nine’Blog</a></p>
<h2 id="浏览"><a href="#浏览" class="headerlink" title="浏览"></a>浏览</h2><p>不知道有没有人注意到左上角的小绿锁<br><img src="http://img.wxz.name/2016/6/20/1.png" alt="图片"><br>是的，为了提高网站的安全性（逼格）<br>网站全站启用SSL</p>
<h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><p>今天尝试了一下，想要提高下网站的安全性（想要装个逼）<br>首先在这里申请到了一个免费证书<br><a href="https://buy.wosign.com/Free/" target="_blank" rel="external">沃通免费证书申请</a><br>然后通过Putty连接服务器安装</p>
<h3 id="OpenSSH"><a href="#OpenSSH" class="headerlink" title="OpenSSH"></a>OpenSSH</h3><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>之后按照官文沃通的教程操作<br>实现了https的加密</p>
<h2 id="2016-6-18问题"><a href="#2016-6-18问题" class="headerlink" title="2016.6.18问题"></a>2016.6.18问题</h2><p>加密后因为不能访问http，所以很多js等样式都无法加载<br>另外网站有许多http的外链，也导致了不能够加载，正在解决</p>
<h2 id="2016-6-20更新"><a href="#2016-6-20更新" class="headerlink" title="2016.6.20更新"></a>2016.6.20更新</h2><p>花了大量的时间和精力，终于将全站所有信息都改为https了，包括多说头像等问题，以及七牛等</p>
<h2 id="ssl-spfk下载"><a href="#ssl-spfk下载" class="headerlink" title="ssl_spfk下载"></a>ssl_spfk下载</h2><p>这是修改后的主题下载<br><a href="https://github.com/isnine/ssl_spfk" target="_blank" rel="external">ssl_Spfk</a></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[博客迁移至腾讯云]]></title>
      <url>/2016/06/19/BlogtoTencent/</url>
      <content type="html"><![CDATA[<p>考虑到Github在国内的响应速度等原因，将博客内容迁移至腾讯云，域名内容都不变<br><a id="more"></a><br>使用站长工具对网站进行测速</p>
<h2 id="GITHUB上的速度"><a href="#GITHUB上的速度" class="headerlink" title="GITHUB上的速度"></a>GITHUB上的速度</h2><p><img src="http://img.wxz.name/2016/06/19broad.png" alt="GITHUB"></p>
<h2 id="腾讯云上的速度"><a href="#腾讯云上的速度" class="headerlink" title="腾讯云上的速度"></a>腾讯云上的速度</h2><p><img src="http://img.wxz.name/2016/06/19china.png" alt="GITHUB"></p>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[旅行计划]]></title>
      <url>/2016/06/19/Traver-plan/</url>
      <content type="html"><![CDATA[<p>   自己暑假旅游计划的规划</p>
<a id="more"></a>
<h2 id="费用统计"><a href="#费用统计" class="headerlink" title="费用统计"></a>费用统计</h2><h3 id="Plan-A-江南游"><a href="#Plan-A-江南游" class="headerlink" title="Plan A 江南游"></a>Plan A 江南游</h3><table>
<thead>
<tr>
<th>种类</th>
<th style="text-align:center">细节</th>
<th>费用</th>
<th>时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>车费</td>
<td style="text-align:center">长沙南-杭州东</td>
<td>405*0.75=303</td>
<td>3小时52分钟</td>
</tr>
<tr>
<td>车费</td>
<td style="text-align:center">杭州-苏州</td>
<td>111</td>
<td>1小时36分钟  30 140</td>
</tr>
<tr>
<td>车费</td>
<td style="text-align:center">苏州-南京</td>
<td>99</td>
<td>1小时13分钟  80  30 100</td>
</tr>
<tr>
<td>车费</td>
<td style="text-align:center">南京-长沙</td>
<td>331</td>
<td>5小时23分钟</td>
</tr>
<tr>
<td>总</td>
<td style="text-align:center">车费总计</td>
<td>844</td>
<td>11小时+</td>
</tr>
</tbody>
</table>
<h2 id="杭州行程-Day1"><a href="#杭州行程-Day1" class="headerlink" title="杭州行程 Day1"></a>杭州行程 Day1</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day1</td>
<td style="text-align:center">长沙-杭州</td>
<td></td>
<td>598  </td>
</tr>
<tr>
<td>9:00</td>
<td style="text-align:center">长沙出发</td>
<td>405*0.75=303</td>
<td>G1348</td>
</tr>
<tr>
<td>12:52</td>
<td style="text-align:center">到达杭州</td>
<td></td>
<td></td>
</tr>
<tr>
<td>14：00</td>
<td style="text-align:center">到达龙翔桥附近</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">入住旅馆</td>
<td>150-200</td>
<td></td>
</tr>
<tr>
<td>15:00</td>
<td style="text-align:center">西湖断桥</td>
<td></td>
<td></td>
</tr>
<tr>
<td>15：30</td>
<td style="text-align:center">西湖三潭印月</td>
<td>45</td>
<td></td>
</tr>
<tr>
<td>16：00</td>
<td style="text-align:center">雷峰塔</td>
<td>40</td>
<td></td>
</tr>
<tr>
<td>17：00</td>
<td style="text-align:center">回宾馆休息</td>
<td></td>
<td></td>
</tr>
<tr>
<td>18：00</td>
<td style="text-align:center">晚餐</td>
<td>20-30</td>
<td></td>
</tr>
<tr>
<td>19：00</td>
<td style="text-align:center">西湖音乐喷泉</td>
<td></td>
<td></td>
</tr>
<tr>
<td>19：30</td>
<td style="text-align:center">夜游西湖</td>
<td></td>
<td></td>
</tr>
<tr>
<td>22：00</td>
<td style="text-align:center">回宾馆休息</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<blockquote>
<p>白天行程<br><img src="http://img.wxz.name/day1.png" alt="day1"></p>
</blockquote>
<h2 id="杭州行程-Day2"><a href="#杭州行程-Day2" class="headerlink" title="杭州行程 Day2"></a>杭州行程 Day2</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day2</td>
<td style="text-align:center">早晨起来退房</td>
<td></td>
<td>380 </td>
</tr>
<tr>
<td></td>
<td style="text-align:center">公交-灵隐寺</td>
<td>2</td>
<td>7路车</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">飞来峰</td>
<td>45</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">灵隐寺</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">沿龙井而下</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">浙江大学</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中国美术学院</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>2h</td>
<td style="text-align:center">去杭州东</td>
<td>2</td>
<td>308路/4路/-&gt;1号线</td>
</tr>
<tr>
<td>1h’45</td>
<td style="text-align:center">杭州东-苏州</td>
<td>111.5</td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="http://img.wxz.name/day2.png" alt="day2"></p>
<h2 id="苏州行程-Day3"><a href="#苏州行程-Day3" class="headerlink" title="苏州行程 Day3"></a>苏州行程 Day3</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day3</td>
<td style="text-align:center">早晨起来</td>
<td></td>
<td>320</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">苏州面</td>
<td>20-30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">挫政园</td>
<td>90</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">苏州博物馆</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">狮子林</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td>12：00</td>
<td style="text-align:center">中午午餐</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">平江路</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">观前街</td>
<td></td>
<td></td>
</tr>
<tr>
<td>18：00</td>
<td style="text-align:center">金鸡湖</td>
<td></td>
<td></td>
</tr>
<tr>
<td>20：00</td>
<td style="text-align:center">住宿</td>
<td>待定</td>
<td></td>
</tr>
</tbody>
</table>
<p>  <img src="http://img.wxz.name/Day3.png" alt="Day3"></p>
<h2 id="苏州行程-Day4-上午"><a href="#苏州行程-Day4-上午" class="headerlink" title="苏州行程 Day4 上午"></a>苏州行程 Day4 上午</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day4</td>
<td style="text-align:center">早晨起来</td>
<td></td>
<td>284</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">苏州面again</td>
<td>20-30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">沧浪亭</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">狮子林</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">山塘街</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">留园</td>
<td>55</td>
<td></td>
</tr>
<tr>
<td>12：00</td>
<td style="text-align:center">中餐</td>
<td>30</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">苏州-南京</td>
<td>99</td>
<td>1小时13分钟    </td>
</tr>
</tbody>
</table>
<p><img src="http://img.wxz.name/Day4%E4%B8%8A.png" alt="Day4上"></p>
<h2 id="南京行程-Day4-下午"><a href="#南京行程-Day4-下午" class="headerlink" title="南京行程 Day4 下午"></a>南京行程 Day4 下午</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>14：00</td>
<td style="text-align:center">到达南京</td>
<td></td>
<td>200</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">逛玄武湖</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">鸡鸣寺</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>18：00</td>
<td style="text-align:center">住宿</td>
<td>待定</td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">晚餐</td>
<td>30</td>
<td></td>
</tr>
</tbody>
</table>
<p>   <img src="http://img.wxz.name/Day4%E4%B8%8B.png" alt="Day4下"></p>
<h2 id="南京行程-Day5"><a href="#南京行程-Day5" class="headerlink" title="南京行程 Day5"></a>南京行程 Day5</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day5</td>
<td style="text-align:center">起床</td>
<td></td>
<td>280  </td>
</tr>
<tr>
<td></td>
<td style="text-align:center">总统府</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中山门</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">南京博物馆</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中山陵</td>
<td>80</td>
<td></td>
</tr>
<tr>
<td>18：00</td>
<td style="text-align:center">长江夜景</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><img src="http://img.wxz.name/Day5.png" alt="Day5"></p>
<h2 id="南京行程-Day6"><a href="#南京行程-Day6" class="headerlink" title="南京行程 Day6"></a>南京行程 Day6</h2><table>
<thead>
<tr>
<th>时间</th>
<th style="text-align:center">景点</th>
<th>费用</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day6</td>
<td style="text-align:center">夫子庙</td>
<td></td>
<td>350</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">自由浏览</td>
<td></td>
<td></td>
</tr>
<tr>
<td>14：00</td>
<td style="text-align:center">南京-长沙</td>
<td>331</td>
<td>5小时23分钟</td>
</tr>
</tbody>
</table>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="http://jingyan.baidu.com/article/76a7e4099d0c1dfc3b6e15a3.html" target="_blank" rel="external">西湖十景</a></p>
<h2 id="行程图"><a href="#行程图" class="headerlink" title="行程图"></a>行程图</h2><p><img src="http://img.wxz.name/planc.png" alt="plan"></p>
]]></content>
      
        <categories>
            
            <category> Life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 旅行 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中如何反编译Apk]]></title>
      <url>/2016/06/17/Androidbuildapk/</url>
      <content type="html"><![CDATA[<p>介绍如何对Android Apk进行反编译</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   最近一个叫QQ悄悄话查看器.apk的整蛊软件很火，本文以这个apk为列子来进行反编译。</p>
<h2 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h2><p>在开始之前我们需要先准备一些软件用于接下来的反编译工作</p>
<h3 id="Apktool"><a href="#Apktool" class="headerlink" title="Apktool"></a>Apktool</h3><p>资源文件获取，可以提取出图片文件和布局文件进行使用查看</p>
<h3 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a>dex2jar</h3><p>将apk反编译成Java源码（classes.dex转化成jar文件）</p>
<h3 id="jd-gui"><a href="#jd-gui" class="headerlink" title="jd-gui"></a>jd-gui</h3><p>查看APK中classes.dex转化成出的jar文件，即源码文件</p>
<p><a href="http://download.csdn.net/detail/vipzjyno1/7025729" target="_blank" rel="external">三大软件打包下载</a></p>
<h2 id="反编译流程"><a href="#反编译流程" class="headerlink" title="反编译流程"></a>反编译流程</h2><h3 id="将三大软件解压成三个文件夹"><a href="#将三大软件解压成三个文件夹" class="headerlink" title="将三大软件解压成三个文件夹"></a>将三大软件解压成三个文件夹</h3><p><img src="http://img.wxz.name/2016/06/17/1.png" alt="图片"></p>
<h2 id="使用Apktool获得资源文件"><a href="#使用Apktool获得资源文件" class="headerlink" title="使用Apktool获得资源文件"></a>使用Apktool获得资源文件</h2><h4 id="将QQ悄悄话查看器-apk复制到Apktool文件夹中"><a href="#将QQ悄悄话查看器-apk复制到Apktool文件夹中" class="headerlink" title="将QQ悄悄话查看器.apk复制到Apktool文件夹中"></a>将QQ悄悄话查看器.apk复制到Apktool文件夹中</h4><h4 id="按Win-R打开运行，输入cmd进入命令行界面"><a href="#按Win-R打开运行，输入cmd进入命令行界面" class="headerlink" title="按Win+R打开运行，输入cmd进入命令行界面"></a>按Win+R打开运行，输入cmd进入命令行界面</h4><h4 id="用cd命令进入到Apktool文件夹的根目录"><a href="#用cd命令进入到Apktool文件夹的根目录" class="headerlink" title="用cd命令进入到Apktool文件夹的根目录"></a>用cd命令进入到Apktool文件夹的根目录</h4><h3 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">apktool.bat d -f  QQ悄悄话查看器.apk  QQ悄悄话查看器</div></pre></td></tr></table></figure>
<p><img src="http://img.wxz.name/2016/06/17/2.png" alt="图片"></p>
<h4 id="我们可以看到生成了一个QQ悄悄话查看器的文件夹"><a href="#我们可以看到生成了一个QQ悄悄话查看器的文件夹" class="headerlink" title="我们可以看到生成了一个QQ悄悄话查看器的文件夹"></a>我们可以看到生成了一个QQ悄悄话查看器的文件夹</h4><h4 id="打开文件夹，我们可以看到Apk的资源文件"><a href="#打开文件夹，我们可以看到Apk的资源文件" class="headerlink" title="打开文件夹，我们可以看到Apk的资源文件"></a>打开文件夹，我们可以看到Apk的资源文件</h4><p>其中我们可以直接用记事本打开AndroidManifest.xml文件，这个是APP的配置文件，当然也可以用Android Studio或者Eclipse打开。<br><img src="http://img.wxz.name/2016/06/17/3.png" alt="图片"></p>
<p>我们可以查看到apk需求了15个权限，这15个权限的内容我们可以通过官文给的开发者文档查询，对英文有困难得可以用有道网页翻译。<br><a href="http://www.android-doc.com/reference/android/Manifest.permission.html" target="_blank" rel="external">Android权限列表</a></p>
<h2 id="Apk反编译得到Java源代码"><a href="#Apk反编译得到Java源代码" class="headerlink" title="Apk反编译得到Java源代码"></a>Apk反编译得到Java源代码</h2><ol>
<li><p>首先将QQ悄悄话查看器.apk改名为QQ悄悄话查看器.rar。</p>
</li>
<li><p>解压文件后将里面的classes.dex放到dex2jar-0.0.9.15文件夹里面</p>
</li>
<li><p>使用cmd进入dex2jar-0.0.9.15文件夹输入指令</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">dex2jar.bat   classes.dex</div></pre></td></tr></table></figure>
<p><img src="http://img.wxz.name/2016/06/17/4.png" alt="图片"></p>
<ol start="4">
<li><p>打开工具jd-gui文件夹里的jd-gui.exe</p>
</li>
<li><p>将dex2jar-0.0.9.15文件夹中生成的classes_dex2jar.jar拖入jd-gui.exe中打开</p>
</li>
<li><p>我们便可以看到源码以及奇葩的中文命名特色了<br><img src="http://img.wxz.name/2016/06/17/5.png" alt="图片"></p>
</li>
</ol>
<h2 id="代码浏览"><a href="#代码浏览" class="headerlink" title="代码浏览"></a>代码浏览</h2><p><img src="http://img.wxz.name/2016/06/17/6.png" alt="图片"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[队列的实现]]></title>
      <url>/2016/05/30/queue/</url>
      <content type="html"><![CDATA[<p>本文介绍数据结构中队列的实现<br><a id="more"></a></p>
<h2 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h2><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p>
<p>队列就像生活中排队，最先开始排的先出，后来的待到队列最后面等着</p>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>这里举一个列子进行实践一下<br>假设这里我们有一串加密的数字.<br>例如6 3 1 7 5 8 9 2 4，我们的规则是这样的，<br>首先将第一个数删除，紧接着删除第二个数，<br>然后将第三个数删除并将第4个数放在末尾，再将第五个数删除。<br>我们尝试下用编程来完成解密。<br>我们可以用一个结构体来存储队列的信息。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码如下：<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> data[<span class="number">100</span>];</div><div class="line">    <span class="keyword">int</span> head;</div><div class="line">    <span class="keyword">int</span> tail;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">q</span>;</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    q.head=<span class="number">1</span>;</div><div class="line">    q.tail=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;=<span class="number">9</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q.data[q.tail]);</div><div class="line">        q.tail++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(q.head&lt;q.tail)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,q.data[q.head]);</div><div class="line">        q.head++;</div><div class="line"></div><div class="line">        q.data[q.tail]=q.data[q.head];</div><div class="line">        q.tail++;</div><div class="line">        q.head++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码地址"><a href="#代码地址" class="headerlink" title="代码地址"></a>代码地址</h2><p>  <a href="https://github.com/isnine/Algorithm" target="_blank" rel="external">代码地址</a></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java内部类]]></title>
      <url>/2016/05/30/Javainner/</url>
      <content type="html"><![CDATA[<p>关于Java内部类的使用<br><a id="more"></a><br>首先展示一个基本的内部类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ins</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">inb</span></span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是一个简单的内部类,那么关于一个内部类的调用，我们首先创建一个内部类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ins</span> </span>&#123;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">inb</span></span></div><div class="line">&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</div><div class="line">System.out.println(<span class="string">"测试2"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在主函数中<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span></span></div><div class="line">&#123;</div><div class="line">Ins b=<span class="keyword">new</span> Ins();</div><div class="line">Ins.inb a=b.new inb();</div><div class="line">a.say();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android欢迎界面制作]]></title>
      <url>/2016/05/30/WelcomeAndroid/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用简单的方法制作一个Android程序欢迎界面</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>1.首先新建一个安卓项目<br>2.新建一个XML布局文件<br>右键layout文件夹-新建-New Android XML file</p>
</blockquote>
<p>3.将界面图片复制到项目根目录/res/drawable-hppi文件夹下  如果有其他尺寸的图片也复制到drawable-XXpi文件夹下 这个安卓会进行尺寸自动匹配</p>
<p>4.在布局文件中加入代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">android:background=&quot;@drawable/photo&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>photo是图片名 不用加后缀</p>
<p>5.布局文件好了后 我们需要新建一个相应的类<br>新建-class-名称和xml的名称一样</p>
<p>6.在Splash.Java中我们先像主函数一样设置继承Activity 然后导入相应的包</p>
<p>7.我们在空白地方右键-源码-覆盖/实现方法中加入OnCreate</p>
<p>8.我们在Oncreate中加入代码去除欢迎界面的标题<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">requestWindowFeature(Window.FEATURE_NO_TITLE);</div></pre></td></tr></table></figure></p>
<p>9.将方法与Splash.xml绑定<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">setContentView(R.layout.splash);</div></pre></td></tr></table></figure></p>
<p>10.在Oncreate中加入等待函数以及等待后进入主界面<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Thread timer =<span class="keyword">new</span> Thread()&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">sleep(<span class="number">3000</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="comment">// TODO 自动生成的 catch 块</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;<span class="keyword">finally</span>&#123;</div><div class="line">Intent openMainActivity=<span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MAINACTIVITY"</span>);</div><div class="line">startActivity(openMainActivity);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">timer.start();</div></pre></td></tr></table></figure></p>
<p>11.切换到AndroidMainfest.xml中<br>将已有的&lt;activity  …..&lt;/activity复制一份 并且修改部分地方  其中3区域将LAUNCHER改成DEFAULT是因为我们让欢迎界面第一个启动而不是主界面 将MAIN部分修改也是<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;activity</div><div class="line">android:name=&quot;.Splash&quot;</div><div class="line">android:label=&quot;@string/app_name&quot; &gt;</div><div class="line">&lt;intent-filter&gt;</div><div class="line">&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class="line"></div><div class="line">&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line"></div><div class="line">&lt;activity</div><div class="line">android:name=&quot;.MainActivity&quot;</div><div class="line">android:label=&quot;@string/app_name&quot; &gt;</div><div class="line">&lt;intent-filter&gt;</div><div class="line">&lt;action android:name=&quot;android.intent.action.MAINACTIVITY&quot; /&gt;</div><div class="line"></div><div class="line">&lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class="line">&lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<p>12.到此时我们已经基本实现了 但是当我们点手机返回时依旧可以返回 所以我们需要销毁第一个欢迎界面的活动<br>在Splash.java中加入代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// TODO 自动生成的方法存根</span></div><div class="line"><span class="keyword">super</span>.onPause();</div><div class="line">finish();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>13.程序效果图</p>
<p>源文件下载地址<a href="https://github.com/isnine/AndroidWork" target="_blank" rel="external">www.github.com/isnine/AndroidWork</a> Welcome文件夹</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android添加背景音乐]]></title>
      <url>/2016/05/30/Androidmusic/</url>
      <content type="html"><![CDATA[<p>这里以Welcome欢迎界面为例子介绍添加背景音乐<br><a id="more"></a></p>
<h2 id="导入背景音乐"><a href="#导入背景音乐" class="headerlink" title="导入背景音乐"></a>导入背景音乐</h2><p>将MP3文件放入项目目录res/raw/中（新建raw这个目录 名字不能错  mp3文件名必须小写不能有空格）</p>
<h2 id="打开Splash-Java"><a href="#打开Splash-Java" class="headerlink" title="打开Splash.Java"></a>打开Splash.Java</h2><p>加入代码<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">MediaPlayer mp;</div><div class="line">mp=MediaPlayer.create(<span class="keyword">this</span>,R.raw.music);  <span class="comment">//(music为你的音乐文件名 不需要后缀)</span></div><div class="line">mp.start();</div></pre></td></tr></table></figure></p>
<h2 id="此时运行时已经可以播放音乐了-但是程序关闭音乐依旧还在-我们需要释放这个进程"><a href="#此时运行时已经可以播放音乐了-但是程序关闭音乐依旧还在-我们需要释放这个进程" class="headerlink" title="此时运行时已经可以播放音乐了 但是程序关闭音乐依旧还在 我们需要释放这个进程"></a>此时运行时已经可以播放音乐了 但是程序关闭音乐依旧还在 我们需要释放这个进程</h2><p>在Onpause（）加入代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mp.release();</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android文件存储的实现]]></title>
      <url>/2016/05/30/AndroidSave/</url>
      <content type="html"><![CDATA[<p>这里介绍安卓进行文件存储的方法<br>比如我们用QQ登录等软件时 哪怕第二次登录时账号密码是可以保存起来的  就是这个场景<br><a id="more"></a></p>
<p>1.首先写一下布局文件 一共五个控件 2个Textview 两个Button 一个EditText<br>activity_main.xml新加代码如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/textView1&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:text=&quot;请您输入要保存的内容：&quot; /&gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/showText&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_alignLeft=&quot;@+id/adon&quot;</div><div class="line">    android:layout_below=&quot;@+id/adon&quot;</div><div class="line">    android:layout_marginTop=&quot;31dp&quot; /&gt;</div><div class="line"></div><div class="line">&lt;Button</div><div class="line">    android:id=&quot;@+id/showButton&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_alignLeft=&quot;@+id/addText&quot;</div><div class="line">    android:layout_below=&quot;@+id/addText&quot;</div><div class="line">    android:layout_marginTop=&quot;62dp&quot;</div><div class="line">    android:text=&quot;show&quot; /&gt;</div><div class="line"></div><div class="line">&lt;Button</div><div class="line">    android:id=&quot;@+id/adon&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_alignLeft=&quot;@+id/addText&quot;</div><div class="line">    android:layout_below=&quot;@+id/showButton&quot;</div><div class="line">    android:text=&quot;save&quot; /&gt;</div><div class="line"></div><div class="line">&lt;EditText</div><div class="line">    android:id=&quot;@+id/addText&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_alignLeft=&quot;@+id/textView1&quot;</div><div class="line">    android:layout_below=&quot;@+id/textView1&quot;</div><div class="line">    android:layout_marginTop=&quot;15dp&quot;</div><div class="line">    android:ems=&quot;10&quot;</div><div class="line">    android:hint=&quot;请您在此处输入文件内容！&quot; &gt;</div></pre></td></tr></table></figure></p>
<p>2.接下来修改MainActivity.Java<br>MainActivity.java代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.EditText;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.FileOutputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> EditText editText;</div><div class="line"><span class="keyword">private</span> TextView showTextView;</div><div class="line"><span class="comment">// 要保存的文件名</span></div><div class="line"><span class="keyword">private</span> String fileName = <span class="string">"chenzheng_java.txt"</span>;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">setContentView(R.layout.activity_main);</div><div class="line"><span class="comment">// 获取页面中的组件</span></div><div class="line">editText = (EditText) findViewById(R.id.addText);</div><div class="line">showTextView = (TextView) findViewById(R.id.showText);</div><div class="line">Button adon = (Button) <span class="keyword">this</span>.findViewById(R.id.adon);</div><div class="line">Button showButton = (Button) <span class="keyword">this</span>.findViewById(R.id.showButton);</div><div class="line"><span class="comment">// 绑定单击事件</span></div><div class="line">adon.setOnClickListener(listener);</div><div class="line">showButton.setOnClickListener(listener);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 声明监听器</span></div><div class="line"><span class="keyword">private</span> View.OnClickListener listener = <span class="keyword">new</span> OnClickListener() &#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">Button view = (Button) v;</div><div class="line"><span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line"><span class="keyword">case</span> R.id.adon:</div><div class="line">save();</div><div class="line"><span class="keyword">break</span>;</div><div class="line"><span class="keyword">case</span> R.id.showButton:</div><div class="line">read();</div><div class="line"><span class="keyword">break</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">String content = editText.getText().toString();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">FileOutputStream outputStream = openFileOutput(fileName,</div><div class="line">Activity.MODE_PRIVATE);</div><div class="line">outputStream.write(content.getBytes());</div><div class="line">outputStream.flush();</div><div class="line">outputStream.close();</div><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"保存成功"</span>, Toast.LENGTH_LONG).show();</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">FileInputStream inputStream = <span class="keyword">this</span>.openFileInput(fileName);</div><div class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">ByteArrayOutputStream arrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line"><span class="keyword">while</span> (inputStream.read(bytes) != -<span class="number">1</span>) &#123;</div><div class="line">arrayOutputStream.write(bytes, <span class="number">0</span>, bytes.length);</div><div class="line">&#125;</div><div class="line">inputStream.close();</div><div class="line">arrayOutputStream.close();</div><div class="line">String content = <span class="keyword">new</span> String(arrayOutputStream.toByteArray());</div><div class="line">showTextView.setText(content);</div><div class="line"></div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span> </span>&#123;</div><div class="line"><span class="comment">// Inflate the menu; this adds items to the action bar if it is present.</span></div><div class="line">getMenuInflater().inflate(R.menu.main, menu);</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line"><span class="comment">// Handle action bar item clicks here. The action bar will</span></div><div class="line"><span class="comment">// automatically handle clicks on the Home/Up button, so long</span></div><div class="line"><span class="comment">// as you specify a parent activity in AndroidManifest.xml.</span></div><div class="line"><span class="keyword">int</span> id = item.getItemId();</div><div class="line"><span class="keyword">if</span> (id == R.id.action_settings) &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码地址：<a href="https://github.com/isnine/AndroidWork" target="_blank" rel="external">www.github.com/isnine/AndroidWork</a>  Save文件夹内</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[快速排序法]]></title>
      <url>/2016/05/30/Quick-sort/</url>
      <content type="html"><![CDATA[<p>本文主要写排序算法中快速排序法的实现<br><a id="more"></a><br>它的基本思想是：<br>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<br>假设我们有6个数 我们先以第一个数6为基准  比6小的在左边 比6大的在右边</p>
<p>我们采用双边扫描<br>2比6小 不动<br>10比6大 我们卡在这个位置<br>然后从另一边开始  2比6小 卡在这<br>两个卡住的位置互换</p>
<p>互换后我们继续前进</p>
<p>到了这个位置 两个碰面了 于是我们将基准数6与3交换（为什么不是9 自己想下 考虑下极端情况）</p>
<p>那么此时以6为基准 左边按照刚才格式再一次排序 然后再分 然后排序右边 这样每个小部分排序完后 整个数据就排序完了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">    <span class="keyword">int</span> a[<span class="number">101</span>],n;            <span class="comment">//定义全局变量</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> i,j,t,temp;</div><div class="line">        <span class="keyword">if</span>(left&gt;right)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">        temp=a[left];       <span class="comment">//先储存第一个数</span></div><div class="line">        i=left;</div><div class="line">        j=right;</div><div class="line">        <span class="keyword">while</span>(i!=j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>(a[j]&gt;=temp&amp;&amp;i&lt;j)</div><div class="line">               j--;                       <span class="comment">//从右往左找</span></div><div class="line">            <span class="keyword">while</span>(a[i]&lt;=temp&amp;&amp;i&lt;j)</div><div class="line">               i++;                      <span class="comment">//从左开始找</span></div><div class="line">            <span class="keyword">if</span>(i&lt;j)                      <span class="comment">// 交换数据</span></div><div class="line">            &#123;</div><div class="line">                t=a[j];</div><div class="line">                a[j]=a[i];</div><div class="line">                a[i]=t;</div><div class="line">            &#125;                          </div><div class="line">        &#125;</div><div class="line">        a[left]=a[i];                    </div><div class="line">        a[i]=temp;</div><div class="line">        quicksort(left,i<span class="number">-1</span>);             <span class="comment">//处理左边  递归的过程</span></div><div class="line">        quicksort(i+<span class="number">1</span>,right);            <span class="comment">//处理右边   递归的过程</span></div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i,j,t;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">    quicksort(<span class="number">1</span>,n);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源代码  <a href="http://www.github.com/isnine/Algorithm" target="_blank" rel="external">www.github.com/isnine/Algorithm</a><br>时间复杂度O(nLog n)，最差时间复杂度O(n^2)，平均时间O(nLog n)<br>空间复杂度为O(lg n),最差为O(n)</p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[冒泡排序法]]></title>
      <url>/2016/05/30/bubble-sort/</url>
      <content type="html"><![CDATA[<p>本文主要写排序算法中冒泡排序法的实现<br><a id="more"></a><br>排序原理：<br>我们假设有5个数<br>21 84 39 20 89<br>我们要按照从小到大进行排序<br>那么也就是数字越小越往后面 这句话是关键<br>21比84小那么往后移<br>84 21 39 20 89<br>21比39小 往后<br>84 39 21 20 89<br>21比20大 不动<br>20比89小 往后移<br>84 39 21 89 29<br>此时我们已近确保了最后一个数是最小的  这是第一轮<br>在第二轮同理 倒数第二个数是第二小的 以此类推 实现排序<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">     <span class="keyword">int</span> a[<span class="number">100</span>],i,j,t,n;</div><div class="line">     <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="comment">//有n个数</span></div><div class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">         <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)    <span class="comment">//冒泡排序核心算法</span></div><div class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n-i;j++)   </div><div class="line">       <span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>])</div><div class="line">       &#123;</div><div class="line">           t=a[j];</div><div class="line">           a[j]=a[j+<span class="number">1</span>];</div><div class="line">           a[j+<span class="number">1</span>]=t;</div><div class="line">       &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)    <span class="comment">//输出结果</span></div><div class="line">       <span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[桶排序法]]></title>
      <url>/2016/05/30/Bucket-sort/</url>
      <content type="html"><![CDATA[<p>本文主要写排序算法中桶排序法的实现<br><a id="more"></a><br>原理如下<br>在第一步  我们相当于有10个数字杂乱的球 我们希望能够按照顺序将他们排序出来<br>在第二步  我们为了进行排序弄出了十个木桶 也就是我们将相应的球丢进相应的桶<br>在第三步 我们按照从大到小 或者从小到大的顺序 将桶的顺序说出来 比如一号桶2个桶我们就说两个1之类的 按照这样的原理我们实现排序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> book[<span class="number">1001</span>]=&#123;<span class="number">0</span>&#125;,i,j,t,n;    <span class="comment">//排序1-1000范围的数据</span></div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);                <span class="comment">//设置输入几个数据</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">    &#123;</div><div class="line">           <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">        book[t]++;                <span class="comment">//进行桶排序</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">1000</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">       <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=book[i];j++)</div><div class="line">              <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);    <span class="comment">//输出结果</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git主要命令]]></title>
      <url>/2016/05/30/GitCommand/</url>
      <content type="html"><![CDATA[<p>本文主要介绍Git基本主要指令<br><a id="more"></a><br>1.把当前目录变成可管理仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p>2.添加文件进入仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add &lt;file&gt;</div></pre></td></tr></table></figure>
<p>3.提交文件进入仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git commit –m “注释”</div></pre></td></tr></table></figure>
<p>4.查看仓库状态<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p>5.查看文件变动<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git diff &lt;file&gt;</div></pre></td></tr></table></figure></p>
<p>6.查看提交的日志<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure></p>
<p>7.查看历史命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure></p>
<p>8.回到版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard commit_id</div></pre></td></tr></table></figure></p>
<p>9.关联远程库<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git remote add origin git@github.com:ninse/learngit.git</div></pre></td></tr></table></figure></p>
<p>10.推送内容到远程库<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JAVA连接Mysql数据库]]></title>
      <url>/2016/05/29/JAVAMysq/</url>
      <content type="html"><![CDATA[<p>本文介绍从下载Mysql到在JAVA中连接Mysql所需要的步骤，以及查询，插入等操作。<br><a id="more"></a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>下载MySQL：<a href="http://dev.mysql.com/downloads/installer/" target="_blank" rel="external">http://dev.mysql.com/downloads/installer/</a>  选择第二个<br>下载JDBC驱动：<a href="http://dev.mysql.com/downloads/connector/" target="_blank" rel="external">http://dev.mysql.com/downloads/connector/</a> 选择Connector/J</p>
<ol>
<li>打开MYSQL 创建一条数据<figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt;CREATE   DATABASE test;   //创建一个数据库</div><div class="line">mysql&gt;use  test;  //指定test为当前要操作的数据库</div><div class="line">mysql&gt;CREATE  TABLE  user (name VARCHAR(20),password VARCHAR(20));   //创建一个表user，设置两个字段。</div><div class="line">mysql&gt;INSERT  INTO  user  VALUES('huzhiheng','123456'); //插入一条数据到表中</div></pre></td></tr></table></figure>
</li>
</ol>
<ol start="2">
<li><p>打开Eclipse，创建一个项目然后导入JDBC驱动包</p>
</li>
<li><p>写一个类进行查询操作</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>&#123;</div><div class="line">           <span class="keyword">try</span> &#123; </div><div class="line">                  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);     <span class="comment">//加载MYSQL JDBC驱动程序    </span></div><div class="line">                  <span class="comment">//Class.forName("org.gjt.mm.mysql.Driver"); </span></div><div class="line">                 System.out.println(<span class="string">"Success loading Mysql Driver!"</span>); </div><div class="line">                &#125; </div><div class="line">                <span class="keyword">catch</span> (Exception e) &#123; </div><div class="line">                  System.out.print(<span class="string">"Error loading Mysql Driver!"</span>); </div><div class="line">                  e.printStackTrace(); </div><div class="line">                &#125; </div><div class="line">                <span class="keyword">try</span> &#123; </div><div class="line">                  Connection connect = DriverManager.getConnection( </div><div class="line">                      <span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>); </div><div class="line">                       <span class="comment">//连接URL为   jdbc:mysql//服务器地址/数据库名  ，后面的2个参数分别是登陆用户名和密码 </span></div><div class="line">                  System.out.println(<span class="string">"Success connect Mysql server!"</span>); </div><div class="line">                  Statement stmt = connect.createStatement(); </div><div class="line">                  ResultSet rs = stmt.executeQuery(<span class="string">"select * from user"</span>); </div><div class="line">                                                                          <span class="comment">//user 为你表的名称 </span></div><div class="line">                  <span class="keyword">while</span> (rs.next()) &#123; </div><div class="line">                    System.out.println(rs.getString(<span class="string">"name"</span>)); </div><div class="line">                  &#125; </div><div class="line">                &#125; </div><div class="line">                <span class="keyword">catch</span> (Exception e) &#123; </div><div class="line">                  System.out.print(<span class="string">"get data error!"</span>); </div><div class="line">                  e.printStackTrace(); </div><div class="line">                &#125; </div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>4.写一个类进行插入操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);     <span class="comment">//加载MYSQL JDBC驱动程序</span></div><div class="line"><span class="comment">//Class.forName("org.gjt.mm.mysql.Driver");</span></div><div class="line">System.out.println(<span class="string">"Success loading Mysql Driver!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">System.out.print(<span class="string">"Error loading Mysql Driver!"</span>);</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Connection connect = DriverManager.getConnection( <span class="string">"jdbc:mysql://localhost:3306/test"</span>,<span class="string">"root"</span>,<span class="string">"123456"</span>);</div><div class="line"><span class="keyword">int</span> num=<span class="number">100</span>;</div><div class="line">PreparedStatement Statement=connect.prepareStatement(<span class="string">"INSERT INTO user VALUES(?,?)"</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)        <span class="comment">//定义个100次的循环，往表里插入一百条信息。</span></div><div class="line">&#123;</div><div class="line">Statement.setString(<span class="number">1</span>,<span class="string">"chongshi"</span>+i);</div><div class="line">Statement.setString(<span class="number">2</span>,<span class="string">"bo"</span>+i);</div><div class="line">Statement.executeUpdate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// &#125; catch (ClassNotFoundException e) &#123;</span></div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line"><span class="comment">// System.out.println("An error has occurred:"+e.toString());</span></div><div class="line"><span class="comment">//  e.printStackTrace();</span></div><div class="line">&#125;<span class="keyword">catch</span>(SQLException e)</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.在主函数中运行两个类<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">SQL A=<span class="keyword">new</span> SQL();</div><div class="line"></div><div class="line">A.write();</div><div class="line">A.find();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows环境下安装Ubuntu系统]]></title>
      <url>/2016/05/29/Windows-Ubuntu/</url>
      <content type="html"><![CDATA[<p>   本文主要介绍从Windows平台下装Ubuntu系统实现双系统的方法，其中介绍安装的两种方法 U盘安装和硬盘安装  ，以及开机引导的两种方法 采用Ubuntu为主的GRUB引导和以Windows为主的引导<br><a id="more"></a></p>
<h2 id="Ubuntu系统介绍"><a href="#Ubuntu系统介绍" class="headerlink" title="Ubuntu系统介绍"></a>Ubuntu系统介绍</h2><p>Ubuntu 是基于Debian GNU/Linux，支持x86、amd64（即x64）和ppc架构，由全球化的专业开发团队（Canonical Ltd）打造的开源GNU/Linux操作系统。为桌面虚拟化提供支持平台。</p>
<p>##Ubuntu到底有什么好？<br>简单粗暴我觉得就是一句话 开发环境好</p>
<ul>
<li>一.下载ubuntu镜像文件<br>1.在官网<a href="http://www.ubuntu.org.cn/download/ubuntu-kylin-zh-CN上面下载最新版本的Ubuntu镜像文件（PS：Ubuntu" target="_blank" rel="external">http://www.ubuntu.org.cn/download/ubuntu-kylin-zh-CN上面下载最新版本的Ubuntu镜像文件（PS：Ubuntu</a> Kylin版本就是多在Ubuntu原版上装了几个程序稍微修改了下，个人不推荐下载）</li>
<li>二.下载分区助手<br>1.在分区助手官网<a href="http://www.disktool.cn/上下载分区助手" target="_blank" rel="external">http://www.disktool.cn/上下载分区助手</a><br>2.看下自己的磁盘，那个磁盘还有多 右键那个磁盘 切割磁盘 出一个新的盘 预留准备装Ubuntu系统。</li>
<li>三.制作U盘安装盘（方法一）<br>1.下载软件Universal_USB_Installer<br>2.用软件进行简单设置<br>3.注意备份好U盘数据，制作时会格式化U盘，然后点Create，弹出警告点确认。<br>4.此时U盘启动盘已经做好。<br>5.重启系统 按F2或者F12（不同电脑不一样），进入BIOS界面 设置U盘为第一启动项 F12保存并且退出</li>
<li>二.从硬盘启动镜像文件进行安装（方法二）<br>1.下载软件Easybcd<br>2.打开软件，在添加新条目里 下面ISO关联镜像文件 点击添加条目<br>EasyBCD<br>3.重启操作系统 选择新加入的新条目进入安装</li>
<li>三.安装Ubuntu系统<br>1.启动后看到第一个界面可以点 第一个选项 尝试下Ubuntu系统 进入这样的页面<br>2.简单的尝试后点击 安装Ubuntu 进入安装页面 另外建议不要在网络环境下安装 也就是不要连接WIFI和有线网  因为会很慢<br>3.一直按下一步 到这个界面<br>4.我们选择其他选项进行自由分配 当然如果想只留Ubuntu系统可以<br>5.会看到一个很多磁盘的界面 选择那个我们之前划分出来的盘 按下左下角“-” 这个按钮 磁盘会变成自由分配的空间<br>6.然后我们点击“+”号进行设置挂载点<br>7.第一个挂载点我们设置/boot 这个主要作为启动引导器 大概400MB就够了 多了是浪费<br>8.接着设置交换空间，相当于虚拟内存 一般设置为自己内存的两倍<br>9.设置“/”挂载点 这是默认目录 多少并不要紧 相当于Win系统里D盘的感觉给自己存东西用的<br>10.分配”/home”挂载点 部分文件会安装在这 依旧按照感觉来<br>11.分配“/user”空间 许多程序会默认安装在这 建议给多点<br>12.其他空间有多往”/opt”等挂载点来一点<br>13.接着点确认<br>14.弹出窗口依旧确认<br>15.语言地区用户名设置完后 简单的等待就安装完了</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wordpress的搭建]]></title>
      <url>/2016/05/29/Wordpress-Build/</url>
      <content type="html"><![CDATA[<p> 考虑到国内免费的博客限制性太强，刚好又因为项目需要网络支持，所以租借了阿里云服务器，就采用阿里云服务器+域名+wordpress的方式进行建站，这里讲解如何搭建一个个人博客</p>
<a id="more"></a>
<hr>
<h2 id="前期准备："><a href="#前期准备：" class="headerlink" title="前期准备："></a>前期准备：</h2><p>购买 阿里云服务器ESC 购买  域名 下载  putty 下载  FlashFXP  </p>
<h2 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h2><ol>
<li>域名备案，这个简单，直接输入身份证号，上传身份证照片，2天等待,OK~ </li>
<li><p>服务器备案。 因为国内的服务器都需要备案才可以使用.如果是国外的服务器那么则不需要备案，但是连接速度没有国内的快。</p>
<blockquote>
<p>香港地区的服务器也不需要备案，网速介于国内与国外之间。 所以购买服务器的时候按自己需求购买 这里首先讲的是国内服务器备案流程。 这里以阿里云服务器为例子.</p>
</blockquote>
</li>
<li><p>首先要登录备案系统，并且注册一个备案帐号，然后在阿里云的管理控制台左边的备案处取得备案服务号。 </p>
</li>
<li>拍照签字上传图片。 然后等待1-2天左右的阿里云人员审核 如果通过了，会以短信和邮件告知.</li>
<li>接着需要用阿里的幕布进行拍照。 两种方法，一是去指定的照相馆免费拍照。二是选择阿里邮寄幕布给你。<br>我是用第二种方法，拍照后上传 接着等待工信部的审核，大概十几天得到了审核通过的通知。至此备案流程完毕。<h2 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h2>解析 在阿里云解析里设置解析指向的地址为你自己服务器的外网IP，保存即可。等待一会，24小时内生效<h2 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h2>搭建服务器Linux环境，并且利用wordpress镜像构建wordpress平台。 流程为 管理控制台-云服务器-停止实例-重装系统盘-使用自定义镜像-安装wordpress 等5分钟后，实例显示运行中，点重置密码，重新设置密码后，点重启实例。<h2 id="第四阶段"><a href="#第四阶段" class="headerlink" title="第四阶段"></a>第四阶段</h2>打开putty，输入IP地址，端口22，连接 输入用户名root 输入密码（重新设置的密码) 输入指令：cat default_pass 此时会显示FTP帐号密码，MySQL帐号密码，wordpress帐号密码 全部记下来 在浏览器中输入你网站的密码 登录wordpress系统，初始化安装，进行调试后 至此 一个拥有独立服务器+独立域名的个人博客搭建完毕  </li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[如何姿态优雅的翻墙]]></title>
      <url>/2016/05/28/VPN/</url>
      <content type="html"><![CDATA[<p>本篇主要介绍翻墙相关名词以及利用修改hosts达到翻墙目的方法<br><a id="more"></a></p>
<ul>
<li><p>科普名词一—翻墙</p>
<p> 所谓翻墙，是指绕过相应的IP封锁、内容过滤、域名劫持、流量限制等，实现对网络内容的访问。</p>
</li>
<li><p>科普名词二—国家防火墙（GFW）</p>
<p>   防火长城（英文名称Great Firewall of China，简写为Great Firewall，缩写GFW），也称中国防火墙或中国国家防火墙，指中华人民共和国政府在其管辖因特网内部建立的多套网络审查系统的总称，包括相关行政审查系统。 首要设计者为北京邮电大学原校长方滨兴，被称为“国家防火墙之父”<br>   GFW中的主要技术包括国家入口网关的IP封锁、主干路由器的关键字过滤阻断、域名劫持和HTTPS证书过滤等4种。那些被限制的网站，根本原因是因为其网站上发布了中国政府不能接受的政治等方面的内容，有些综合性或技术性的网站只是含有少量的或可能牵涉到这些信息也会被整体封锁。</p>
<!--more--></li>
<li><p>科普名词三—虚拟专用网络（VPN）</p>
<p> 虚拟专用网络的功能是：在公用网络上建立专用网络，进行加密通讯。<br>为什么我们需要翻墙？<br>政府需要管理全世界近四分之一的人口，网络又是实现人与人之间相隔万里也可以正常沟通。所以对于国外Facebook，Google，youtueb,推特等网站予以封锁。<br>如何才能翻墙？<br>常见的手段有VPN，另外一般VPN软件都需要收费，或者是免费使用但是植入广告，毕竟搭建VPN需要费用，总不能让开发者做慈善吧。<br>手机平台建议直接下载软件 Netpas云墙 ，初期会赠送一大笔流量，够上上Facebook了 后面通过签到可以得到免费流量<br>电脑平台也一样可以搭建VPN进行翻墙，方法各有千秋 有点麻烦。</p>
</li>
</ul>
<hr>
<ul>
<li>如何利用修改hosts文件进行翻墙？</li>
</ul>
<p>翻墙原理：</p>
<ul>
<li>网址与IP</li>
</ul>
<p>我们知道，每一个网站都有一个网址，而每一个网址呢，都对应着一个IP地址。<br>IP地址才是网站的真正地址，我们访问一个网站，必须知道它的IP地址才行。</p>
<ul>
<li>DNS服务器</li>
</ul>
<p>因为我们输入网址以后，并不是直接通过网址去连你的网站，而是通过另外一个工具，将网址“还原”成真实的IP地址，再通过IP地址，去连接你要­访问的网站。<br>这个工具呢，就叫做DNS服务器（domain name server），著名的DNS服务器有Google Public DNS和OpenDNS。<br>说白了就是DNS解析</p>
<ul>
<li>为什么有的网站上不了？</li>
</ul>
<p>对应方式一旦改变了，或者被某种方式切断了，我们就无法通过网址，得到真实的IP从而访问网站。<br>这是某些网站上不了的原因之一，专业术语叫做DNS劫持和DNS污染（两者不是一回事）。<br>这个时候，我们就要人为地去建立这种对应关系。</p>
<ul>
<li>hosts文件的作用</li>
</ul>
<p>那怎样建立这种对应关系呢？这就要用到我们今天要讲的hosts文件了。<br>hosts文件，通俗地说，就是一个记录对应关系的小本子。<br>当你要上某个网站，如twitter的时候，系统会先查hosts文件，如果里面有twitter对应的IP地址，它则会主动去连这个IP，这个时候，不管是DNS劫持和DNS污染，对你上网都是没有影响的。<br>所以，我们只要能在hosts里面，建立起这种正确的对应关系，就可以避­开DNS引起的问题。</p>
<hr>
<p>下面，我们就讲讲如何修改hosts文件。<br>利用修改hosts文件进行翻墙</p>
<ul>
<li>Windows环境下：</li>
</ul>
<blockquote>
<p>1.下载目前最新的hosts文件(2016年1月6日):   <a href="http://www.wxz.name/other/hosts">www.wxz.name/other/hosts</a><br>2.备份C:\WINDOWS\system32\drivers\etc\hosts（将原来的hosts保存到其他地方，以免出错后还原）<br>3.将下载的hosts文件复制到C:\WINDOWS\system32\drivers\etc覆盖<br>4.可以尽情的出入于长城内外了</p>
</blockquote>
<ul>
<li>LInux环境下：</li>
</ul>
<blockquote>
<p>1.下载目前最新的hosts文件(2016年1月6日):   <a href="http://www.wxz.name/other/hosts">www.wxz.name/other/hosts</a><br>2.输入指令 sudo gedit /etc/hosts<br>3.复制下载的hosts文件到以前hosts文件下面（不要覆盖）<br>4.可以尽情的出入于长城内外了</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 翻墙 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于Sqlite数据库连接Android]]></title>
      <url>/2016/05/28/Sqlite-Android/</url>
      <content type="html"><![CDATA[<p> 最近因为要做一个安卓的课设，涉及到了许多数据库方面的支持，搜了很多CSDN的文章以及百度了许多博客，总的来说大底千篇一律，或者过于复杂，自己整理了一下文章。</p>
<p>  希望能够精简的讲述如果连接数据库。笔者搜集网上博文，大抵可以分为两种方法实现通过Android对Sqlite数据库的操作.<br><a id="more"></a></p>
<hr>
<ul>
<li><p>方法一</p>
<p>新建一个类继承SQLiteOpenHelper类作为帮助类，当需要的时候调用帮助类里面的方法进行修改。</p>
</li>
<li><p>方法二</p>
<p>是SQLiteDatabase类定义一个对象，然后通过函数实现对数据库的修改。</p>
</li>
</ul>
<hr>
<p>综合两种方法，笔者觉得方法二更为简单，因为很多都是数据库语句，可以很自由的修改。这两种方法在后文的源代码中都有用到，其中数据的添加笔者用方法一实现，数据的删除查找排序笔者用方法二实现，读者可以自行对比。本文主要介绍方法一。</p>
<hr>
<p>1.首先笔者新建一个Android工程，新建一个EditText，一个Listview，三个Button<br>Xml文件新加代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;EditText</div><div class="line">android:id=&quot;@+id/editText1&quot;</div><div class="line">android:layout_width=&quot;wrap_content&quot;</div><div class="line">android:layout_height=&quot;wrap_content&quot;</div><div class="line">android:layout_alignParentLeft=&quot;true&quot;</div><div class="line">android:layout_alignParentRight=&quot;true&quot;</div><div class="line">android:layout_alignParentTop=&quot;true&quot;</div><div class="line">android:ems=&quot;10&quot;</div><div class="line">/&gt;</div><div class="line"> </div><div class="line">&lt;ListView</div><div class="line">android:id=&quot;@+id/listView1&quot;</div><div class="line">android:layout_width=&quot;match_parent&quot;</div><div class="line">android:layout_height=&quot;wrap_content&quot;</div><div class="line">android:layout_above=&quot;@+id/button1&quot;</div><div class="line">android:layout_alignLeft=&quot;@+id/editText1&quot;</div><div class="line">android:layout_alignParentRight=&quot;true&quot;</div><div class="line">android:layout_below=&quot;@+id/editText1&quot; &gt;</div><div class="line"> </div><div class="line">&lt;/ListView&gt;</div><div class="line"> </div><div class="line">&lt;Button</div><div class="line">android:id=&quot;@+id/button1&quot;</div><div class="line">android:layout_width=&quot;wrap_content&quot;</div><div class="line">android:layout_height=&quot;wrap_content&quot;</div><div class="line">android:layout_alignParentBottom=&quot;true&quot;</div><div class="line">android:layout_alignParentLeft=&quot;true&quot;</div><div class="line">android:text=&quot;添加&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;Button</div><div class="line">android:id=&quot;@+id/button2&quot;</div><div class="line">android:layout_width=&quot;wrap_content&quot;</div><div class="line">android:layout_height=&quot;wrap_content&quot;</div><div class="line">android:layout_below=&quot;@+id/listView1&quot;</div><div class="line">android:layout_toRightOf=&quot;@+id/button1&quot;</div><div class="line">android:text=&quot;查询&quot; /&gt;</div><div class="line"> </div><div class="line">&lt;Button</div><div class="line">android:id=&quot;@+id/button3&quot;</div><div class="line">android:layout_width=&quot;wrap_content&quot;</div><div class="line">android:layout_height=&quot;wrap_content&quot;</div><div class="line">android:layout_below=&quot;@+id/listView1&quot;</div><div class="line">android:layout_toRightOf=&quot;@+id/button2&quot;</div><div class="line">android:text=&quot;删除&quot; /&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
